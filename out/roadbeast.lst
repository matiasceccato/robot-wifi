
examples/c/sapi/wifi/esp8266/roadbeast/out/roadbeast.elf:     file format elf32-littlearm
examples/c/sapi/wifi/esp8266/roadbeast/out/roadbeast.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0008e5

Program Header:
0x70000001 off    0x00013044 vaddr 0x1a003044 paddr 0x1a003044 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x0000015c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000304c memsz 0x0000304c flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00304c align 2**16
         filesz 0x000000dc memsz 0x000000dc flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003040  1a000000  1a000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  10000000  1a00304c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200dc  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200dc  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200dc  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200dc  2**2
                  CONTENTS
  6 .bss          0000007c  100000e0  100000e0  000000e0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200dc  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200dc  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200dc  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200dc  2**2
                  CONTENTS
 11 .init_array   00000004  1a003040  1a003040  00013040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a003044  1a003044  00013044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200dc  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200dc  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200dc  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200dc  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200dc  2**2
                  CONTENTS
 18 .noinit       00000000  1000015c  1000015c  000200dc  2**2
                  CONTENTS
 19 .debug_info   0002c5ab  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00005faa  00000000  00000000  0004c687  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00009ddc  00000000  00000000  00052631  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000c90  00000000  00000000  0005c40d  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000d80  00000000  00000000  0005d09d  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000f298  00000000  00000000  0005de1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00016c31  00000000  00000000  0006d0b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00028fbc  00000000  00000000  00083ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000acca2  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000acd0a  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00001fcc  00000000  00000000  000acd3c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000e0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a003040 l    d  .init_array	00000000 .init_array
1a003044 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000015c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a001c40 l     F .text	000000a4 uartProcessIRQ
10000134 l     O .bss	00000004 rxIsrCallbackUART0
10000138 l     O .bss	00000004 rxIsrCallbackUART2
1000013c l     O .bss	00000004 rxIsrCallbackUART3
10000140 l     O .bss	00000004 txIsrCallbackUART0
10000144 l     O .bss	00000004 txIsrCallbackUART2
10000148 l     O .bss	00000004 txIsrCallbackUART3
1a002fd8 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 servo_rb.c
00000000 l    df *ABS*	00000000 wifi.c
100000e4 l     O .bss	00000032 cadena
10000116 l     O .bss	00000001 cont
10000118 l     O .bss	00000001 i
10000119 l     O .bss	00000001 save
00000000 l    df *ABS*	00000000 motor_rb.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a002d6c l     O .text	00000004 InitClkStates
1a002d70 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a000a20 l     F .text	00000044 Board_LED_Init
1a000a64 l     F .text	00000040 Board_TEC_Init
1a000aa4 l     F .text	00000040 Board_GPIO_Init
1a000ae4 l     F .text	00000030 Board_ADC_Init
1a000b14 l     F .text	00000038 Board_SPI_Init
1a000b4c l     F .text	00000024 Board_I2C_Init
1a002de8 l     O .text	00000008 GpioButtons
1a002df0 l     O .text	0000000c GpioLeds
1a002dfc l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a000bcc l     F .text	00000014 Chip_SSP_GetClockIndex
1a000be0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sct_pwm_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sct_18xx_43xx.c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000da0 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000db4 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a002e14 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000fd4 l     F .text	000000a0 pll_calc_divs
1a001074 l     F .text	0000010c pll_get_frac
1a001180 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0013f4 l     F .text	00000022 Chip_Clock_GetDivRate
1000011c l     O .bss	00000008 audio_usb_pll_freq
1a002e68 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001560 l     F .text	0000002c Chip_UART_GetIndex
1a002ed4 l     O .text	00000008 UART_BClock
1a002edc l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001750 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_timer.c
1a00199a l     F .text	00000002 errorOcurred
1a00199c l     F .text	00000002 doNothing
1000003c l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_tick.c
10000124 l     O .bss	00000004 callBackFuncParams
10000128 l     O .bss	00000008 tickCounter
10000130 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_pwm.c
1a001b74 l     F .text	0000000c pwmInitTimers
1a001bcc l     F .text	00000034 pwmAttach
1a001c00 l     F .text	0000001c pwmDetach
10000088 l     O .data	0000000b AttachedPWMList
1a002fcc l     O .text	0000000b pwmMap
00000000 l    df *ABS*	00000000 sapi_sct.c
1a003020 l     O .text	0000001c SCTdataList
00000000 l    df *ABS*	00000000 sapi_usb_device.c
1000014c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a002040 l     F .text	00000010 clearInterrupt
1a002050 l     F .text	0000005c serveInterrupt
10000094 l     O .data	00000048 ultrasonicSensors
1a00303c l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a003044 l       .init_array	00000000 __init_array_end
1a003040 l       .bss_RAM5	00000000 __preinit_array_end
1a003040 l       .init_array	00000000 __init_array_start
1a003040 l       .bss_RAM5	00000000 __preinit_array_start
1a001218 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000698 g     F .text	0000000c getAtras
1a001a20 g     F .text	00000044 TIMER2_IRQHandler
1a001d14 g     F .text	00000014 uartRxRead
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0023e8 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a001db8 g     F .text	0000001e uartReadByte
1a000bc4 g     F .text	00000008 __stdio_init
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000e5a g     F .text	0000000c Chip_ADC_SetResolution
1a001b48 g     F .text	0000002c SysTick_Handler
1a0015e0 g     F .text	00000040 Chip_UART_SetBaud
1a0008e0  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
10000117 g     O .bss	00000001 giro
1a00304c g       .ARM.exidx	00000000 __exidx_end
1a00068c g     F .text	0000000c getAdelante
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a000d8e g     F .text	00000010 Chip_SCT_Init
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff6faa g       *ABS*	00000000 __valid_user_code_checksum
1a00304c g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001a64 g     F .text	00000044 TIMER3_IRQHandler
1a001496 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000360 g     F .text	00000058 validar
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
100000e2 g     O .bss	00000001 atras
1a002370 g     F .text	00000022 .hidden __floatsidf
100000e1 g     O .bss	00000001 angulo
1a0028a8 g     F .text	00000000 .hidden __aeabi_uldivmod
1000015c g       .noinit	00000000 _noinit
1a001df0 g     F .text	00000016 uartWriteString
10000154 g     O .bss	00000004 SystemCoreClock
1a00158c g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000748 g     F .text	00000014 MOTOR_RB_retroceder
1a000180  w    F .text	00000002 UsageFault_Handler
1a001514 g     F .text	0000004c Chip_Clock_GetRate
1a002868 g     F .text	00000040 .hidden __fixunsdfsi
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a000778 g     F .text	0000001a MOTOR_RB_parar
1a0009a8 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a002350 g     F .text	0000001e .hidden __aeabi_ui2d
1a0028d8 g     F .text	000002d0 .hidden __udivmoddi4
1a0020cc g     F .text	00000000 .hidden __aeabi_drsub
1a002de4 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001e74 g     F .text	0000004c Sct_EnablePwmFor
1a0020b6 g     F .text	0000000a GPIO1_IRQHandler
1a002394 g     F .text	00000042 .hidden __extendsfdf2
1a002698 g     F .text	000001d0 .hidden __aeabi_ddiv
1a00075c g     F .text	00000014 MOTOR_RB_avanzar
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a0020d8 g     F .text	00000276 .hidden __adddf3
1a001ce4 g     F .text	00000018 uartRxReady
1a003044 g       .ARM.exidx	00000000 __exidx_start
1a002444 g     F .text	00000254 .hidden __aeabi_dmul
1a0006f0 g     F .text	00000058 enviarVelocidad
1a0002fc g     O .text	00000004 CRP_WORD
1a00030c g     F .text	00000054 SERVO_RB_girar
1a002bac g     F .text	00000048 __libc_init_array
1a002350 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0004e8 g     F .text	00000150 procesar
1a001e1a g     F .text	00000024 Sct_Init
1a000b94 g     F .text	00000030 Board_Init
100000e0 g     O .bss	00000001 adelante
1a00096e  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
1000015c g       .bss	00000000 _ebss
1a0019a0 g     F .text	00000040 TIMER0_IRQHandler
1a0008e4 g     F .text	00000088 Reset_Handler
1a001acc g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a000cc4 g     F .text	0000004a Chip_SCTPWM_SetRate
1a000d54 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000300 g     F .text	0000000c SERVO_RB_init
1a0011cc g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a0020d8 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a0023d8 g     F .text	0000006a .hidden __aeabi_ul2d
1a0019e0 g     F .text	00000040 TIMER1_IRQHandler
1a000d30 g     F .text	00000024 Chip_I2C_Init
1a0006c8 g     F .text	0000000c setAtras
1a001e06 g     F .text	0000000a UART2_IRQHandler
1a001388 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a002ee4 g     O .text	000000e6 gpioPinsInit
1a001dd6 g     F .text	0000001a uartWriteByte
1a000bf8 g     F .text	00000012 Chip_SSP_SetClockRate
1a0020c0 g     F .text	0000000a GPIO2_IRQHandler
1a001470 g     F .text	00000026 Chip_Clock_GetBaseClock
100000e0 g       .bss	00000000 _bss
10000150 g     O .bss	00000001 dato
1a000e28 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0020d4 g     F .text	0000027a .hidden __aeabi_dsub
1a002c04 g     F .text	0000002e strstr
1a0023d8 g     F .text	0000006a .hidden __floatundidf
1a0006a4 g     F .text	0000000c getGiro
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a000c0a g     F .text	0000003e Chip_SSP_SetBitRate
1a000792 g     F .text	00000028 MOTOR_RB_init
1a000d8c g     F .text	00000002 Chip_GPIO_Init
1a002e10 g     O .text	00000004 OscRateIn
1a001f50 g     F .text	0000005a delayInaccurateMs
1a001d3c g     F .text	0000007c uartInit
1000011b g     O .bss	00000001 velocidad
1000015c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a000638 g     F .text	00000054 analizarEntrada
1a0006d4 g     F .text	0000000c setGiro
1a002370 g     F .text	00000022 .hidden __aeabi_i2d
1a001784 g     F .text	000001ac gpioInit
1a0006e0 g     F .text	0000000c setStop
1a001c1c g     F .text	00000024 pwmInit
1a0004c4 g     F .text	00000024 closeCone
1a002ba8  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002698 g     F .text	000001d0 .hidden __divdf3
1a002444 g     F .text	00000254 .hidden __muldf3
1a001ec0 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a001234 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a002bf4 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0007bc g     F .text	00000124 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a001e5c g     F .text	00000018 Sct_SetDutyCycle
1a0023e8 g     F .text	0000005a .hidden __aeabi_l2d
1a001cfc g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0014a4 g     F .text	0000003c Chip_Clock_EnableOpts
1a001250 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a001308 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0016fc g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a002008 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001930 g     F .text	0000006a gpioWrite
1a00096c  w    F .text	00000002 _fini
1a000de8 g     F .text	00000040 Chip_ADC_Init
10000158 g     O .bss	00000004 g_pUsbApi
1a000970 g     F .text	00000038 Board_SetupMuxing
1a001620 g     F .text	000000dc Chip_UART_SetBaudFDR
1a001aa8 g     F .text	0000000c tickRead
10000080 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a001e40 g     F .text	0000001c Sct_Uint8ToTicks
1a001d28 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1000015c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0006bc g     F .text	0000000c setAdelante
1a000c48 g     F .text	00000038 Chip_SSP_Init
1a0003b8 g     F .text	0000010c espConfig
1a002868 g     F .text	00000040 .hidden __aeabi_d2uiz
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a000b70 g     F .text	00000024 Board_Debug_Init
100000dc g       .data	00000000 _edata
1a000d10 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a000c80 g     F .text	00000044 Chip_SCTPWM_SetOutPin
1a000e68 g     F .text	00000158 Chip_SetupCoreClock
1a0020ac g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a000fc0 g     F .text	00000014 SystemCoreClockUpdate
1a001b80 g     F .text	00000028 pwmIsAttached
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001faa g     F .text	0000005c delayInaccurateUs
1a002ba8  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a001ba8 g     F .text	00000024 pwmWrite
1a0014e0 g     F .text	00000034 Chip_Clock_Enable
1a001e10 g     F .text	0000000a UART3_IRQHandler
1000011a g     O .bss	00000001 stop
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a002394 g     F .text	00000042 .hidden __aeabi_f2d
1a001edc g     F .text	00000074 boardInit
1a0006b0 g     F .text	0000000c getStop
1a000770 g     F .text	00000008 MOTOR_RB_setVelocidad
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0020d4 g     F .text	0000027a .hidden __subdf3
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a001ab4 g     F .text	00000018 tickPowerSet
1a001418 g     F .text	00000058 Chip_Clock_SetBaseClock
1a001734 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a000a14 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 e5 08 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a aa 6f ff 53     }............o.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	49 1b 00 1a                                         I...

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	c1 1e 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	a1 19 00 1a e1 19 00 1a 21 1a 00 1a 65 1a 00 1a     ........!...e...
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a 07 1e 00 1a 11 1e 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	ad 20 00 1a b7 20 00 1a c1 20 00 1a bb 01 00 1a     . ... ... ......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a00304c 	.word	0x1a00304c
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000dc 	.word	0x000000dc
1a000120:	1a00304c 	.word	0x1a00304c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00304c 	.word	0x1a00304c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00304c 	.word	0x1a00304c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00304c 	.word	0x1a00304c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000e0 	.word	0x100000e0
1a000154:	0000007c 	.word	0x0000007c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f001 fd3e 	bl	1a001c40 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x1a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <SERVO_RB_init>:
#include "servo_rb.h"

#define SERVO_N SERVO0

void SERVO_RB_init(){
1a000300:	b508      	push	{r3, lr}
	//servoConfig(0, SERVO_ENABLE );
	//servoConfig(SERVO_N, SERVO_ENABLE_OUTPUT );
   gpioConfig( T_FIL1, GPIO_OUTPUT);
1a000302:	2101      	movs	r1, #1
1a000304:	2000      	movs	r0, #0
1a000306:	f001 fa3d 	bl	1a001784 <gpioInit>
}
1a00030a:	bd08      	pop	{r3, pc}

1a00030c <SERVO_RB_girar>:

void SERVO_RB_girar(int16_t ang){
1a00030c:	b538      	push	{r3, r4, r5, lr}
   uint16_t high = 0;
   uint8_t i;
	//servoWrite(SERVO_N, ang + 90);
   switch (ang){
1a00030e:	b1e8      	cbz	r0, 1a00034c <SERVO_RB_girar+0x40>
1a000310:	282d      	cmp	r0, #45	; 0x2d
1a000312:	d01e      	beq.n	1a000352 <SERVO_RB_girar+0x46>
1a000314:	f110 0f2d 	cmn.w	r0, #45	; 0x2d
1a000318:	d01e      	beq.n	1a000358 <SERVO_RB_girar+0x4c>
   uint16_t high = 0;
1a00031a:	2500      	movs	r5, #0
      case 0: high = 1000; break;
      case 45: high = 1200; break;
      case -45: high = 800; break;
   }
   for (i=0;i<5;i++){
1a00031c:	2400      	movs	r4, #0
1a00031e:	2c04      	cmp	r4, #4
1a000320:	d81d      	bhi.n	1a00035e <SERVO_RB_girar+0x52>
   gpioWrite(T_FIL1, 1);
1a000322:	2101      	movs	r1, #1
1a000324:	2000      	movs	r0, #0
1a000326:	f001 fb03 	bl	1a001930 <gpioWrite>
   delayInaccurateUs(high);
1a00032a:	b2a8      	uxth	r0, r5
1a00032c:	2100      	movs	r1, #0
1a00032e:	f001 fe3c 	bl	1a001faa <delayInaccurateUs>
   gpioWrite(T_FIL1, 0); 
1a000332:	2100      	movs	r1, #0
1a000334:	4608      	mov	r0, r1
1a000336:	f001 fafb 	bl	1a001930 <gpioWrite>
   delayInaccurateUs(20000 - high);
1a00033a:	f5c5 409c 	rsb	r0, r5, #19968	; 0x4e00
1a00033e:	3020      	adds	r0, #32
1a000340:	17c1      	asrs	r1, r0, #31
1a000342:	f001 fe32 	bl	1a001faa <delayInaccurateUs>
   for (i=0;i<5;i++){
1a000346:	3401      	adds	r4, #1
1a000348:	b2e4      	uxtb	r4, r4
1a00034a:	e7e8      	b.n	1a00031e <SERVO_RB_girar+0x12>
      case 0: high = 1000; break;
1a00034c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
1a000350:	e7e4      	b.n	1a00031c <SERVO_RB_girar+0x10>
      case 45: high = 1200; break;
1a000352:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
1a000356:	e7e1      	b.n	1a00031c <SERVO_RB_girar+0x10>
      case -45: high = 800; break;
1a000358:	f44f 7548 	mov.w	r5, #800	; 0x320
1a00035c:	e7de      	b.n	1a00031c <SERVO_RB_girar+0x10>
   }
1a00035e:	bd38      	pop	{r3, r4, r5, pc}

1a000360 <validar>:
         //Prender LED ROJO
         return 1;
      }
}

void validar(uint8_t *todoOk){
1a000360:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000362:	b083      	sub	sp, #12
1a000364:	4607      	mov	r7, r0
   uint8_t ready = 0;
   uint8_t dato  = 0;
1a000366:	2600      	movs	r6, #0
1a000368:	f88d 6007 	strb.w	r6, [sp, #7]
   uint8_t ant = 0;
1a00036c:	4635      	mov	r5, r6
   uint8_t antant = 0;

   while(!ready){
1a00036e:	e00e      	b.n	1a00038e <validar+0x2e>
      antant = ant;
      ant = dato;
      uartReadByte( UART_232 , &dato );
      uartWriteByte( UART_USB , dato);
      if( (antant == 'E') && (ant == 'R') && (dato == 'R') ){
1a000370:	2c52      	cmp	r4, #82	; 0x52
1a000372:	d11b      	bne.n	1a0003ac <validar+0x4c>
1a000374:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000378:	2b52      	cmp	r3, #82	; 0x52
1a00037a:	d117      	bne.n	1a0003ac <validar+0x4c>
         *todoOk = 0;
1a00037c:	2300      	movs	r3, #0
1a00037e:	703b      	strb	r3, [r7, #0]
         ready = 1;
1a000380:	2601      	movs	r6, #1
1a000382:	e013      	b.n	1a0003ac <validar+0x4c>
      }
      if((ant == 'O') && (dato == 'K') ){
1a000384:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000388:	2b4b      	cmp	r3, #75	; 0x4b
1a00038a:	d013      	beq.n	1a0003b4 <validar+0x54>
1a00038c:	4625      	mov	r5, r4
   while(!ready){
1a00038e:	b98e      	cbnz	r6, 1a0003b4 <validar+0x54>
      ant = dato;
1a000390:	f89d 4007 	ldrb.w	r4, [sp, #7]
      uartReadByte( UART_232 , &dato );
1a000394:	f10d 0107 	add.w	r1, sp, #7
1a000398:	2005      	movs	r0, #5
1a00039a:	f001 fd0d 	bl	1a001db8 <uartReadByte>
      uartWriteByte( UART_USB , dato);
1a00039e:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0003a2:	2003      	movs	r0, #3
1a0003a4:	f001 fd17 	bl	1a001dd6 <uartWriteByte>
      if( (antant == 'E') && (ant == 'R') && (dato == 'R') ){
1a0003a8:	2d45      	cmp	r5, #69	; 0x45
1a0003aa:	d0e1      	beq.n	1a000370 <validar+0x10>
      if((ant == 'O') && (dato == 'K') ){
1a0003ac:	2c4f      	cmp	r4, #79	; 0x4f
1a0003ae:	d0e9      	beq.n	1a000384 <validar+0x24>
1a0003b0:	4625      	mov	r5, r4
1a0003b2:	e7ec      	b.n	1a00038e <validar+0x2e>
         ready = 1;
      }
   }

}
1a0003b4:	b003      	add	sp, #12
1a0003b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a0003b8 <espConfig>:
int espConfig(void){
1a0003b8:	b500      	push	{lr}
1a0003ba:	b083      	sub	sp, #12
      uartConfig(UART_USB, 115200);
1a0003bc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0003c0:	2003      	movs	r0, #3
1a0003c2:	f001 fcbb 	bl	1a001d3c <uartInit>
      uartConfig(UART_232, 115200);
1a0003c6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0003ca:	2005      	movs	r0, #5
1a0003cc:	f001 fcb6 	bl	1a001d3c <uartInit>
      uint8_t todoOk = 1;
1a0003d0:	2101      	movs	r1, #1
1a0003d2:	f88d 1007 	strb.w	r1, [sp, #7]
      gpioWrite( T_COL1, 1);
1a0003d6:	2006      	movs	r0, #6
1a0003d8:	f001 faaa 	bl	1a001930 <gpioWrite>
      gpioWrite( T_FIL3, 0);
1a0003dc:	2100      	movs	r1, #0
1a0003de:	2004      	movs	r0, #4
1a0003e0:	f001 faa6 	bl	1a001930 <gpioWrite>
      delay(1000);
1a0003e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a0003e8:	2100      	movs	r1, #0
1a0003ea:	f001 fe0d 	bl	1a002008 <delay>
      uartWriteString( UART_USB, "> Configurando ESP8266-01\r\n" );
1a0003ee:	492e      	ldr	r1, [pc, #184]	; (1a0004a8 <espConfig+0xf0>)
1a0003f0:	2003      	movs	r0, #3
1a0003f2:	f001 fcfd 	bl	1a001df0 <uartWriteString>
      if(todoOk){
1a0003f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0003fa:	bb53      	cbnz	r3, 1a000452 <espConfig+0x9a>
      if(todoOk){
1a0003fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000400:	bb83      	cbnz	r3, 1a000464 <espConfig+0xac>
      if(todoOk){
1a000402:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000406:	bbb3      	cbnz	r3, 1a000476 <espConfig+0xbe>
      if(todoOk){
1a000408:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00040c:	2b00      	cmp	r3, #0
1a00040e:	d13b      	bne.n	1a000488 <espConfig+0xd0>
      if(todoOk) {
1a000410:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000414:	2b00      	cmp	r3, #0
1a000416:	d040      	beq.n	1a00049a <espConfig+0xe2>
         uartWriteString( UART_USB, "> ESP8266-01 configurado correctamente\r\n" );
1a000418:	4924      	ldr	r1, [pc, #144]	; (1a0004ac <espConfig+0xf4>)
1a00041a:	2003      	movs	r0, #3
1a00041c:	f001 fce8 	bl	1a001df0 <uartWriteString>
         gpioWrite( T_COL1, 0);
1a000420:	2100      	movs	r1, #0
1a000422:	2006      	movs	r0, #6
1a000424:	f001 fa84 	bl	1a001930 <gpioWrite>
         gpioWrite( T_FIL0, 1);
1a000428:	2101      	movs	r1, #1
1a00042a:	2005      	movs	r0, #5
1a00042c:	f001 fa80 	bl	1a001930 <gpioWrite>
         pwmWrite( PWM1, pwmVal );
1a000430:	2164      	movs	r1, #100	; 0x64
1a000432:	2001      	movs	r0, #1
1a000434:	f001 fbb8 	bl	1a001ba8 <pwmWrite>
         delay(750);
1a000438:	f240 20ee 	movw	r0, #750	; 0x2ee
1a00043c:	2100      	movs	r1, #0
1a00043e:	f001 fde3 	bl	1a002008 <delay>
         pwmWrite( PWM1, 0 );
1a000442:	2100      	movs	r1, #0
1a000444:	2001      	movs	r0, #1
1a000446:	f001 fbaf 	bl	1a001ba8 <pwmWrite>
         return 0;
1a00044a:	2000      	movs	r0, #0
}
1a00044c:	b003      	add	sp, #12
1a00044e:	f85d fb04 	ldr.w	pc, [sp], #4
         uartWriteString( UART_232, "AT+CWMODE=3\r\n" );
1a000452:	4917      	ldr	r1, [pc, #92]	; (1a0004b0 <espConfig+0xf8>)
1a000454:	2005      	movs	r0, #5
1a000456:	f001 fccb 	bl	1a001df0 <uartWriteString>
         validar(&todoOk);
1a00045a:	f10d 0007 	add.w	r0, sp, #7
1a00045e:	f7ff ff7f 	bl	1a000360 <validar>
1a000462:	e7cb      	b.n	1a0003fc <espConfig+0x44>
         uartWriteString( UART_232, "AT+CWSAP=\"RoadBeast\",\"12345678\",11,3,3\r\n" );
1a000464:	4913      	ldr	r1, [pc, #76]	; (1a0004b4 <espConfig+0xfc>)
1a000466:	2005      	movs	r0, #5
1a000468:	f001 fcc2 	bl	1a001df0 <uartWriteString>
         validar(&todoOk);
1a00046c:	f10d 0007 	add.w	r0, sp, #7
1a000470:	f7ff ff76 	bl	1a000360 <validar>
1a000474:	e7c5      	b.n	1a000402 <espConfig+0x4a>
         uartWriteString( UART_232, "AT+CIPMUX=1\r\n" );
1a000476:	4910      	ldr	r1, [pc, #64]	; (1a0004b8 <espConfig+0x100>)
1a000478:	2005      	movs	r0, #5
1a00047a:	f001 fcb9 	bl	1a001df0 <uartWriteString>
         validar(&todoOk);
1a00047e:	f10d 0007 	add.w	r0, sp, #7
1a000482:	f7ff ff6d 	bl	1a000360 <validar>
1a000486:	e7bf      	b.n	1a000408 <espConfig+0x50>
         uartWriteString( UART_232, "AT+CIPSERVER=1,80\r\n" );
1a000488:	490c      	ldr	r1, [pc, #48]	; (1a0004bc <espConfig+0x104>)
1a00048a:	2005      	movs	r0, #5
1a00048c:	f001 fcb0 	bl	1a001df0 <uartWriteString>
         validar(&todoOk);
1a000490:	f10d 0007 	add.w	r0, sp, #7
1a000494:	f7ff ff64 	bl	1a000360 <validar>
1a000498:	e7ba      	b.n	1a000410 <espConfig+0x58>
         uartWriteString( UART_USB, "> Error en la configuracion del  ESP8266-01\r\n" );
1a00049a:	4909      	ldr	r1, [pc, #36]	; (1a0004c0 <espConfig+0x108>)
1a00049c:	2003      	movs	r0, #3
1a00049e:	f001 fca7 	bl	1a001df0 <uartWriteString>
         return 1;
1a0004a2:	2001      	movs	r0, #1
1a0004a4:	e7d2      	b.n	1a00044c <espConfig+0x94>
1a0004a6:	bf00      	nop
1a0004a8:	1a002c54 	.word	0x1a002c54
1a0004ac:	1a002cd0 	.word	0x1a002cd0
1a0004b0:	1a002c70 	.word	0x1a002c70
1a0004b4:	1a002c80 	.word	0x1a002c80
1a0004b8:	1a002cac 	.word	0x1a002cac
1a0004bc:	1a002cbc 	.word	0x1a002cbc
1a0004c0:	1a002cfc 	.word	0x1a002cfc

1a0004c4 <closeCone>:
      uartWriteString( UART_USB, cadena );
      uartWriteString( UART_USB, "\r\n" );
      }
}

void closeCone(void){
1a0004c4:	b508      	push	{r3, lr}
   uartWriteString( UART_232, "AT+CIPCLOSE=0\r\n");
1a0004c6:	4906      	ldr	r1, [pc, #24]	; (1a0004e0 <closeCone+0x1c>)
1a0004c8:	2005      	movs	r0, #5
1a0004ca:	f001 fc91 	bl	1a001df0 <uartWriteString>
   delay(10); 
1a0004ce:	200a      	movs	r0, #10
1a0004d0:	2100      	movs	r1, #0
1a0004d2:	f001 fd99 	bl	1a002008 <delay>
   uartWriteString( UART_232, "AT+CIPCLOSE=1\r\n");
1a0004d6:	4903      	ldr	r1, [pc, #12]	; (1a0004e4 <closeCone+0x20>)
1a0004d8:	2005      	movs	r0, #5
1a0004da:	f001 fc89 	bl	1a001df0 <uartWriteString>
   
}
1a0004de:	bd08      	pop	{r3, pc}
1a0004e0:	1a002c34 	.word	0x1a002c34
1a0004e4:	1a002c44 	.word	0x1a002c44

1a0004e8 <procesar>:
void procesar(uint8_t cadena[50]){
1a0004e8:	b570      	push	{r4, r5, r6, lr}
1a0004ea:	4605      	mov	r5, r0
   if ( strstr( cadena , "adelante" ) != NULL ) adelante = 1;
1a0004ec:	4945      	ldr	r1, [pc, #276]	; (1a000604 <procesar+0x11c>)
1a0004ee:	f002 fb89 	bl	1a002c04 <strstr>
1a0004f2:	b170      	cbz	r0, 1a000512 <procesar+0x2a>
1a0004f4:	2601      	movs	r6, #1
1a0004f6:	4b44      	ldr	r3, [pc, #272]	; (1a000608 <procesar+0x120>)
1a0004f8:	701e      	strb	r6, [r3, #0]
   if (adelante){
1a0004fa:	4b43      	ldr	r3, [pc, #268]	; (1a000608 <procesar+0x120>)
1a0004fc:	781b      	ldrb	r3, [r3, #0]
1a0004fe:	2b00      	cmp	r3, #0
1a000500:	d144      	bne.n	1a00058c <procesar+0xa4>
   uint8_t tmp = 15; //max 12 caracteres aprox
1a000502:	240f      	movs	r4, #15
    if (giro){
1a000504:	4b41      	ldr	r3, [pc, #260]	; (1a00060c <procesar+0x124>)
1a000506:	781b      	ldrb	r3, [r3, #0]
1a000508:	2b00      	cmp	r3, #0
1a00050a:	d142      	bne.n	1a000592 <procesar+0xaa>
   if (act){ 
1a00050c:	2e00      	cmp	r6, #0
1a00050e:	d16a      	bne.n	1a0005e6 <procesar+0xfe>
}
1a000510:	bd70      	pop	{r4, r5, r6, pc}
   else  if ( strstr( cadena , "atras" ) != NULL ) atras = 1;
1a000512:	493f      	ldr	r1, [pc, #252]	; (1a000610 <procesar+0x128>)
1a000514:	4628      	mov	r0, r5
1a000516:	f002 fb75 	bl	1a002c04 <strstr>
1a00051a:	b118      	cbz	r0, 1a000524 <procesar+0x3c>
1a00051c:	2601      	movs	r6, #1
1a00051e:	4b3d      	ldr	r3, [pc, #244]	; (1a000614 <procesar+0x12c>)
1a000520:	701e      	strb	r6, [r3, #0]
1a000522:	e7ea      	b.n	1a0004fa <procesar+0x12>
         else  if (strstr( cadena, "giro") != NULL) giro = 1;
1a000524:	493c      	ldr	r1, [pc, #240]	; (1a000618 <procesar+0x130>)
1a000526:	4628      	mov	r0, r5
1a000528:	f002 fb6c 	bl	1a002c04 <strstr>
1a00052c:	b118      	cbz	r0, 1a000536 <procesar+0x4e>
1a00052e:	2601      	movs	r6, #1
1a000530:	4b36      	ldr	r3, [pc, #216]	; (1a00060c <procesar+0x124>)
1a000532:	701e      	strb	r6, [r3, #0]
1a000534:	e7e1      	b.n	1a0004fa <procesar+0x12>
               else  if (strstr( cadena, "stop") != NULL) stop = 1;
1a000536:	4939      	ldr	r1, [pc, #228]	; (1a00061c <procesar+0x134>)
1a000538:	4628      	mov	r0, r5
1a00053a:	f002 fb63 	bl	1a002c04 <strstr>
1a00053e:	b118      	cbz	r0, 1a000548 <procesar+0x60>
1a000540:	2601      	movs	r6, #1
1a000542:	4b37      	ldr	r3, [pc, #220]	; (1a000620 <procesar+0x138>)
1a000544:	701e      	strb	r6, [r3, #0]
1a000546:	e7d8      	b.n	1a0004fa <procesar+0x12>
                     else act = 0;
1a000548:	2600      	movs	r6, #0
1a00054a:	e7d6      	b.n	1a0004fa <procesar+0x12>
      while(cadena[j] != '!' && tmp) {j++; tmp--;}
1a00054c:	3301      	adds	r3, #1
1a00054e:	b2db      	uxtb	r3, r3
1a000550:	3c01      	subs	r4, #1
1a000552:	b2e4      	uxtb	r4, r4
1a000554:	4619      	mov	r1, r3
1a000556:	5cea      	ldrb	r2, [r5, r3]
1a000558:	2a21      	cmp	r2, #33	; 0x21
1a00055a:	d001      	beq.n	1a000560 <procesar+0x78>
1a00055c:	2c00      	cmp	r4, #0
1a00055e:	d1f5      	bne.n	1a00054c <procesar+0x64>
      velocidad = ((cadena[j + 1] - 48) * 10) + (cadena[j + 2] - 48);
1a000560:	1c4a      	adds	r2, r1, #1
1a000562:	4429      	add	r1, r5
1a000564:	788b      	ldrb	r3, [r1, #2]
1a000566:	5caa      	ldrb	r2, [r5, r2]
1a000568:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a00056c:	0051      	lsls	r1, r2, #1
1a00056e:	440b      	add	r3, r1
1a000570:	3b10      	subs	r3, #16
1a000572:	b2db      	uxtb	r3, r3
1a000574:	4a2b      	ldr	r2, [pc, #172]	; (1a000624 <procesar+0x13c>)
1a000576:	7013      	strb	r3, [r2, #0]
      aux = velocidad;
1a000578:	7813      	ldrb	r3, [r2, #0]
      if(velocidad == 90) uartWriteString( UART_USB, "es 90\r\n" );
1a00057a:	7813      	ldrb	r3, [r2, #0]
1a00057c:	b2db      	uxtb	r3, r3
1a00057e:	2b5a      	cmp	r3, #90	; 0x5a
1a000580:	d1c0      	bne.n	1a000504 <procesar+0x1c>
1a000582:	4929      	ldr	r1, [pc, #164]	; (1a000628 <procesar+0x140>)
1a000584:	2003      	movs	r0, #3
1a000586:	f001 fc33 	bl	1a001df0 <uartWriteString>
1a00058a:	e7bb      	b.n	1a000504 <procesar+0x1c>
   uint8_t tmp = 15; //max 12 caracteres aprox
1a00058c:	240f      	movs	r4, #15
   uint8_t j = 0;
1a00058e:	2300      	movs	r3, #0
1a000590:	e7e0      	b.n	1a000554 <procesar+0x6c>
1a000592:	2300      	movs	r3, #0
      while(cadena[j] != '!' && tmp) {j++; tmp--;}
1a000594:	4619      	mov	r1, r3
1a000596:	5cea      	ldrb	r2, [r5, r3]
1a000598:	2a21      	cmp	r2, #33	; 0x21
1a00059a:	d005      	beq.n	1a0005a8 <procesar+0xc0>
1a00059c:	b124      	cbz	r4, 1a0005a8 <procesar+0xc0>
1a00059e:	3301      	adds	r3, #1
1a0005a0:	b2db      	uxtb	r3, r3
1a0005a2:	3c01      	subs	r4, #1
1a0005a4:	b2e4      	uxtb	r4, r4
1a0005a6:	e7f5      	b.n	1a000594 <procesar+0xac>
      angulo = ((cadena[j + 1] - 48) * 100) + ((cadena[j + 2] - 48)* 10) + (cadena[j + 3] - 48);
1a0005a8:	1c4b      	adds	r3, r1, #1
1a0005aa:	1c88      	adds	r0, r1, #2
1a0005ac:	5cea      	ldrb	r2, [r5, r3]
1a0005ae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0005b2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0005b6:	0093      	lsls	r3, r2, #2
1a0005b8:	5c2a      	ldrb	r2, [r5, r0]
1a0005ba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0005be:	0050      	lsls	r0, r2, #1
1a0005c0:	4403      	add	r3, r0
1a0005c2:	b2db      	uxtb	r3, r3
1a0005c4:	4429      	add	r1, r5
1a0005c6:	78ca      	ldrb	r2, [r1, #3]
1a0005c8:	4413      	add	r3, r2
1a0005ca:	3330      	adds	r3, #48	; 0x30
1a0005cc:	b2db      	uxtb	r3, r3
1a0005ce:	4a17      	ldr	r2, [pc, #92]	; (1a00062c <procesar+0x144>)
1a0005d0:	7013      	strb	r3, [r2, #0]
      aux = angulo;
1a0005d2:	7813      	ldrb	r3, [r2, #0]
      if(angulo == 75)uartWriteString( UART_USB, "es 75\r\n" );
1a0005d4:	7813      	ldrb	r3, [r2, #0]
1a0005d6:	b2db      	uxtb	r3, r3
1a0005d8:	2b4b      	cmp	r3, #75	; 0x4b
1a0005da:	d197      	bne.n	1a00050c <procesar+0x24>
1a0005dc:	4914      	ldr	r1, [pc, #80]	; (1a000630 <procesar+0x148>)
1a0005de:	2003      	movs	r0, #3
1a0005e0:	f001 fc06 	bl	1a001df0 <uartWriteString>
1a0005e4:	e792      	b.n	1a00050c <procesar+0x24>
      delay(10); 
1a0005e6:	200a      	movs	r0, #10
1a0005e8:	2100      	movs	r1, #0
1a0005ea:	f001 fd0d 	bl	1a002008 <delay>
      closeCone();
1a0005ee:	f7ff ff69 	bl	1a0004c4 <closeCone>
      uartWriteString( UART_USB, cadena );
1a0005f2:	4629      	mov	r1, r5
1a0005f4:	2003      	movs	r0, #3
1a0005f6:	f001 fbfb 	bl	1a001df0 <uartWriteString>
      uartWriteString( UART_USB, "\r\n" );
1a0005fa:	490e      	ldr	r1, [pc, #56]	; (1a000634 <procesar+0x14c>)
1a0005fc:	2003      	movs	r0, #3
1a0005fe:	f001 fbf7 	bl	1a001df0 <uartWriteString>
}
1a000602:	e785      	b.n	1a000510 <procesar+0x28>
1a000604:	1a002d2c 	.word	0x1a002d2c
1a000608:	100000e0 	.word	0x100000e0
1a00060c:	10000117 	.word	0x10000117
1a000610:	1a002d38 	.word	0x1a002d38
1a000614:	100000e2 	.word	0x100000e2
1a000618:	1a002d40 	.word	0x1a002d40
1a00061c:	1a002d48 	.word	0x1a002d48
1a000620:	1000011a 	.word	0x1000011a
1a000624:	1000011b 	.word	0x1000011b
1a000628:	1a002d50 	.word	0x1a002d50
1a00062c:	100000e1 	.word	0x100000e1
1a000630:	1a002d58 	.word	0x1a002d58
1a000634:	1a002d60 	.word	0x1a002d60

1a000638 <analizarEntrada>:
void analizarEntrada(uint8_t dato){
1a000638:	b510      	push	{r4, lr}
    if (save){
1a00063a:	4b10      	ldr	r3, [pc, #64]	; (1a00067c <analizarEntrada+0x44>)
1a00063c:	781b      	ldrb	r3, [r3, #0]
1a00063e:	b12b      	cbz	r3, 1a00064c <analizarEntrada+0x14>
        cadena[i++] = dato;
1a000640:	490f      	ldr	r1, [pc, #60]	; (1a000680 <analizarEntrada+0x48>)
1a000642:	780a      	ldrb	r2, [r1, #0]
1a000644:	1c54      	adds	r4, r2, #1
1a000646:	700c      	strb	r4, [r1, #0]
1a000648:	490e      	ldr	r1, [pc, #56]	; (1a000684 <analizarEntrada+0x4c>)
1a00064a:	5488      	strb	r0, [r1, r2]
    if (dato == '?'){
1a00064c:	283f      	cmp	r0, #63	; 0x3f
1a00064e:	d000      	beq.n	1a000652 <analizarEntrada+0x1a>
}
1a000650:	bd10      	pop	{r4, pc}
        save = !save;
1a000652:	fab3 f383 	clz	r3, r3
1a000656:	095b      	lsrs	r3, r3, #5
1a000658:	4a08      	ldr	r2, [pc, #32]	; (1a00067c <analizarEntrada+0x44>)
1a00065a:	7013      	strb	r3, [r2, #0]
        cont++;
1a00065c:	4a0a      	ldr	r2, [pc, #40]	; (1a000688 <analizarEntrada+0x50>)
1a00065e:	7813      	ldrb	r3, [r2, #0]
1a000660:	3301      	adds	r3, #1
1a000662:	b2db      	uxtb	r3, r3
1a000664:	7013      	strb	r3, [r2, #0]
        if (cont == 2) {
1a000666:	2b02      	cmp	r3, #2
1a000668:	d1f2      	bne.n	1a000650 <analizarEntrada+0x18>
         procesar(cadena);
1a00066a:	4806      	ldr	r0, [pc, #24]	; (1a000684 <analizarEntrada+0x4c>)
1a00066c:	f7ff ff3c 	bl	1a0004e8 <procesar>
         cont = 0;
1a000670:	2300      	movs	r3, #0
1a000672:	4a05      	ldr	r2, [pc, #20]	; (1a000688 <analizarEntrada+0x50>)
1a000674:	7013      	strb	r3, [r2, #0]
         i = 0;
1a000676:	4a02      	ldr	r2, [pc, #8]	; (1a000680 <analizarEntrada+0x48>)
1a000678:	7013      	strb	r3, [r2, #0]
}
1a00067a:	e7e9      	b.n	1a000650 <analizarEntrada+0x18>
1a00067c:	10000119 	.word	0x10000119
1a000680:	10000118 	.word	0x10000118
1a000684:	100000e4 	.word	0x100000e4
1a000688:	10000116 	.word	0x10000116

1a00068c <getAdelante>:

/* GETTERS & SETTERS*/

uint8_t getAdelante(){
   return adelante;
1a00068c:	4b01      	ldr	r3, [pc, #4]	; (1a000694 <getAdelante+0x8>)
1a00068e:	7818      	ldrb	r0, [r3, #0]
}
1a000690:	4770      	bx	lr
1a000692:	bf00      	nop
1a000694:	100000e0 	.word	0x100000e0

1a000698 <getAtras>:

uint8_t getAtras(){
   return atras;
1a000698:	4b01      	ldr	r3, [pc, #4]	; (1a0006a0 <getAtras+0x8>)
1a00069a:	7818      	ldrb	r0, [r3, #0]
}
1a00069c:	4770      	bx	lr
1a00069e:	bf00      	nop
1a0006a0:	100000e2 	.word	0x100000e2

1a0006a4 <getGiro>:

uint8_t getGiro(){
   return giro;
1a0006a4:	4b01      	ldr	r3, [pc, #4]	; (1a0006ac <getGiro+0x8>)
1a0006a6:	7818      	ldrb	r0, [r3, #0]
}
1a0006a8:	4770      	bx	lr
1a0006aa:	bf00      	nop
1a0006ac:	10000117 	.word	0x10000117

1a0006b0 <getStop>:
uint8_t getRxFlag(){
   return rxFlag;
}

uint8_t getStop(){
   return stop;
1a0006b0:	4b01      	ldr	r3, [pc, #4]	; (1a0006b8 <getStop+0x8>)
1a0006b2:	7818      	ldrb	r0, [r3, #0]
}
1a0006b4:	4770      	bx	lr
1a0006b6:	bf00      	nop
1a0006b8:	1000011a 	.word	0x1000011a

1a0006bc <setAdelante>:

void setAdelante(uint8_t aux){
   adelante=aux;
1a0006bc:	4b01      	ldr	r3, [pc, #4]	; (1a0006c4 <setAdelante+0x8>)
1a0006be:	7018      	strb	r0, [r3, #0]
}
1a0006c0:	4770      	bx	lr
1a0006c2:	bf00      	nop
1a0006c4:	100000e0 	.word	0x100000e0

1a0006c8 <setAtras>:

void setAtras(uint8_t aux){
   atras=aux;
1a0006c8:	4b01      	ldr	r3, [pc, #4]	; (1a0006d0 <setAtras+0x8>)
1a0006ca:	7018      	strb	r0, [r3, #0]
}
1a0006cc:	4770      	bx	lr
1a0006ce:	bf00      	nop
1a0006d0:	100000e2 	.word	0x100000e2

1a0006d4 <setGiro>:

void setGiro(uint8_t aux){
   giro=aux;
1a0006d4:	4b01      	ldr	r3, [pc, #4]	; (1a0006dc <setGiro+0x8>)
1a0006d6:	7018      	strb	r0, [r3, #0]
}
1a0006d8:	4770      	bx	lr
1a0006da:	bf00      	nop
1a0006dc:	10000117 	.word	0x10000117

1a0006e0 <setStop>:

void setRxFlag(uint8_t aux){
   rxFlag=aux;
}
void setStop(uint8_t aux){
   stop=aux;
1a0006e0:	4b01      	ldr	r3, [pc, #4]	; (1a0006e8 <setStop+0x8>)
1a0006e2:	7018      	strb	r0, [r3, #0]
}
1a0006e4:	4770      	bx	lr
1a0006e6:	bf00      	nop
1a0006e8:	1000011a 	.word	0x1000011a
1a0006ec:	ffffffff 	.word	0xffffffff

1a0006f0 <enviarVelocidad>:
      |  1  |  1  |  -->  Motor detenido
      +-----+-----+

*/

void enviarVelocidad(uint8_t perc){
1a0006f0:	b508      	push	{r3, lr}
   // Transformar porcentaje a voltaje
   double volt = ((double) perc / 100) * (V_MAX - V_MIN) + V_MIN;
1a0006f2:	f001 fe2d 	bl	1a002350 <__aeabi_ui2d>
1a0006f6:	2200      	movs	r2, #0
1a0006f8:	4b0f      	ldr	r3, [pc, #60]	; (1a000738 <enviarVelocidad+0x48>)
1a0006fa:	f001 ffcd 	bl	1a002698 <__aeabi_ddiv>
1a0006fe:	2200      	movs	r2, #0
1a000700:	4b0e      	ldr	r3, [pc, #56]	; (1a00073c <enviarVelocidad+0x4c>)
1a000702:	f001 fe9f 	bl	1a002444 <__aeabi_dmul>
1a000706:	2200      	movs	r2, #0
1a000708:	4b0d      	ldr	r3, [pc, #52]	; (1a000740 <enviarVelocidad+0x50>)
1a00070a:	f001 fce5 	bl	1a0020d8 <__adddf3>
   // Escribir el numero transformandolo al rango 0 - 255
   pwmWrite(ENA, (volt / V_MAX) * 255);
1a00070e:	2200      	movs	r2, #0
1a000710:	4b0c      	ldr	r3, [pc, #48]	; (1a000744 <enviarVelocidad+0x54>)
1a000712:	f001 ffc1 	bl	1a002698 <__aeabi_ddiv>
1a000716:	a306      	add	r3, pc, #24	; (adr r3, 1a000730 <enviarVelocidad+0x40>)
1a000718:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00071c:	f001 fe92 	bl	1a002444 <__aeabi_dmul>
1a000720:	f002 f8a2 	bl	1a002868 <__aeabi_d2uiz>
1a000724:	b2c1      	uxtb	r1, r0
1a000726:	2003      	movs	r0, #3
1a000728:	f001 fa3e 	bl	1a001ba8 <pwmWrite>
}
1a00072c:	bd08      	pop	{r3, pc}
1a00072e:	bf00      	nop
1a000730:	00000000 	.word	0x00000000
1a000734:	406fe000 	.word	0x406fe000
1a000738:	40590000 	.word	0x40590000
1a00073c:	40180000 	.word	0x40180000
1a000740:	40080000 	.word	0x40080000
1a000744:	40220000 	.word	0x40220000

1a000748 <MOTOR_RB_retroceder>:
   gpioWrite(IN2, OFF);
   //Setear a 0 la velocidad
   MOTOR_RB_setVelocidad(0);
}

void MOTOR_RB_retroceder(){
1a000748:	b508      	push	{r3, lr}
   // Escribir 0 en IN1
   gpioWrite(IN1, OFF);
1a00074a:	2100      	movs	r1, #0
1a00074c:	200f      	movs	r0, #15
1a00074e:	f001 f8ef 	bl	1a001930 <gpioWrite>
   // Escribir 1 en IN2
   gpioWrite(IN2, ON);
1a000752:	2101      	movs	r1, #1
1a000754:	200e      	movs	r0, #14
1a000756:	f001 f8eb 	bl	1a001930 <gpioWrite>
}
1a00075a:	bd08      	pop	{r3, pc}

1a00075c <MOTOR_RB_avanzar>:

void MOTOR_RB_avanzar(){
1a00075c:	b508      	push	{r3, lr}
   // Escribir 1 en IN1
   gpioWrite(IN1, ON);
1a00075e:	2101      	movs	r1, #1
1a000760:	200f      	movs	r0, #15
1a000762:	f001 f8e5 	bl	1a001930 <gpioWrite>
   // Escribir 0 en IN2
   gpioWrite(IN2, OFF);
1a000766:	2100      	movs	r1, #0
1a000768:	200e      	movs	r0, #14
1a00076a:	f001 f8e1 	bl	1a001930 <gpioWrite>
}
1a00076e:	bd08      	pop	{r3, pc}

1a000770 <MOTOR_RB_setVelocidad>:

void MOTOR_RB_setVelocidad(uint8_t perc){
1a000770:	b508      	push	{r3, lr}
      enviarVelocidad(perc / 2);
      delay(50);
   }

   lastVel = perc;*/
   enviarVelocidad(perc);
1a000772:	f7ff ffbd 	bl	1a0006f0 <enviarVelocidad>
}
1a000776:	bd08      	pop	{r3, pc}

1a000778 <MOTOR_RB_parar>:
void MOTOR_RB_parar(){
1a000778:	b508      	push	{r3, lr}
   gpioWrite(IN1, OFF);
1a00077a:	2100      	movs	r1, #0
1a00077c:	200f      	movs	r0, #15
1a00077e:	f001 f8d7 	bl	1a001930 <gpioWrite>
   gpioWrite(IN2, OFF);
1a000782:	2100      	movs	r1, #0
1a000784:	200e      	movs	r0, #14
1a000786:	f001 f8d3 	bl	1a001930 <gpioWrite>
   MOTOR_RB_setVelocidad(0);
1a00078a:	2000      	movs	r0, #0
1a00078c:	f7ff fff0 	bl	1a000770 <MOTOR_RB_setVelocidad>
}
1a000790:	bd08      	pop	{r3, pc}

1a000792 <MOTOR_RB_init>:
void MOTOR_RB_init(){
1a000792:	b508      	push	{r3, lr}
   gpioInit(IN1, GPIO_OUTPUT);
1a000794:	2101      	movs	r1, #1
1a000796:	200f      	movs	r0, #15
1a000798:	f000 fff4 	bl	1a001784 <gpioInit>
   gpioInit(IN2, GPIO_OUTPUT);
1a00079c:	2101      	movs	r1, #1
1a00079e:	200e      	movs	r0, #14
1a0007a0:	f000 fff0 	bl	1a001784 <gpioInit>
   pwmConfig( 0, PWM_ENABLE );
1a0007a4:	2100      	movs	r1, #0
1a0007a6:	4608      	mov	r0, r1
1a0007a8:	f001 fa38 	bl	1a001c1c <pwmInit>
   pwmConfig(ENA, PWM_ENABLE_OUTPUT);
1a0007ac:	2102      	movs	r1, #2
1a0007ae:	2003      	movs	r0, #3
1a0007b0:	f001 fa34 	bl	1a001c1c <pwmInit>
   MOTOR_RB_parar();
1a0007b4:	f7ff ffe0 	bl	1a000778 <MOTOR_RB_parar>
}
1a0007b8:	bd08      	pop	{r3, pc}
1a0007ba:	Address 0x1a0007ba is out of bounds.


1a0007bc <main>:
#define BAUD_RATE 115200

void rxInt(void *);
uint8_t dato;

int main(void){
1a0007bc:	b508      	push	{r3, lr}
    boardConfig();
1a0007be:	f001 fb8d 	bl	1a001edc <boardInit>
   
   SERVO_RB_init();
1a0007c2:	f7ff fd9d 	bl	1a000300 <SERVO_RB_init>
   /* SERVO_RB_girar(45);
    delay(1000);
    SERVO_RB_girar(0);
    delay(1000);*/
    SERVO_RB_girar(0);
1a0007c6:	2000      	movs	r0, #0
1a0007c8:	f7ff fda0 	bl	1a00030c <SERVO_RB_girar>

    pwmConfig( 0, PWM_ENABLE );
1a0007cc:	2100      	movs	r1, #0
1a0007ce:	4608      	mov	r0, r1
1a0007d0:	f001 fa24 	bl	1a001c1c <pwmInit>
    pwmConfig( PWM1, PWM_ENABLE_OUTPUT );
1a0007d4:	2102      	movs	r1, #2
1a0007d6:	2001      	movs	r0, #1
1a0007d8:	f001 fa20 	bl	1a001c1c <pwmInit>
    gpioConfig( T_FIL0, GPIO_OUTPUT);
1a0007dc:	2101      	movs	r1, #1
1a0007de:	2005      	movs	r0, #5
1a0007e0:	f000 ffd0 	bl	1a001784 <gpioInit>
    gpioConfig( T_FIL3, GPIO_OUTPUT);
1a0007e4:	2101      	movs	r1, #1
1a0007e6:	2004      	movs	r0, #4
1a0007e8:	f000 ffcc 	bl	1a001784 <gpioInit>
    gpioConfig( T_COL1, GPIO_OUTPUT);
1a0007ec:	2101      	movs	r1, #1
1a0007ee:	2006      	movs	r0, #6
1a0007f0:	f000 ffc8 	bl	1a001784 <gpioInit>
   
    uartConfig(UART_232, 115200);
1a0007f4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0007f8:	2005      	movs	r0, #5
1a0007fa:	f001 fa9f 	bl	1a001d3c <uartInit>
   
    while (espConfig()) delay(5000);
1a0007fe:	e004      	b.n	1a00080a <main+0x4e>
1a000800:	f241 3088 	movw	r0, #5000	; 0x1388
1a000804:	2100      	movs	r1, #0
1a000806:	f001 fbff 	bl	1a002008 <delay>
1a00080a:	f7ff fdd5 	bl	1a0003b8 <espConfig>
1a00080e:	2800      	cmp	r0, #0
1a000810:	d1f6      	bne.n	1a000800 <main+0x44>
    gpioWrite( T_FIL0, 0);
1a000812:	2100      	movs	r1, #0
1a000814:	2005      	movs	r0, #5
1a000816:	f001 f88b 	bl	1a001930 <gpioWrite>
    gpioWrite( T_FIL3, 1);
1a00081a:	2101      	movs	r1, #1
1a00081c:	2004      	movs	r0, #4
1a00081e:	f001 f887 	bl	1a001930 <gpioWrite>

    MOTOR_RB_init();
1a000822:	f7ff ffb6 	bl	1a000792 <MOTOR_RB_init>
    closeCone();
1a000826:	f7ff fe4d 	bl	1a0004c4 <closeCone>
1a00082a:	e03d      	b.n	1a0008a8 <main+0xec>
    

    while (1){
        if (uartReadByte(UART_232, &dato)){
            analizarEntrada(dato);
1a00082c:	4b2a      	ldr	r3, [pc, #168]	; (1a0008d8 <main+0x11c>)
1a00082e:	7818      	ldrb	r0, [r3, #0]
1a000830:	f7ff ff02 	bl	1a000638 <analizarEntrada>
1a000834:	e03e      	b.n	1a0008b4 <main+0xf8>
        }
        if(getAdelante()){
           MOTOR_RB_parar();
1a000836:	f7ff ff9f 	bl	1a000778 <MOTOR_RB_parar>
           delay(1000);
1a00083a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a00083e:	2100      	movs	r1, #0
1a000840:	f001 fbe2 	bl	1a002008 <delay>
           MOTOR_RB_avanzar();
1a000844:	f7ff ff8a 	bl	1a00075c <MOTOR_RB_avanzar>
           MOTOR_RB_setVelocidad(50);
1a000848:	2032      	movs	r0, #50	; 0x32
1a00084a:	f7ff ff91 	bl	1a000770 <MOTOR_RB_setVelocidad>
           setAdelante(0);
1a00084e:	2000      	movs	r0, #0
1a000850:	f7ff ff34 	bl	1a0006bc <setAdelante>
1a000854:	e032      	b.n	1a0008bc <main+0x100>
        }
        if(getAtras()){
            MOTOR_RB_parar();
1a000856:	f7ff ff8f 	bl	1a000778 <MOTOR_RB_parar>
            delay(1000);
1a00085a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a00085e:	2100      	movs	r1, #0
1a000860:	f001 fbd2 	bl	1a002008 <delay>
            MOTOR_RB_setVelocidad(50);
1a000864:	2032      	movs	r0, #50	; 0x32
1a000866:	f7ff ff83 	bl	1a000770 <MOTOR_RB_setVelocidad>
            MOTOR_RB_retroceder();
1a00086a:	f7ff ff6d 	bl	1a000748 <MOTOR_RB_retroceder>
            setAtras(0);
1a00086e:	2000      	movs	r0, #0
1a000870:	f7ff ff2a 	bl	1a0006c8 <setAtras>
1a000874:	e026      	b.n	1a0008c4 <main+0x108>
        }
        if(getGiro()){
            uartWriteString( UART_USB, "entro\r\n" );
1a000876:	4919      	ldr	r1, [pc, #100]	; (1a0008dc <main+0x120>)
1a000878:	2003      	movs	r0, #3
1a00087a:	f001 fab9 	bl	1a001df0 <uartWriteString>
            SERVO_RB_girar(-45);
1a00087e:	f06f 002c 	mvn.w	r0, #44	; 0x2c
1a000882:	f7ff fd43 	bl	1a00030c <SERVO_RB_girar>
            delayInaccurateMs(1000);
1a000886:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a00088a:	2100      	movs	r1, #0
1a00088c:	f001 fb60 	bl	1a001f50 <delayInaccurateMs>
            SERVO_RB_girar(45);
1a000890:	202d      	movs	r0, #45	; 0x2d
1a000892:	f7ff fd3b 	bl	1a00030c <SERVO_RB_girar>
            setGiro(0);
1a000896:	2000      	movs	r0, #0
1a000898:	f7ff ff1c 	bl	1a0006d4 <setGiro>
1a00089c:	e016      	b.n	1a0008cc <main+0x110>
            
        }   
        if(getStop()){
            MOTOR_RB_parar();
1a00089e:	f7ff ff6b 	bl	1a000778 <MOTOR_RB_parar>
            setStop(0);
1a0008a2:	2000      	movs	r0, #0
1a0008a4:	f7ff ff1c 	bl	1a0006e0 <setStop>
        if (uartReadByte(UART_232, &dato)){
1a0008a8:	490b      	ldr	r1, [pc, #44]	; (1a0008d8 <main+0x11c>)
1a0008aa:	2005      	movs	r0, #5
1a0008ac:	f001 fa84 	bl	1a001db8 <uartReadByte>
1a0008b0:	2800      	cmp	r0, #0
1a0008b2:	d1bb      	bne.n	1a00082c <main+0x70>
        if(getAdelante()){
1a0008b4:	f7ff feea 	bl	1a00068c <getAdelante>
1a0008b8:	2800      	cmp	r0, #0
1a0008ba:	d1bc      	bne.n	1a000836 <main+0x7a>
        if(getAtras()){
1a0008bc:	f7ff feec 	bl	1a000698 <getAtras>
1a0008c0:	2800      	cmp	r0, #0
1a0008c2:	d1c8      	bne.n	1a000856 <main+0x9a>
        if(getGiro()){
1a0008c4:	f7ff feee 	bl	1a0006a4 <getGiro>
1a0008c8:	2800      	cmp	r0, #0
1a0008ca:	d1d4      	bne.n	1a000876 <main+0xba>
        if(getStop()){
1a0008cc:	f7ff fef0 	bl	1a0006b0 <getStop>
1a0008d0:	2800      	cmp	r0, #0
1a0008d2:	d0e9      	beq.n	1a0008a8 <main+0xec>
1a0008d4:	e7e3      	b.n	1a00089e <main+0xe2>
1a0008d6:	bf00      	nop
1a0008d8:	10000150 	.word	0x10000150
1a0008dc:	1a002d64 	.word	0x1a002d64

1a0008e0 <initialise_monitor_handles>:
}
1a0008e0:	4770      	bx	lr
1a0008e2:	Address 0x1a0008e2 is out of bounds.


1a0008e4 <Reset_Handler>:
void Reset_Handler(void) {
1a0008e4:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0008e6:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0008e8:	4b19      	ldr	r3, [pc, #100]	; (1a000950 <Reset_Handler+0x6c>)
1a0008ea:	4a1a      	ldr	r2, [pc, #104]	; (1a000954 <Reset_Handler+0x70>)
1a0008ec:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0008ee:	3304      	adds	r3, #4
1a0008f0:	4a19      	ldr	r2, [pc, #100]	; (1a000958 <Reset_Handler+0x74>)
1a0008f2:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0008f4:	2300      	movs	r3, #0
1a0008f6:	e005      	b.n	1a000904 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0008f8:	4a18      	ldr	r2, [pc, #96]	; (1a00095c <Reset_Handler+0x78>)
1a0008fa:	f04f 31ff 	mov.w	r1, #4294967295
1a0008fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000902:	3301      	adds	r3, #1
1a000904:	2b07      	cmp	r3, #7
1a000906:	d9f7      	bls.n	1a0008f8 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000908:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00090a:	4b15      	ldr	r3, [pc, #84]	; (1a000960 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a00090c:	e007      	b.n	1a00091e <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00090e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000912:	689a      	ldr	r2, [r3, #8]
1a000914:	6859      	ldr	r1, [r3, #4]
1a000916:	6818      	ldr	r0, [r3, #0]
1a000918:	f7ff fc37 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a00091c:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00091e:	4a11      	ldr	r2, [pc, #68]	; (1a000964 <Reset_Handler+0x80>)
1a000920:	4293      	cmp	r3, r2
1a000922:	d3f4      	bcc.n	1a00090e <Reset_Handler+0x2a>
1a000924:	e006      	b.n	1a000934 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000926:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000928:	6859      	ldr	r1, [r3, #4]
1a00092a:	f854 0b08 	ldr.w	r0, [r4], #8
1a00092e:	f7ff fc3b 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000932:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000934:	4a0c      	ldr	r2, [pc, #48]	; (1a000968 <Reset_Handler+0x84>)
1a000936:	4293      	cmp	r3, r2
1a000938:	d3f5      	bcc.n	1a000926 <Reset_Handler+0x42>
    SystemInit();
1a00093a:	f000 fedf 	bl	1a0016fc <SystemInit>
    __libc_init_array();
1a00093e:	f002 f935 	bl	1a002bac <__libc_init_array>
    initialise_monitor_handles();
1a000942:	f7ff ffcd 	bl	1a0008e0 <initialise_monitor_handles>
    main();
1a000946:	f7ff ff39 	bl	1a0007bc <main>
        __asm__ volatile("wfi");
1a00094a:	bf30      	wfi
1a00094c:	e7fd      	b.n	1a00094a <Reset_Handler+0x66>
1a00094e:	bf00      	nop
1a000950:	40053100 	.word	0x40053100
1a000954:	10df1000 	.word	0x10df1000
1a000958:	01dff7ff 	.word	0x01dff7ff
1a00095c:	e000e280 	.word	0xe000e280
1a000960:	1a000114 	.word	0x1a000114
1a000964:	1a000150 	.word	0x1a000150
1a000968:	1a000178 	.word	0x1a000178

1a00096c <_fini>:
void _fini(void) {}
1a00096c:	4770      	bx	lr

1a00096e <_init>:
void _init(void) {}
1a00096e:	4770      	bx	lr

1a000970 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000970:	2300      	movs	r3, #0
1a000972:	2b1c      	cmp	r3, #28
1a000974:	d812      	bhi.n	1a00099c <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a000976:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000978:	4a09      	ldr	r2, [pc, #36]	; (1a0009a0 <Board_SetupMuxing+0x30>)
1a00097a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00097e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000982:	784a      	ldrb	r2, [r1, #1]
1a000984:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000986:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00098a:	4906      	ldr	r1, [pc, #24]	; (1a0009a4 <Board_SetupMuxing+0x34>)
1a00098c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000990:	3301      	adds	r3, #1
1a000992:	2b1c      	cmp	r3, #28
1a000994:	d9f0      	bls.n	1a000978 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000996:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00099a:	4770      	bx	lr
1a00099c:	4770      	bx	lr
1a00099e:	bf00      	nop
1a0009a0:	1a002d70 	.word	0x1a002d70
1a0009a4:	40086000 	.word	0x40086000

1a0009a8 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0009a8:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0009aa:	4a17      	ldr	r2, [pc, #92]	; (1a000a08 <Board_SetupClocking+0x60>)
1a0009ac:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0009b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0009b4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0009b8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0009bc:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0009c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0009c4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0009c8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0009cc:	2201      	movs	r2, #1
1a0009ce:	490f      	ldr	r1, [pc, #60]	; (1a000a0c <Board_SetupClocking+0x64>)
1a0009d0:	2006      	movs	r0, #6
1a0009d2:	f000 fa49 	bl	1a000e68 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0009d6:	2400      	movs	r4, #0
1a0009d8:	b14c      	cbz	r4, 1a0009ee <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0009da:	4b0b      	ldr	r3, [pc, #44]	; (1a000a08 <Board_SetupClocking+0x60>)
1a0009dc:	685a      	ldr	r2, [r3, #4]
1a0009de:	f022 020c 	bic.w	r2, r2, #12
1a0009e2:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0009e4:	685a      	ldr	r2, [r3, #4]
1a0009e6:	f042 0203 	orr.w	r2, r2, #3
1a0009ea:	605a      	str	r2, [r3, #4]
}
1a0009ec:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0009ee:	4808      	ldr	r0, [pc, #32]	; (1a000a10 <Board_SetupClocking+0x68>)
1a0009f0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0009f4:	2301      	movs	r3, #1
1a0009f6:	788a      	ldrb	r2, [r1, #2]
1a0009f8:	7849      	ldrb	r1, [r1, #1]
1a0009fa:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0009fe:	f000 fd0b 	bl	1a001418 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000a02:	3401      	adds	r4, #1
1a000a04:	e7e8      	b.n	1a0009d8 <Board_SetupClocking+0x30>
1a000a06:	bf00      	nop
1a000a08:	40043000 	.word	0x40043000
1a000a0c:	0c28cb00 	.word	0x0c28cb00
1a000a10:	1a002d6c 	.word	0x1a002d6c

1a000a14 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000a14:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000a16:	f7ff ffab 	bl	1a000970 <Board_SetupMuxing>
    Board_SetupClocking();
1a000a1a:	f7ff ffc5 	bl	1a0009a8 <Board_SetupClocking>
}
1a000a1e:	bd08      	pop	{r3, pc}

1a000a20 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000a20:	2200      	movs	r2, #0
1a000a22:	2a05      	cmp	r2, #5
1a000a24:	d819      	bhi.n	1a000a5a <Board_LED_Init+0x3a>
{
1a000a26:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000a28:	490c      	ldr	r1, [pc, #48]	; (1a000a5c <Board_LED_Init+0x3c>)
1a000a2a:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000a2e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000a32:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000a34:	4b0a      	ldr	r3, [pc, #40]	; (1a000a60 <Board_LED_Init+0x40>)
1a000a36:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000a3a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000a3e:	2001      	movs	r0, #1
1a000a40:	40a0      	lsls	r0, r4
1a000a42:	4301      	orrs	r1, r0
1a000a44:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000a48:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000a4c:	2100      	movs	r1, #0
1a000a4e:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000a50:	3201      	adds	r2, #1
1a000a52:	2a05      	cmp	r2, #5
1a000a54:	d9e8      	bls.n	1a000a28 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a000a56:	bc70      	pop	{r4, r5, r6}
1a000a58:	4770      	bx	lr
1a000a5a:	4770      	bx	lr
1a000a5c:	1a002df0 	.word	0x1a002df0
1a000a60:	400f4000 	.word	0x400f4000

1a000a64 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000a64:	2300      	movs	r3, #0
1a000a66:	2b03      	cmp	r3, #3
1a000a68:	d816      	bhi.n	1a000a98 <Board_TEC_Init+0x34>
{
1a000a6a:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000a6c:	490b      	ldr	r1, [pc, #44]	; (1a000a9c <Board_TEC_Init+0x38>)
1a000a6e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000a72:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000a76:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000a78:	4c09      	ldr	r4, [pc, #36]	; (1a000aa0 <Board_TEC_Init+0x3c>)
1a000a7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000a7e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000a82:	2001      	movs	r0, #1
1a000a84:	40a8      	lsls	r0, r5
1a000a86:	ea21 0100 	bic.w	r1, r1, r0
1a000a8a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000a8e:	3301      	adds	r3, #1
1a000a90:	2b03      	cmp	r3, #3
1a000a92:	d9eb      	bls.n	1a000a6c <Board_TEC_Init+0x8>
   }
}
1a000a94:	bc30      	pop	{r4, r5}
1a000a96:	4770      	bx	lr
1a000a98:	4770      	bx	lr
1a000a9a:	bf00      	nop
1a000a9c:	1a002de8 	.word	0x1a002de8
1a000aa0:	400f4000 	.word	0x400f4000

1a000aa4 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000aa4:	2300      	movs	r3, #0
1a000aa6:	2b08      	cmp	r3, #8
1a000aa8:	d816      	bhi.n	1a000ad8 <Board_GPIO_Init+0x34>
{
1a000aaa:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000aac:	490b      	ldr	r1, [pc, #44]	; (1a000adc <Board_GPIO_Init+0x38>)
1a000aae:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000ab2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000ab6:	784d      	ldrb	r5, [r1, #1]
1a000ab8:	4c09      	ldr	r4, [pc, #36]	; (1a000ae0 <Board_GPIO_Init+0x3c>)
1a000aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000abe:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000ac2:	2001      	movs	r0, #1
1a000ac4:	40a8      	lsls	r0, r5
1a000ac6:	ea21 0100 	bic.w	r1, r1, r0
1a000aca:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000ace:	3301      	adds	r3, #1
1a000ad0:	2b08      	cmp	r3, #8
1a000ad2:	d9eb      	bls.n	1a000aac <Board_GPIO_Init+0x8>
   }
}
1a000ad4:	bc30      	pop	{r4, r5}
1a000ad6:	4770      	bx	lr
1a000ad8:	4770      	bx	lr
1a000ada:	bf00      	nop
1a000adc:	1a002dfc 	.word	0x1a002dfc
1a000ae0:	400f4000 	.word	0x400f4000

1a000ae4 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000ae4:	b510      	push	{r4, lr}
1a000ae6:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000ae8:	4c08      	ldr	r4, [pc, #32]	; (1a000b0c <Board_ADC_Init+0x28>)
1a000aea:	4669      	mov	r1, sp
1a000aec:	4620      	mov	r0, r4
1a000aee:	f000 f97b 	bl	1a000de8 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a000af2:	4a07      	ldr	r2, [pc, #28]	; (1a000b10 <Board_ADC_Init+0x2c>)
1a000af4:	4669      	mov	r1, sp
1a000af6:	4620      	mov	r0, r4
1a000af8:	f000 f996 	bl	1a000e28 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000afc:	2200      	movs	r2, #0
1a000afe:	4669      	mov	r1, sp
1a000b00:	4620      	mov	r0, r4
1a000b02:	f000 f9aa 	bl	1a000e5a <Chip_ADC_SetResolution>
}
1a000b06:	b002      	add	sp, #8
1a000b08:	bd10      	pop	{r4, pc}
1a000b0a:	bf00      	nop
1a000b0c:	400e3000 	.word	0x400e3000
1a000b10:	00061a80 	.word	0x00061a80

1a000b14 <Board_SPI_Init>:
{
1a000b14:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a000b16:	4c0b      	ldr	r4, [pc, #44]	; (1a000b44 <Board_SPI_Init+0x30>)
1a000b18:	4620      	mov	r0, r4
1a000b1a:	f000 f895 	bl	1a000c48 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000b1e:	6863      	ldr	r3, [r4, #4]
1a000b20:	f023 0304 	bic.w	r3, r3, #4
1a000b24:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000b26:	6823      	ldr	r3, [r4, #0]
1a000b28:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000b2c:	f043 0307 	orr.w	r3, r3, #7
1a000b30:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000b32:	4905      	ldr	r1, [pc, #20]	; (1a000b48 <Board_SPI_Init+0x34>)
1a000b34:	4620      	mov	r0, r4
1a000b36:	f000 f868 	bl	1a000c0a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000b3a:	6863      	ldr	r3, [r4, #4]
1a000b3c:	f043 0302 	orr.w	r3, r3, #2
1a000b40:	6063      	str	r3, [r4, #4]
}
1a000b42:	bd10      	pop	{r4, pc}
1a000b44:	400c5000 	.word	0x400c5000
1a000b48:	000186a0 	.word	0x000186a0

1a000b4c <Board_I2C_Init>:
{
1a000b4c:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a000b4e:	2000      	movs	r0, #0
1a000b50:	f000 f8ee 	bl	1a000d30 <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000b54:	4b04      	ldr	r3, [pc, #16]	; (1a000b68 <Board_I2C_Init+0x1c>)
1a000b56:	f640 0208 	movw	r2, #2056	; 0x808
1a000b5a:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000b5e:	4903      	ldr	r1, [pc, #12]	; (1a000b6c <Board_I2C_Init+0x20>)
1a000b60:	2000      	movs	r0, #0
1a000b62:	f000 f8f7 	bl	1a000d54 <Chip_I2C_SetClockRate>
}
1a000b66:	bd08      	pop	{r3, pc}
1a000b68:	40086000 	.word	0x40086000
1a000b6c:	000f4240 	.word	0x000f4240

1a000b70 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000b70:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a000b72:	4c07      	ldr	r4, [pc, #28]	; (1a000b90 <Board_Debug_Init+0x20>)
1a000b74:	4620      	mov	r0, r4
1a000b76:	f000 fd09 	bl	1a00158c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000b7a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000b7e:	4620      	mov	r0, r4
1a000b80:	f000 fd4e 	bl	1a001620 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000b84:	2303      	movs	r3, #3
1a000b86:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000b88:	2301      	movs	r3, #1
1a000b8a:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a000b8c:	bd10      	pop	{r4, pc}
1a000b8e:	bf00      	nop
1a000b90:	400c1000 	.word	0x400c1000

1a000b94 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000b94:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000b96:	f7ff ffeb 	bl	1a000b70 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000b9a:	4809      	ldr	r0, [pc, #36]	; (1a000bc0 <Board_Init+0x2c>)
1a000b9c:	f000 f8f6 	bl	1a000d8c <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000ba0:	f7ff ff80 	bl	1a000aa4 <Board_GPIO_Init>
   Board_ADC_Init();
1a000ba4:	f7ff ff9e 	bl	1a000ae4 <Board_ADC_Init>
   Board_SPI_Init();
1a000ba8:	f7ff ffb4 	bl	1a000b14 <Board_SPI_Init>
   Board_I2C_Init();
1a000bac:	f7ff ffce 	bl	1a000b4c <Board_I2C_Init>

   Board_LED_Init();
1a000bb0:	f7ff ff36 	bl	1a000a20 <Board_LED_Init>
   Board_TEC_Init();
1a000bb4:	f7ff ff56 	bl	1a000a64 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000bb8:	f000 fa02 	bl	1a000fc0 <SystemCoreClockUpdate>
}
1a000bbc:	bd08      	pop	{r3, pc}
1a000bbe:	bf00      	nop
1a000bc0:	400f4000 	.word	0x400f4000

1a000bc4 <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a000bc4:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000bc6:	f7ff ffd3 	bl	1a000b70 <Board_Debug_Init>
1a000bca:	bd08      	pop	{r3, pc}

1a000bcc <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000bcc:	4b03      	ldr	r3, [pc, #12]	; (1a000bdc <Chip_SSP_GetClockIndex+0x10>)
1a000bce:	4298      	cmp	r0, r3
1a000bd0:	d001      	beq.n	1a000bd6 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a000bd2:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a000bd4:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a000bd6:	20a5      	movs	r0, #165	; 0xa5
1a000bd8:	4770      	bx	lr
1a000bda:	bf00      	nop
1a000bdc:	400c5000 	.word	0x400c5000

1a000be0 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000be0:	4b04      	ldr	r3, [pc, #16]	; (1a000bf4 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a000be2:	4298      	cmp	r0, r3
1a000be4:	d002      	beq.n	1a000bec <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a000be6:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a000bea:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a000bec:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a000bf0:	4770      	bx	lr
1a000bf2:	bf00      	nop
1a000bf4:	400c5000 	.word	0x400c5000

1a000bf8 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a000bf8:	6803      	ldr	r3, [r0, #0]
1a000bfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a000bfe:	0209      	lsls	r1, r1, #8
1a000c00:	b289      	uxth	r1, r1
1a000c02:	4319      	orrs	r1, r3
1a000c04:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a000c06:	6102      	str	r2, [r0, #16]
}
1a000c08:	4770      	bx	lr

1a000c0a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a000c0a:	b570      	push	{r4, r5, r6, lr}
1a000c0c:	4606      	mov	r6, r0
1a000c0e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a000c10:	f7ff ffe6 	bl	1a000be0 <Chip_SSP_GetPeriphClockIndex>
1a000c14:	f000 fc7e 	bl	1a001514 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a000c18:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a000c1a:	f04f 33ff 	mov.w	r3, #4294967295
	cr0_div = 0;
1a000c1e:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a000c20:	e000      	b.n	1a000c24 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a000c22:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a000c24:	42ab      	cmp	r3, r5
1a000c26:	d90b      	bls.n	1a000c40 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a000c28:	1c4c      	adds	r4, r1, #1
1a000c2a:	fb02 f304 	mul.w	r3, r2, r4
1a000c2e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a000c32:	429d      	cmp	r5, r3
1a000c34:	d2f6      	bcs.n	1a000c24 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a000c36:	2cff      	cmp	r4, #255	; 0xff
1a000c38:	d9f3      	bls.n	1a000c22 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a000c3a:	3202      	adds	r2, #2
				cr0_div = 0;
1a000c3c:	2100      	movs	r1, #0
1a000c3e:	e7f1      	b.n	1a000c24 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a000c40:	4630      	mov	r0, r6
1a000c42:	f7ff ffd9 	bl	1a000bf8 <Chip_SSP_SetClockRate>
}
1a000c46:	bd70      	pop	{r4, r5, r6, pc}

1a000c48 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a000c48:	b510      	push	{r4, lr}
1a000c4a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a000c4c:	f7ff ffbe 	bl	1a000bcc <Chip_SSP_GetClockIndex>
1a000c50:	f000 fc46 	bl	1a0014e0 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a000c54:	4620      	mov	r0, r4
1a000c56:	f7ff ffc3 	bl	1a000be0 <Chip_SSP_GetPeriphClockIndex>
1a000c5a:	f000 fc41 	bl	1a0014e0 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000c5e:	6863      	ldr	r3, [r4, #4]
1a000c60:	f023 0304 	bic.w	r3, r3, #4
1a000c64:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000c66:	6823      	ldr	r3, [r4, #0]
1a000c68:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000c6c:	f043 0307 	orr.w	r3, r3, #7
1a000c70:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a000c72:	4902      	ldr	r1, [pc, #8]	; (1a000c7c <Chip_SSP_Init+0x34>)
1a000c74:	4620      	mov	r0, r4
1a000c76:	f7ff ffc8 	bl	1a000c0a <Chip_SSP_SetBitRate>
}
1a000c7a:	bd10      	pop	{r4, pc}
1a000c7c:	000186a0 	.word	0x000186a0

1a000c80 <Chip_SCTPWM_SetOutPin>:
 * Public functions
 ****************************************************************************/

/* Setup the OUTPUT pin corresponding to the PWM index */
void Chip_SCTPWM_SetOutPin(LPC_SCT_T *pSCT, uint8_t index, uint8_t pin)
{
1a000c80:	b430      	push	{r4, r5}
	int ix = (int) index;
	pSCT->EVENT[ix].CTRL = index | (1 << 12);
1a000c82:	f441 5580 	orr.w	r5, r1, #4096	; 0x1000
1a000c86:	f101 0360 	add.w	r3, r1, #96	; 0x60
1a000c8a:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
1a000c8e:	6065      	str	r5, [r4, #4]
	pSCT->EVENT[ix].STATE = 1;
1a000c90:	2401      	movs	r4, #1
1a000c92:	f840 4033 	str.w	r4, [r0, r3, lsl #3]
	pSCT->OUT[pin].SET = 1;
1a000c96:	f102 03a0 	add.w	r3, r2, #160	; 0xa0
1a000c9a:	f840 4033 	str.w	r4, [r0, r3, lsl #3]
	pSCT->OUT[pin].CLR = 1 << ix;
1a000c9e:	fa04 f101 	lsl.w	r1, r4, r1
1a000ca2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
1a000ca6:	6059      	str	r1, [r3, #4]

	/* Clear the output in-case of conflict */
	pSCT->RES = (pSCT->RES & ~(3 << (pin << 1))) | (0x01 << (pin << 1));
1a000ca8:	6d81      	ldr	r1, [r0, #88]	; 0x58
1a000caa:	40a2      	lsls	r2, r4
1a000cac:	2303      	movs	r3, #3
1a000cae:	4093      	lsls	r3, r2
1a000cb0:	43db      	mvns	r3, r3
1a000cb2:	4019      	ands	r1, r3
1a000cb4:	4094      	lsls	r4, r2
1a000cb6:	430c      	orrs	r4, r1
1a000cb8:	6584      	str	r4, [r0, #88]	; 0x58

	/* Set and Clear do not depend on direction */
	pSCT->OUTPUTDIRCTRL = (pSCT->OUTPUTDIRCTRL & ~(3 << (pin << 1)));
1a000cba:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a000cbc:	4013      	ands	r3, r2
1a000cbe:	6543      	str	r3, [r0, #84]	; 0x54
}
1a000cc0:	bc30      	pop	{r4, r5}
1a000cc2:	4770      	bx	lr

1a000cc4 <Chip_SCTPWM_SetRate>:

/* Set the PWM frequency */
void Chip_SCTPWM_SetRate(LPC_SCT_T *pSCT, uint32_t freq)
{
1a000cc4:	b538      	push	{r3, r4, r5, lr}
1a000cc6:	4604      	mov	r4, r0
1a000cc8:	460d      	mov	r5, r1
	uint32_t rate;

	rate = Chip_Clock_GetRate(CLK_MX_SCT) / freq;;
1a000cca:	206d      	movs	r0, #109	; 0x6d
1a000ccc:	f000 fc22 	bl	1a001514 <Chip_Clock_GetRate>
1a000cd0:	fbb0 f0f5 	udiv	r0, r0, r5
 * @param	value	: Value (ORed value of SCT_CTRL_* bits)
 * @return	Nothing
 */
STATIC INLINE void Chip_SCT_SetControl(LPC_SCT_T *pSCT, uint32_t value)
{
	pSCT->CTRL_U |= value;
1a000cd4:	6863      	ldr	r3, [r4, #4]
1a000cd6:	f043 1304 	orr.w	r3, r3, #262148	; 0x40004
1a000cda:	6063      	str	r3, [r4, #4]
1a000cdc:	6863      	ldr	r3, [r4, #4]
1a000cde:	f043 1308 	orr.w	r3, r3, #524296	; 0x80008
1a000ce2:	6063      	str	r3, [r4, #4]

	/* Stop the SCT before configuration */
	Chip_SCTPWM_Stop(pSCT);

	/* Set MATCH0 for max limit */
	pSCT->REGMODE_L = 0;
1a000ce4:	2300      	movs	r3, #0
1a000ce6:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	pSCT->REGMODE_H = 0;
1a000cea:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
	pSCT->MATCH[n].U = value;
1a000cee:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 * @param	value	: The 32-bit match count reload value
 * @return	Nothing
 */
STATIC INLINE void Chip_SCT_SetMatchReload(LPC_SCT_T *pSCT, CHIP_SCT_MATCH_REG_T n, uint32_t value)
{
	pSCT->MATCHREL[n].U = value;
1a000cf2:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
	Chip_SCT_SetMatchCount(pSCT, SCT_MATCH_0, 0);
	Chip_SCT_SetMatchReload(pSCT, SCT_MATCH_0, rate);
	pSCT->EVENT[0].CTRL = 1 << 12;
1a000cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
1a000cfa:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	pSCT->EVENT[0].STATE = 1;
1a000cfe:	2301      	movs	r3, #1
1a000d00:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
	pSCT->LIMIT_L = 1;
1a000d04:	8123      	strh	r3, [r4, #8]
	pSCT->CONFIG = value;
1a000d06:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
1a000d0a:	6023      	str	r3, [r4, #0]

	/* Set SCT Counter to count 32-bits and reset to 0 after reaching MATCH0 */
	Chip_SCT_Config(pSCT, SCT_CONFIG_32BIT_COUNTER | SCT_CONFIG_AUTOLIMIT_L);
}
1a000d0c:	bd38      	pop	{r3, r4, r5, pc}
1a000d0e:	Address 0x1a000d0e is out of bounds.


1a000d10 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000d10:	2901      	cmp	r1, #1
1a000d12:	d109      	bne.n	1a000d28 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000d14:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000d18:	0082      	lsls	r2, r0, #2
1a000d1a:	4b04      	ldr	r3, [pc, #16]	; (1a000d2c <Chip_I2C_EventHandler+0x1c>)
1a000d1c:	4413      	add	r3, r2
1a000d1e:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000d20:	7d13      	ldrb	r3, [r2, #20]
1a000d22:	b2db      	uxtb	r3, r3
1a000d24:	2b04      	cmp	r3, #4
1a000d26:	d0fb      	beq.n	1a000d20 <Chip_I2C_EventHandler+0x10>
}
1a000d28:	4770      	bx	lr
1a000d2a:	bf00      	nop
1a000d2c:	10000000 	.word	0x10000000

1a000d30 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000d30:	b570      	push	{r4, r5, r6, lr}
1a000d32:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a000d34:	4e06      	ldr	r6, [pc, #24]	; (1a000d50 <Chip_I2C_Init+0x20>)
1a000d36:	00c4      	lsls	r4, r0, #3
1a000d38:	1a22      	subs	r2, r4, r0
1a000d3a:	0093      	lsls	r3, r2, #2
1a000d3c:	4433      	add	r3, r6
1a000d3e:	8898      	ldrh	r0, [r3, #4]
1a000d40:	f000 fbce 	bl	1a0014e0 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000d44:	1b64      	subs	r4, r4, r5
1a000d46:	00a3      	lsls	r3, r4, #2
1a000d48:	58f3      	ldr	r3, [r6, r3]
1a000d4a:	226c      	movs	r2, #108	; 0x6c
1a000d4c:	619a      	str	r2, [r3, #24]
}
1a000d4e:	bd70      	pop	{r4, r5, r6, pc}
1a000d50:	10000000 	.word	0x10000000

1a000d54 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000d58:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a000d5a:	4e0b      	ldr	r6, [pc, #44]	; (1a000d88 <Chip_I2C_SetClockRate+0x34>)
1a000d5c:	00c5      	lsls	r5, r0, #3
1a000d5e:	1a2b      	subs	r3, r5, r0
1a000d60:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a000d64:	eb06 0308 	add.w	r3, r6, r8
1a000d68:	8898      	ldrh	r0, [r3, #4]
1a000d6a:	f000 fbd3 	bl	1a001514 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000d6e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000d72:	f856 3008 	ldr.w	r3, [r6, r8]
1a000d76:	0842      	lsrs	r2, r0, #1
1a000d78:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000d7a:	f856 3008 	ldr.w	r3, [r6, r8]
1a000d7e:	691a      	ldr	r2, [r3, #16]
1a000d80:	1a80      	subs	r0, r0, r2
1a000d82:	6158      	str	r0, [r3, #20]
}
1a000d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000d88:	10000000 	.word	0x10000000

1a000d8c <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000d8c:	4770      	bx	lr

1a000d8e <Chip_SCT_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize SCT */
void Chip_SCT_Init(LPC_SCT_T *pSCT)
{
1a000d8e:	b508      	push	{r3, lr}
	Chip_Clock_EnableOpts(CLK_MX_SCT, true, true, 1);
1a000d90:	2301      	movs	r3, #1
1a000d92:	461a      	mov	r2, r3
1a000d94:	4619      	mov	r1, r3
1a000d96:	206d      	movs	r0, #109	; 0x6d
1a000d98:	f000 fb84 	bl	1a0014a4 <Chip_Clock_EnableOpts>
}
1a000d9c:	bd08      	pop	{r3, pc}
1a000d9e:	Address 0x1a000d9e is out of bounds.


1a000da0 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000da0:	4b03      	ldr	r3, [pc, #12]	; (1a000db0 <Chip_ADC_GetClockIndex+0x10>)
1a000da2:	4298      	cmp	r0, r3
1a000da4:	d001      	beq.n	1a000daa <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000da6:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000da8:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000daa:	2004      	movs	r0, #4
1a000dac:	4770      	bx	lr
1a000dae:	bf00      	nop
1a000db0:	400e4000 	.word	0x400e4000

1a000db4 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000db4:	b570      	push	{r4, r5, r6, lr}
1a000db6:	460d      	mov	r5, r1
1a000db8:	4614      	mov	r4, r2
1a000dba:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000dbc:	f7ff fff0 	bl	1a000da0 <Chip_ADC_GetClockIndex>
1a000dc0:	f000 fba8 	bl	1a001514 <Chip_Clock_GetRate>
	if (burstMode) {
1a000dc4:	b155      	cbz	r5, 1a000ddc <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000dc6:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000dca:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000dce:	0064      	lsls	r4, r4, #1
1a000dd0:	fbb0 f0f4 	udiv	r0, r0, r4
1a000dd4:	b2c0      	uxtb	r0, r0
1a000dd6:	3801      	subs	r0, #1
	return div;
}
1a000dd8:	b2c0      	uxtb	r0, r0
1a000dda:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000ddc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000de0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000de4:	e7f1      	b.n	1a000dca <getClkDiv+0x16>
1a000de6:	Address 0x1a000de6 is out of bounds.


1a000de8 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000de8:	b538      	push	{r3, r4, r5, lr}
1a000dea:	4605      	mov	r5, r0
1a000dec:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000dee:	f7ff ffd7 	bl	1a000da0 <Chip_ADC_GetClockIndex>
1a000df2:	2301      	movs	r3, #1
1a000df4:	461a      	mov	r2, r3
1a000df6:	4619      	mov	r1, r3
1a000df8:	f000 fb54 	bl	1a0014a4 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000dfc:	2100      	movs	r1, #0
1a000dfe:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000e00:	4a08      	ldr	r2, [pc, #32]	; (1a000e24 <Chip_ADC_Init+0x3c>)
1a000e02:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000e04:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000e06:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000e08:	230b      	movs	r3, #11
1a000e0a:	4628      	mov	r0, r5
1a000e0c:	f7ff ffd2 	bl	1a000db4 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000e10:	0200      	lsls	r0, r0, #8
1a000e12:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000e16:	7920      	ldrb	r0, [r4, #4]
1a000e18:	0440      	lsls	r0, r0, #17
1a000e1a:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000e1e:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000e20:	6028      	str	r0, [r5, #0]
}
1a000e22:	bd38      	pop	{r3, r4, r5, pc}
1a000e24:	00061a80 	.word	0x00061a80

1a000e28 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000e28:	b570      	push	{r4, r5, r6, lr}
1a000e2a:	4605      	mov	r5, r0
1a000e2c:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000e2e:	6804      	ldr	r4, [r0, #0]
1a000e30:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000e34:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000e38:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000e3a:	790b      	ldrb	r3, [r1, #4]
1a000e3c:	f1c3 030b 	rsb	r3, r3, #11
1a000e40:	b2db      	uxtb	r3, r3
1a000e42:	7949      	ldrb	r1, [r1, #5]
1a000e44:	f7ff ffb6 	bl	1a000db4 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000e48:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000e4c:	7933      	ldrb	r3, [r6, #4]
1a000e4e:	045b      	lsls	r3, r3, #17
1a000e50:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000e54:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000e56:	602b      	str	r3, [r5, #0]
}
1a000e58:	bd70      	pop	{r4, r5, r6, pc}

1a000e5a <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000e5a:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000e5c:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000e5e:	680a      	ldr	r2, [r1, #0]
1a000e60:	f7ff ffe2 	bl	1a000e28 <Chip_ADC_SetSampleRate>
}
1a000e64:	bd08      	pop	{r3, pc}
1a000e66:	Address 0x1a000e66 is out of bounds.


1a000e68 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000e68:	b570      	push	{r4, r5, r6, lr}
1a000e6a:	b08a      	sub	sp, #40	; 0x28
1a000e6c:	4605      	mov	r5, r0
1a000e6e:	460e      	mov	r6, r1
1a000e70:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a000e72:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000e76:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a000e78:	2806      	cmp	r0, #6
1a000e7a:	d018      	beq.n	1a000eae <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000e7c:	2300      	movs	r3, #0
1a000e7e:	2201      	movs	r2, #1
1a000e80:	4629      	mov	r1, r5
1a000e82:	2004      	movs	r0, #4
1a000e84:	f000 fac8 	bl	1a001418 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a000e88:	4a4a      	ldr	r2, [pc, #296]	; (1a000fb4 <Chip_SetupCoreClock+0x14c>)
1a000e8a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000e8c:	f043 0301 	orr.w	r3, r3, #1
1a000e90:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a000e92:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000e96:	a901      	add	r1, sp, #4
1a000e98:	4630      	mov	r0, r6
1a000e9a:	f000 fa35 	bl	1a001308 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a000e9e:	4b46      	ldr	r3, [pc, #280]	; (1a000fb8 <Chip_SetupCoreClock+0x150>)
1a000ea0:	429e      	cmp	r6, r3
1a000ea2:	d916      	bls.n	1a000ed2 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a000ea4:	9b01      	ldr	r3, [sp, #4]
1a000ea6:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000eaa:	d003      	beq.n	1a000eb4 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a000eac:	e7fe      	b.n	1a000eac <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a000eae:	f000 f98d 	bl	1a0011cc <Chip_Clock_EnableCrystal>
1a000eb2:	e7e3      	b.n	1a000e7c <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a000eb4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000eb8:	d005      	beq.n	1a000ec6 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a000eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000ebe:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a000ec0:	2500      	movs	r5, #0
			direct = 1;
1a000ec2:	2601      	movs	r6, #1
1a000ec4:	e007      	b.n	1a000ed6 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a000ec6:	9b04      	ldr	r3, [sp, #16]
1a000ec8:	3301      	adds	r3, #1
1a000eca:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a000ecc:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a000ece:	2600      	movs	r6, #0
1a000ed0:	e001      	b.n	1a000ed6 <Chip_SetupCoreClock+0x6e>
1a000ed2:	2500      	movs	r5, #0
1a000ed4:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000ed6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000eda:	9b01      	ldr	r3, [sp, #4]
1a000edc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000ee0:	9a05      	ldr	r2, [sp, #20]
1a000ee2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000ee6:	9a03      	ldr	r2, [sp, #12]
1a000ee8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000eec:	9a04      	ldr	r2, [sp, #16]
1a000eee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000ef2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000ef6:	4a2f      	ldr	r2, [pc, #188]	; (1a000fb4 <Chip_SetupCoreClock+0x14c>)
1a000ef8:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000efa:	4b2e      	ldr	r3, [pc, #184]	; (1a000fb4 <Chip_SetupCoreClock+0x14c>)
1a000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a000efe:	f013 0f01 	tst.w	r3, #1
1a000f02:	d0fa      	beq.n	1a000efa <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000f04:	2300      	movs	r3, #0
1a000f06:	2201      	movs	r2, #1
1a000f08:	2109      	movs	r1, #9
1a000f0a:	2004      	movs	r0, #4
1a000f0c:	f000 fa84 	bl	1a001418 <Chip_Clock_SetBaseClock>

	if (direct) {
1a000f10:	b306      	cbz	r6, 1a000f54 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000f12:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000f16:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a000f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000f1a:	1e5a      	subs	r2, r3, #1
1a000f1c:	9209      	str	r2, [sp, #36]	; 0x24
1a000f1e:	2b00      	cmp	r3, #0
1a000f20:	d1fa      	bne.n	1a000f18 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a000f22:	9b01      	ldr	r3, [sp, #4]
1a000f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000f28:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000f2a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000f2e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000f32:	9a05      	ldr	r2, [sp, #20]
1a000f34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000f38:	9a03      	ldr	r2, [sp, #12]
1a000f3a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000f3e:	9a04      	ldr	r2, [sp, #16]
1a000f40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000f44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000f48:	4a1a      	ldr	r2, [pc, #104]	; (1a000fb4 <Chip_SetupCoreClock+0x14c>)
1a000f4a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a000f4c:	2c00      	cmp	r4, #0
1a000f4e:	d12e      	bne.n	1a000fae <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a000f50:	b00a      	add	sp, #40	; 0x28
1a000f52:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a000f54:	2d00      	cmp	r5, #0
1a000f56:	d0f9      	beq.n	1a000f4c <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000f58:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000f5c:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a000f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000f60:	1e5a      	subs	r2, r3, #1
1a000f62:	9209      	str	r2, [sp, #36]	; 0x24
1a000f64:	2b00      	cmp	r3, #0
1a000f66:	d1fa      	bne.n	1a000f5e <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a000f68:	9b04      	ldr	r3, [sp, #16]
1a000f6a:	1e5a      	subs	r2, r3, #1
1a000f6c:	9204      	str	r2, [sp, #16]
1a000f6e:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a000f72:	9b01      	ldr	r3, [sp, #4]
1a000f74:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a000f78:	9905      	ldr	r1, [sp, #20]
1a000f7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a000f7e:	9903      	ldr	r1, [sp, #12]
1a000f80:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a000f84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000f88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000f8c:	4a09      	ldr	r2, [pc, #36]	; (1a000fb4 <Chip_SetupCoreClock+0x14c>)
1a000f8e:	6453      	str	r3, [r2, #68]	; 0x44
1a000f90:	e7dc      	b.n	1a000f4c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000f92:	480a      	ldr	r0, [pc, #40]	; (1a000fbc <Chip_SetupCoreClock+0x154>)
1a000f94:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000f98:	78cb      	ldrb	r3, [r1, #3]
1a000f9a:	788a      	ldrb	r2, [r1, #2]
1a000f9c:	7849      	ldrb	r1, [r1, #1]
1a000f9e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000fa2:	f000 fa39 	bl	1a001418 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000fa6:	3401      	adds	r4, #1
1a000fa8:	2c11      	cmp	r4, #17
1a000faa:	d9f2      	bls.n	1a000f92 <Chip_SetupCoreClock+0x12a>
1a000fac:	e7d0      	b.n	1a000f50 <Chip_SetupCoreClock+0xe8>
1a000fae:	2400      	movs	r4, #0
1a000fb0:	e7fa      	b.n	1a000fa8 <Chip_SetupCoreClock+0x140>
1a000fb2:	bf00      	nop
1a000fb4:	40050000 	.word	0x40050000
1a000fb8:	068e7780 	.word	0x068e7780
1a000fbc:	1a002e14 	.word	0x1a002e14

1a000fc0 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000fc0:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000fc2:	2069      	movs	r0, #105	; 0x69
1a000fc4:	f000 faa6 	bl	1a001514 <Chip_Clock_GetRate>
1a000fc8:	4b01      	ldr	r3, [pc, #4]	; (1a000fd0 <SystemCoreClockUpdate+0x10>)
1a000fca:	6018      	str	r0, [r3, #0]
}
1a000fcc:	bd08      	pop	{r3, pc}
1a000fce:	bf00      	nop
1a000fd0:	10000154 	.word	0x10000154

1a000fd4 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000fd4:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000fd6:	680b      	ldr	r3, [r1, #0]
1a000fd8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000fdc:	d002      	beq.n	1a000fe4 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000fe2:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000fe4:	4607      	mov	r7, r0
1a000fe6:	2501      	movs	r5, #1
1a000fe8:	e03a      	b.n	1a001060 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000fea:	694b      	ldr	r3, [r1, #20]
1a000fec:	fb03 f302 	mul.w	r3, r3, r2
1a000ff0:	fbb3 f3f5 	udiv	r3, r3, r5
1a000ff4:	e01c      	b.n	1a001030 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000ff6:	461c      	mov	r4, r3
	if (val < 0)
1a000ff8:	ebb0 0c04 	subs.w	ip, r0, r4
1a000ffc:	d427      	bmi.n	1a00104e <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000ffe:	4567      	cmp	r7, ip
1a001000:	d906      	bls.n	1a001010 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a001002:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a001004:	1c77      	adds	r7, r6, #1
1a001006:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a001008:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00100a:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a00100c:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a00100e:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a001010:	3201      	adds	r2, #1
1a001012:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a001016:	dc1d      	bgt.n	1a001054 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a001018:	680c      	ldr	r4, [r1, #0]
1a00101a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00101e:	d0e4      	beq.n	1a000fea <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a001020:	1c73      	adds	r3, r6, #1
1a001022:	fa02 fc03 	lsl.w	ip, r2, r3
1a001026:	694b      	ldr	r3, [r1, #20]
1a001028:	fb03 f30c 	mul.w	r3, r3, ip
1a00102c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a001030:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a00106c <pll_calc_divs+0x98>
1a001034:	4563      	cmp	r3, ip
1a001036:	d9eb      	bls.n	1a001010 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001038:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a001070 <pll_calc_divs+0x9c>
1a00103c:	4563      	cmp	r3, ip
1a00103e:	d809      	bhi.n	1a001054 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a001040:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001044:	d1d7      	bne.n	1a000ff6 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a001046:	1c74      	adds	r4, r6, #1
1a001048:	fa23 f404 	lsr.w	r4, r3, r4
1a00104c:	e7d4      	b.n	1a000ff8 <pll_calc_divs+0x24>
		return -val;
1a00104e:	f1cc 0c00 	rsb	ip, ip, #0
1a001052:	e7d4      	b.n	1a000ffe <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a001054:	3601      	adds	r6, #1
1a001056:	2e03      	cmp	r6, #3
1a001058:	dc01      	bgt.n	1a00105e <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a00105a:	2201      	movs	r2, #1
1a00105c:	e7d9      	b.n	1a001012 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a00105e:	3501      	adds	r5, #1
1a001060:	2d04      	cmp	r5, #4
1a001062:	dc01      	bgt.n	1a001068 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a001064:	2600      	movs	r6, #0
1a001066:	e7f6      	b.n	1a001056 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a001068:	bcf0      	pop	{r4, r5, r6, r7}
1a00106a:	4770      	bx	lr
1a00106c:	094c5eff 	.word	0x094c5eff
1a001070:	1312d000 	.word	0x1312d000

1a001074 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001074:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001076:	b099      	sub	sp, #100	; 0x64
1a001078:	4605      	mov	r5, r0
1a00107a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a00107c:	225c      	movs	r2, #92	; 0x5c
1a00107e:	2100      	movs	r1, #0
1a001080:	a801      	add	r0, sp, #4
1a001082:	f001 fdb7 	bl	1a002bf4 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a001086:	2380      	movs	r3, #128	; 0x80
1a001088:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00108a:	6963      	ldr	r3, [r4, #20]
1a00108c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00108e:	7923      	ldrb	r3, [r4, #4]
1a001090:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a001094:	4669      	mov	r1, sp
1a001096:	4628      	mov	r0, r5
1a001098:	f7ff ff9c 	bl	1a000fd4 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a00109c:	9b06      	ldr	r3, [sp, #24]
1a00109e:	42ab      	cmp	r3, r5
1a0010a0:	d027      	beq.n	1a0010f2 <pll_get_frac+0x7e>
	if (val < 0)
1a0010a2:	1aeb      	subs	r3, r5, r3
1a0010a4:	d42e      	bmi.n	1a001104 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0010a6:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0010a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0010aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0010ae:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0010b0:	6963      	ldr	r3, [r4, #20]
1a0010b2:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0010b4:	7923      	ldrb	r3, [r4, #4]
1a0010b6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0010ba:	a910      	add	r1, sp, #64	; 0x40
1a0010bc:	4628      	mov	r0, r5
1a0010be:	f7ff ff89 	bl	1a000fd4 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0010c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0010c4:	42ab      	cmp	r3, r5
1a0010c6:	d01f      	beq.n	1a001108 <pll_get_frac+0x94>
	if (val < 0)
1a0010c8:	1aeb      	subs	r3, r5, r3
1a0010ca:	d425      	bmi.n	1a001118 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0010cc:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0010ce:	4b2b      	ldr	r3, [pc, #172]	; (1a00117c <pll_get_frac+0x108>)
1a0010d0:	429d      	cmp	r5, r3
1a0010d2:	d923      	bls.n	1a00111c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0010d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0010d6:	1aed      	subs	r5, r5, r3
1a0010d8:	d433      	bmi.n	1a001142 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0010da:	42ae      	cmp	r6, r5
1a0010dc:	dc3b      	bgt.n	1a001156 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0010de:	42be      	cmp	r6, r7
1a0010e0:	dc31      	bgt.n	1a001146 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0010e2:	466d      	mov	r5, sp
1a0010e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0010e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0010e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0010ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0010f0:	e006      	b.n	1a001100 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0010f2:	466d      	mov	r5, sp
1a0010f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0010f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0010f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0010fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a001100:	b019      	add	sp, #100	; 0x64
1a001102:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a001104:	425b      	negs	r3, r3
1a001106:	e7ce      	b.n	1a0010a6 <pll_get_frac+0x32>
		*ppll = pll[2];
1a001108:	ad10      	add	r5, sp, #64	; 0x40
1a00110a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00110c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00110e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001112:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001116:	e7f3      	b.n	1a001100 <pll_get_frac+0x8c>
		return -val;
1a001118:	425b      	negs	r3, r3
1a00111a:	e7d7      	b.n	1a0010cc <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a00111c:	2340      	movs	r3, #64	; 0x40
1a00111e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a001120:	6963      	ldr	r3, [r4, #20]
1a001122:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a001124:	a908      	add	r1, sp, #32
1a001126:	4628      	mov	r0, r5
1a001128:	f7ff ff54 	bl	1a000fd4 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a00112c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00112e:	42ab      	cmp	r3, r5
1a001130:	d1d0      	bne.n	1a0010d4 <pll_get_frac+0x60>
			*ppll = pll[1];
1a001132:	ad08      	add	r5, sp, #32
1a001134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001138:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00113c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a001140:	e7de      	b.n	1a001100 <pll_get_frac+0x8c>
		return -val;
1a001142:	426d      	negs	r5, r5
1a001144:	e7c9      	b.n	1a0010da <pll_get_frac+0x66>
			*ppll = pll[2];
1a001146:	ad10      	add	r5, sp, #64	; 0x40
1a001148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00114a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00114c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001150:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001154:	e7d4      	b.n	1a001100 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a001156:	42af      	cmp	r7, r5
1a001158:	db07      	blt.n	1a00116a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00115a:	ad08      	add	r5, sp, #32
1a00115c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00115e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001160:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001164:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001168:	e7ca      	b.n	1a001100 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00116a:	ad10      	add	r5, sp, #64	; 0x40
1a00116c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00116e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001170:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001174:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001178:	e7c2      	b.n	1a001100 <pll_get_frac+0x8c>
1a00117a:	bf00      	nop
1a00117c:	068e7780 	.word	0x068e7780

1a001180 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001180:	b430      	push	{r4, r5}
1a001182:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001184:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001186:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001188:	e000      	b.n	1a00118c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00118a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00118c:	281c      	cmp	r0, #28
1a00118e:	d118      	bne.n	1a0011c2 <Chip_Clock_FindBaseClock+0x42>
1a001190:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001194:	0051      	lsls	r1, r2, #1
1a001196:	4a0c      	ldr	r2, [pc, #48]	; (1a0011c8 <Chip_Clock_FindBaseClock+0x48>)
1a001198:	440a      	add	r2, r1
1a00119a:	7914      	ldrb	r4, [r2, #4]
1a00119c:	4284      	cmp	r4, r0
1a00119e:	d010      	beq.n	1a0011c2 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0011a0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0011a4:	004a      	lsls	r2, r1, #1
1a0011a6:	4908      	ldr	r1, [pc, #32]	; (1a0011c8 <Chip_Clock_FindBaseClock+0x48>)
1a0011a8:	5a8a      	ldrh	r2, [r1, r2]
1a0011aa:	42aa      	cmp	r2, r5
1a0011ac:	d8ed      	bhi.n	1a00118a <Chip_Clock_FindBaseClock+0xa>
1a0011ae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0011b2:	0051      	lsls	r1, r2, #1
1a0011b4:	4a04      	ldr	r2, [pc, #16]	; (1a0011c8 <Chip_Clock_FindBaseClock+0x48>)
1a0011b6:	440a      	add	r2, r1
1a0011b8:	8852      	ldrh	r2, [r2, #2]
1a0011ba:	42aa      	cmp	r2, r5
1a0011bc:	d3e5      	bcc.n	1a00118a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a0011be:	4620      	mov	r0, r4
1a0011c0:	e7e4      	b.n	1a00118c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0011c2:	bc30      	pop	{r4, r5}
1a0011c4:	4770      	bx	lr
1a0011c6:	bf00      	nop
1a0011c8:	1a002e68 	.word	0x1a002e68

1a0011cc <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0011cc:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0011d2:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0011d4:	4a0d      	ldr	r2, [pc, #52]	; (1a00120c <Chip_Clock_EnableCrystal+0x40>)
1a0011d6:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0011d8:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0011dc:	6992      	ldr	r2, [r2, #24]
1a0011de:	428a      	cmp	r2, r1
1a0011e0:	d001      	beq.n	1a0011e6 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0011e2:	4a0a      	ldr	r2, [pc, #40]	; (1a00120c <Chip_Clock_EnableCrystal+0x40>)
1a0011e4:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0011e6:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0011ea:	4a09      	ldr	r2, [pc, #36]	; (1a001210 <Chip_Clock_EnableCrystal+0x44>)
1a0011ec:	6811      	ldr	r1, [r2, #0]
1a0011ee:	4a09      	ldr	r2, [pc, #36]	; (1a001214 <Chip_Clock_EnableCrystal+0x48>)
1a0011f0:	4291      	cmp	r1, r2
1a0011f2:	d901      	bls.n	1a0011f8 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0011f4:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0011f8:	4a04      	ldr	r2, [pc, #16]	; (1a00120c <Chip_Clock_EnableCrystal+0x40>)
1a0011fa:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0011fc:	9b01      	ldr	r3, [sp, #4]
1a0011fe:	1e5a      	subs	r2, r3, #1
1a001200:	9201      	str	r2, [sp, #4]
1a001202:	2b00      	cmp	r3, #0
1a001204:	d1fa      	bne.n	1a0011fc <Chip_Clock_EnableCrystal+0x30>
}
1a001206:	b002      	add	sp, #8
1a001208:	4770      	bx	lr
1a00120a:	bf00      	nop
1a00120c:	40050000 	.word	0x40050000
1a001210:	1a002e10 	.word	0x1a002e10
1a001214:	01312cff 	.word	0x01312cff

1a001218 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001218:	3012      	adds	r0, #18
1a00121a:	4b05      	ldr	r3, [pc, #20]	; (1a001230 <Chip_Clock_GetDividerSource+0x18>)
1a00121c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001220:	f010 0f01 	tst.w	r0, #1
1a001224:	d102      	bne.n	1a00122c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001226:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00122a:	4770      	bx	lr
		return CLKINPUT_PD;
1a00122c:	2011      	movs	r0, #17
}
1a00122e:	4770      	bx	lr
1a001230:	40050000 	.word	0x40050000

1a001234 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001234:	f100 0212 	add.w	r2, r0, #18
1a001238:	4b03      	ldr	r3, [pc, #12]	; (1a001248 <Chip_Clock_GetDividerDivisor+0x14>)
1a00123a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00123e:	4b03      	ldr	r3, [pc, #12]	; (1a00124c <Chip_Clock_GetDividerDivisor+0x18>)
1a001240:	5c18      	ldrb	r0, [r3, r0]
}
1a001242:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001246:	4770      	bx	lr
1a001248:	40050000 	.word	0x40050000
1a00124c:	1a002e60 	.word	0x1a002e60

1a001250 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001250:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001252:	2810      	cmp	r0, #16
1a001254:	d80a      	bhi.n	1a00126c <Chip_Clock_GetClockInputHz+0x1c>
1a001256:	e8df f000 	tbb	[pc, r0]
1a00125a:	0b44      	.short	0x0b44
1a00125c:	0921180d 	.word	0x0921180d
1a001260:	2d2a2724 	.word	0x2d2a2724
1a001264:	34300909 	.word	0x34300909
1a001268:	3c38      	.short	0x3c38
1a00126a:	40          	.byte	0x40
1a00126b:	00          	.byte	0x00
	uint32_t rate = 0;
1a00126c:	2000      	movs	r0, #0
1a00126e:	e03a      	b.n	1a0012e6 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001270:	481e      	ldr	r0, [pc, #120]	; (1a0012ec <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001272:	e038      	b.n	1a0012e6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001274:	4b1e      	ldr	r3, [pc, #120]	; (1a0012f0 <Chip_Clock_GetClockInputHz+0xa0>)
1a001276:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00127a:	f003 0307 	and.w	r3, r3, #7
1a00127e:	2b04      	cmp	r3, #4
1a001280:	d001      	beq.n	1a001286 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a001282:	481c      	ldr	r0, [pc, #112]	; (1a0012f4 <Chip_Clock_GetClockInputHz+0xa4>)
1a001284:	e02f      	b.n	1a0012e6 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a001286:	2000      	movs	r0, #0
1a001288:	e02d      	b.n	1a0012e6 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00128a:	4b19      	ldr	r3, [pc, #100]	; (1a0012f0 <Chip_Clock_GetClockInputHz+0xa0>)
1a00128c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001290:	f003 0307 	and.w	r3, r3, #7
1a001294:	2b04      	cmp	r3, #4
1a001296:	d027      	beq.n	1a0012e8 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001298:	4816      	ldr	r0, [pc, #88]	; (1a0012f4 <Chip_Clock_GetClockInputHz+0xa4>)
1a00129a:	e024      	b.n	1a0012e6 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a00129c:	4b16      	ldr	r3, [pc, #88]	; (1a0012f8 <Chip_Clock_GetClockInputHz+0xa8>)
1a00129e:	6818      	ldr	r0, [r3, #0]
		break;
1a0012a0:	e021      	b.n	1a0012e6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0012a2:	4b16      	ldr	r3, [pc, #88]	; (1a0012fc <Chip_Clock_GetClockInputHz+0xac>)
1a0012a4:	6818      	ldr	r0, [r3, #0]
		break;
1a0012a6:	e01e      	b.n	1a0012e6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0012a8:	4b15      	ldr	r3, [pc, #84]	; (1a001300 <Chip_Clock_GetClockInputHz+0xb0>)
1a0012aa:	6818      	ldr	r0, [r3, #0]
		break;
1a0012ac:	e01b      	b.n	1a0012e6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0012ae:	4b14      	ldr	r3, [pc, #80]	; (1a001300 <Chip_Clock_GetClockInputHz+0xb0>)
1a0012b0:	6858      	ldr	r0, [r3, #4]
		break;
1a0012b2:	e018      	b.n	1a0012e6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0012b4:	f000 f868 	bl	1a001388 <Chip_Clock_GetMainPLLHz>
		break;
1a0012b8:	e015      	b.n	1a0012e6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0012ba:	2100      	movs	r1, #0
1a0012bc:	f000 f89a 	bl	1a0013f4 <Chip_Clock_GetDivRate>
		break;
1a0012c0:	e011      	b.n	1a0012e6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0012c2:	2101      	movs	r1, #1
1a0012c4:	f000 f896 	bl	1a0013f4 <Chip_Clock_GetDivRate>
		break;
1a0012c8:	e00d      	b.n	1a0012e6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0012ca:	2102      	movs	r1, #2
1a0012cc:	f000 f892 	bl	1a0013f4 <Chip_Clock_GetDivRate>
		break;
1a0012d0:	e009      	b.n	1a0012e6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0012d2:	2103      	movs	r1, #3
1a0012d4:	f000 f88e 	bl	1a0013f4 <Chip_Clock_GetDivRate>
		break;
1a0012d8:	e005      	b.n	1a0012e6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0012da:	2104      	movs	r1, #4
1a0012dc:	f000 f88a 	bl	1a0013f4 <Chip_Clock_GetDivRate>
		break;
1a0012e0:	e001      	b.n	1a0012e6 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a0012e2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0012e6:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a0012e8:	4806      	ldr	r0, [pc, #24]	; (1a001304 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a0012ea:	e7fc      	b.n	1a0012e6 <Chip_Clock_GetClockInputHz+0x96>
1a0012ec:	00b71b00 	.word	0x00b71b00
1a0012f0:	40043000 	.word	0x40043000
1a0012f4:	017d7840 	.word	0x017d7840
1a0012f8:	1a002de4 	.word	0x1a002de4
1a0012fc:	1a002e10 	.word	0x1a002e10
1a001300:	1000011c 	.word	0x1000011c
1a001304:	02faf080 	.word	0x02faf080

1a001308 <Chip_Clock_CalcMainPLLValue>:
{
1a001308:	b538      	push	{r3, r4, r5, lr}
1a00130a:	4605      	mov	r5, r0
1a00130c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a00130e:	7908      	ldrb	r0, [r1, #4]
1a001310:	f7ff ff9e 	bl	1a001250 <Chip_Clock_GetClockInputHz>
1a001314:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001316:	4b19      	ldr	r3, [pc, #100]	; (1a00137c <Chip_Clock_CalcMainPLLValue+0x74>)
1a001318:	442b      	add	r3, r5
1a00131a:	4a19      	ldr	r2, [pc, #100]	; (1a001380 <Chip_Clock_CalcMainPLLValue+0x78>)
1a00131c:	4293      	cmp	r3, r2
1a00131e:	d821      	bhi.n	1a001364 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001320:	b318      	cbz	r0, 1a00136a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001322:	2380      	movs	r3, #128	; 0x80
1a001324:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001326:	2300      	movs	r3, #0
1a001328:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00132a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a00132c:	fbb5 f3f0 	udiv	r3, r5, r0
1a001330:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001332:	4a14      	ldr	r2, [pc, #80]	; (1a001384 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001334:	4295      	cmp	r5, r2
1a001336:	d903      	bls.n	1a001340 <Chip_Clock_CalcMainPLLValue+0x38>
1a001338:	fb03 f000 	mul.w	r0, r3, r0
1a00133c:	42a8      	cmp	r0, r5
1a00133e:	d007      	beq.n	1a001350 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001340:	4621      	mov	r1, r4
1a001342:	4628      	mov	r0, r5
1a001344:	f7ff fe96 	bl	1a001074 <pll_get_frac>
		if (!ppll->nsel) {
1a001348:	68a3      	ldr	r3, [r4, #8]
1a00134a:	b18b      	cbz	r3, 1a001370 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a00134c:	3b01      	subs	r3, #1
1a00134e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001350:	6923      	ldr	r3, [r4, #16]
1a001352:	b183      	cbz	r3, 1a001376 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001354:	68e2      	ldr	r2, [r4, #12]
1a001356:	b10a      	cbz	r2, 1a00135c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001358:	3a01      	subs	r2, #1
1a00135a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a00135c:	3b01      	subs	r3, #1
1a00135e:	6123      	str	r3, [r4, #16]
	return 0;
1a001360:	2000      	movs	r0, #0
}
1a001362:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001364:	f04f 30ff 	mov.w	r0, #4294967295
1a001368:	e7fb      	b.n	1a001362 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00136a:	f04f 30ff 	mov.w	r0, #4294967295
1a00136e:	e7f8      	b.n	1a001362 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a001370:	f04f 30ff 	mov.w	r0, #4294967295
1a001374:	e7f5      	b.n	1a001362 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a001376:	f04f 30ff 	mov.w	r0, #4294967295
1a00137a:	e7f2      	b.n	1a001362 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00137c:	ff6b3a10 	.word	0xff6b3a10
1a001380:	0b940510 	.word	0x0b940510
1a001384:	094c5eff 	.word	0x094c5eff

1a001388 <Chip_Clock_GetMainPLLHz>:
{
1a001388:	b530      	push	{r4, r5, lr}
1a00138a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a00138c:	4d17      	ldr	r5, [pc, #92]	; (1a0013ec <Chip_Clock_GetMainPLLHz+0x64>)
1a00138e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001390:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001394:	f7ff ff5c 	bl	1a001250 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001398:	4b15      	ldr	r3, [pc, #84]	; (1a0013f0 <Chip_Clock_GetMainPLLHz+0x68>)
1a00139a:	681b      	ldr	r3, [r3, #0]
1a00139c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00139e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0013a0:	f013 0f01 	tst.w	r3, #1
1a0013a4:	d020      	beq.n	1a0013e8 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a0013a6:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0013aa:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0013ae:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0013b2:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a0013b6:	3301      	adds	r3, #1
	n = nsel + 1;
1a0013b8:	3201      	adds	r2, #1
	p = ptab[psel];
1a0013ba:	f10d 0c08 	add.w	ip, sp, #8
1a0013be:	4461      	add	r1, ip
1a0013c0:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a0013c4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0013c8:	d108      	bne.n	1a0013dc <Chip_Clock_GetMainPLLHz+0x54>
1a0013ca:	b93d      	cbnz	r5, 1a0013dc <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0013cc:	0049      	lsls	r1, r1, #1
1a0013ce:	fbb3 f3f1 	udiv	r3, r3, r1
1a0013d2:	fbb0 f0f2 	udiv	r0, r0, r2
1a0013d6:	fb00 f003 	mul.w	r0, r0, r3
1a0013da:	e003      	b.n	1a0013e4 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a0013dc:	fbb0 f0f2 	udiv	r0, r0, r2
1a0013e0:	fb03 f000 	mul.w	r0, r3, r0
}
1a0013e4:	b003      	add	sp, #12
1a0013e6:	bd30      	pop	{r4, r5, pc}
		return 0;
1a0013e8:	2000      	movs	r0, #0
1a0013ea:	e7fb      	b.n	1a0013e4 <Chip_Clock_GetMainPLLHz+0x5c>
1a0013ec:	40050000 	.word	0x40050000
1a0013f0:	1a002e5c 	.word	0x1a002e5c

1a0013f4 <Chip_Clock_GetDivRate>:
{
1a0013f4:	b538      	push	{r3, r4, r5, lr}
1a0013f6:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0013f8:	4608      	mov	r0, r1
1a0013fa:	f7ff ff0d 	bl	1a001218 <Chip_Clock_GetDividerSource>
1a0013fe:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001400:	4620      	mov	r0, r4
1a001402:	f7ff ff17 	bl	1a001234 <Chip_Clock_GetDividerDivisor>
1a001406:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001408:	4628      	mov	r0, r5
1a00140a:	f7ff ff21 	bl	1a001250 <Chip_Clock_GetClockInputHz>
1a00140e:	3401      	adds	r4, #1
}
1a001410:	fbb0 f0f4 	udiv	r0, r0, r4
1a001414:	bd38      	pop	{r3, r4, r5, pc}
1a001416:	Address 0x1a001416 is out of bounds.


1a001418 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001418:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00141a:	f100 0416 	add.w	r4, r0, #22
1a00141e:	00a4      	lsls	r4, r4, #2
1a001420:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001424:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001428:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a00142a:	281b      	cmp	r0, #27
1a00142c:	d813      	bhi.n	1a001456 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a00142e:	2911      	cmp	r1, #17
1a001430:	d01a      	beq.n	1a001468 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001432:	4d0e      	ldr	r5, [pc, #56]	; (1a00146c <Chip_Clock_SetBaseClock+0x54>)
1a001434:	4025      	ands	r5, r4

			if (autoblocken) {
1a001436:	b10a      	cbz	r2, 1a00143c <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001438:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a00143c:	b10b      	cbz	r3, 1a001442 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a00143e:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001442:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001446:	3016      	adds	r0, #22
1a001448:	0080      	lsls	r0, r0, #2
1a00144a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00144e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001452:	6045      	str	r5, [r0, #4]
1a001454:	e008      	b.n	1a001468 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001456:	f044 0401 	orr.w	r4, r4, #1
1a00145a:	3016      	adds	r0, #22
1a00145c:	0080      	lsls	r0, r0, #2
1a00145e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001462:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001466:	6044      	str	r4, [r0, #4]
	}
}
1a001468:	bc30      	pop	{r4, r5}
1a00146a:	4770      	bx	lr
1a00146c:	e0fff7fe 	.word	0xe0fff7fe

1a001470 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001470:	281b      	cmp	r0, #27
1a001472:	d80c      	bhi.n	1a00148e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001474:	3016      	adds	r0, #22
1a001476:	0080      	lsls	r0, r0, #2
1a001478:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00147c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001480:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a001482:	f010 0f01 	tst.w	r0, #1
1a001486:	d104      	bne.n	1a001492 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001488:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00148c:	4770      	bx	lr
		return CLKINPUT_PD;
1a00148e:	2011      	movs	r0, #17
1a001490:	4770      	bx	lr
		return CLKINPUT_PD;
1a001492:	2011      	movs	r0, #17
}
1a001494:	4770      	bx	lr

1a001496 <Chip_Clock_GetBaseClocktHz>:
{
1a001496:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001498:	f7ff ffea 	bl	1a001470 <Chip_Clock_GetBaseClock>
1a00149c:	f7ff fed8 	bl	1a001250 <Chip_Clock_GetClockInputHz>
}
1a0014a0:	bd08      	pop	{r3, pc}
1a0014a2:	Address 0x1a0014a2 is out of bounds.


1a0014a4 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0014a4:	b971      	cbnz	r1, 1a0014c4 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a0014a6:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0014a8:	b10a      	cbz	r2, 1a0014ae <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0014aa:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0014ae:	2b02      	cmp	r3, #2
1a0014b0:	d00a      	beq.n	1a0014c8 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0014b2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0014b6:	d30a      	bcc.n	1a0014ce <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0014b8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0014bc:	4b06      	ldr	r3, [pc, #24]	; (1a0014d8 <Chip_Clock_EnableOpts+0x34>)
1a0014be:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0014c2:	4770      	bx	lr
		reg |= (1 << 1);
1a0014c4:	2103      	movs	r1, #3
1a0014c6:	e7ef      	b.n	1a0014a8 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0014c8:	f041 0120 	orr.w	r1, r1, #32
1a0014cc:	e7f1      	b.n	1a0014b2 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0014ce:	3020      	adds	r0, #32
1a0014d0:	4b02      	ldr	r3, [pc, #8]	; (1a0014dc <Chip_Clock_EnableOpts+0x38>)
1a0014d2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0014d6:	4770      	bx	lr
1a0014d8:	40052000 	.word	0x40052000
1a0014dc:	40051000 	.word	0x40051000

1a0014e0 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0014e0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0014e4:	d309      	bcc.n	1a0014fa <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0014e6:	4a09      	ldr	r2, [pc, #36]	; (1a00150c <Chip_Clock_Enable+0x2c>)
1a0014e8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0014ec:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0014f0:	f043 0301 	orr.w	r3, r3, #1
1a0014f4:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0014f8:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0014fa:	4a05      	ldr	r2, [pc, #20]	; (1a001510 <Chip_Clock_Enable+0x30>)
1a0014fc:	3020      	adds	r0, #32
1a0014fe:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001502:	f043 0301 	orr.w	r3, r3, #1
1a001506:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00150a:	4770      	bx	lr
1a00150c:	40052000 	.word	0x40052000
1a001510:	40051000 	.word	0x40051000

1a001514 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001514:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001516:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00151a:	d309      	bcc.n	1a001530 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a00151c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001520:	4a0d      	ldr	r2, [pc, #52]	; (1a001558 <Chip_Clock_GetRate+0x44>)
1a001522:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001526:	f014 0f01 	tst.w	r4, #1
1a00152a:	d107      	bne.n	1a00153c <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a00152c:	2000      	movs	r0, #0
	}

	return rate;
}
1a00152e:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001530:	f100 0320 	add.w	r3, r0, #32
1a001534:	4a09      	ldr	r2, [pc, #36]	; (1a00155c <Chip_Clock_GetRate+0x48>)
1a001536:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00153a:	e7f4      	b.n	1a001526 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a00153c:	f7ff fe20 	bl	1a001180 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001540:	f7ff ffa9 	bl	1a001496 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001544:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001548:	d103      	bne.n	1a001552 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00154a:	2301      	movs	r3, #1
		rate = rate / div;
1a00154c:	fbb0 f0f3 	udiv	r0, r0, r3
1a001550:	e7ed      	b.n	1a00152e <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a001552:	2302      	movs	r3, #2
1a001554:	e7fa      	b.n	1a00154c <Chip_Clock_GetRate+0x38>
1a001556:	bf00      	nop
1a001558:	40052000 	.word	0x40052000
1a00155c:	40051000 	.word	0x40051000

1a001560 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001560:	4b09      	ldr	r3, [pc, #36]	; (1a001588 <Chip_UART_GetIndex+0x28>)
1a001562:	4298      	cmp	r0, r3
1a001564:	d009      	beq.n	1a00157a <Chip_UART_GetIndex+0x1a>
1a001566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00156a:	4298      	cmp	r0, r3
1a00156c:	d007      	beq.n	1a00157e <Chip_UART_GetIndex+0x1e>
1a00156e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a001572:	4298      	cmp	r0, r3
1a001574:	d005      	beq.n	1a001582 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a001576:	2000      	movs	r0, #0
1a001578:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00157a:	2002      	movs	r0, #2
1a00157c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00157e:	2003      	movs	r0, #3
1a001580:	4770      	bx	lr
			return 1;
1a001582:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a001584:	4770      	bx	lr
1a001586:	bf00      	nop
1a001588:	400c1000 	.word	0x400c1000

1a00158c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00158c:	b530      	push	{r4, r5, lr}
1a00158e:	b083      	sub	sp, #12
1a001590:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a001592:	f7ff ffe5 	bl	1a001560 <Chip_UART_GetIndex>
1a001596:	2301      	movs	r3, #1
1a001598:	461a      	mov	r2, r3
1a00159a:	4619      	mov	r1, r3
1a00159c:	4d0e      	ldr	r5, [pc, #56]	; (1a0015d8 <Chip_UART_Init+0x4c>)
1a00159e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0015a2:	f7ff ff7f 	bl	1a0014a4 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0015a6:	2307      	movs	r3, #7
1a0015a8:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0015aa:	2300      	movs	r3, #0
1a0015ac:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0015ae:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0015b0:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0015b2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0015b4:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0015b6:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0015b8:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0015ba:	4b08      	ldr	r3, [pc, #32]	; (1a0015dc <Chip_UART_Init+0x50>)
1a0015bc:	429c      	cmp	r4, r3
1a0015be:	d006      	beq.n	1a0015ce <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0015c0:	2303      	movs	r3, #3
1a0015c2:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0015c4:	2310      	movs	r3, #16
1a0015c6:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0015c8:	9b01      	ldr	r3, [sp, #4]
}
1a0015ca:	b003      	add	sp, #12
1a0015cc:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0015ce:	2300      	movs	r3, #0
1a0015d0:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0015d2:	69a3      	ldr	r3, [r4, #24]
1a0015d4:	9301      	str	r3, [sp, #4]
1a0015d6:	e7f3      	b.n	1a0015c0 <Chip_UART_Init+0x34>
1a0015d8:	1a002edc 	.word	0x1a002edc
1a0015dc:	40082000 	.word	0x40082000

1a0015e0 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0015e0:	b538      	push	{r3, r4, r5, lr}
1a0015e2:	4605      	mov	r5, r0
1a0015e4:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0015e6:	f7ff ffbb 	bl	1a001560 <Chip_UART_GetIndex>
1a0015ea:	4b0c      	ldr	r3, [pc, #48]	; (1a00161c <Chip_UART_SetBaud+0x3c>)
1a0015ec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0015f0:	f7ff ff90 	bl	1a001514 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a0015f4:	0123      	lsls	r3, r4, #4
1a0015f6:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a0015fa:	b2d9      	uxtb	r1, r3
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0015fc:	68ea      	ldr	r2, [r5, #12]
1a0015fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a001602:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001604:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a001606:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a00160a:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00160c:	68ea      	ldr	r2, [r5, #12]
1a00160e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a001612:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a001614:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a001618:	0900      	lsrs	r0, r0, #4
1a00161a:	bd38      	pop	{r3, r4, r5, pc}
1a00161c:	1a002ed4 	.word	0x1a002ed4

1a001620 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001624:	b083      	sub	sp, #12
1a001626:	9001      	str	r0, [sp, #4]
1a001628:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00162a:	f7ff ff99 	bl	1a001560 <Chip_UART_GetIndex>
1a00162e:	4b32      	ldr	r3, [pc, #200]	; (1a0016f8 <Chip_UART_SetBaudFDR+0xd8>)
1a001630:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001634:	f7ff ff6e 	bl	1a001514 <Chip_Clock_GetRate>
1a001638:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00163a:	f04f 37ff 	mov.w	r7, #4294967295

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00163e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001640:	f04f 0b00 	mov.w	fp, #0
1a001644:	46a2      	mov	sl, r4
1a001646:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a001648:	e02a      	b.n	1a0016a0 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00164a:	4242      	negs	r2, r0
				div ++;
1a00164c:	1c4b      	adds	r3, r1, #1
1a00164e:	e017      	b.n	1a001680 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a001650:	b30a      	cbz	r2, 1a001696 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a001652:	4617      	mov	r7, r2
			sd = d;
1a001654:	46ab      	mov	fp, r5
			sm = m;
1a001656:	46a2      	mov	sl, r4
			sdiv = div;
1a001658:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00165a:	3501      	adds	r5, #1
1a00165c:	42ac      	cmp	r4, r5
1a00165e:	d91e      	bls.n	1a00169e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001660:	0933      	lsrs	r3, r6, #4
1a001662:	0730      	lsls	r0, r6, #28
1a001664:	fba4 0100 	umull	r0, r1, r4, r0
1a001668:	fb04 1103 	mla	r1, r4, r3, r1
1a00166c:	1962      	adds	r2, r4, r5
1a00166e:	fb08 f202 	mul.w	r2, r8, r2
1a001672:	2300      	movs	r3, #0
1a001674:	f001 f918 	bl	1a0028a8 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a001678:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00167a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00167c:	2800      	cmp	r0, #0
1a00167e:	dbe4      	blt.n	1a00164a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001680:	4297      	cmp	r7, r2
1a001682:	d3ea      	bcc.n	1a00165a <Chip_UART_SetBaudFDR+0x3a>
1a001684:	2b00      	cmp	r3, #0
1a001686:	d0e8      	beq.n	1a00165a <Chip_UART_SetBaudFDR+0x3a>
1a001688:	0c19      	lsrs	r1, r3, #16
1a00168a:	d1e6      	bne.n	1a00165a <Chip_UART_SetBaudFDR+0x3a>
1a00168c:	2b02      	cmp	r3, #2
1a00168e:	d8df      	bhi.n	1a001650 <Chip_UART_SetBaudFDR+0x30>
1a001690:	2d00      	cmp	r5, #0
1a001692:	d0dd      	beq.n	1a001650 <Chip_UART_SetBaudFDR+0x30>
1a001694:	e7e1      	b.n	1a00165a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a001696:	4617      	mov	r7, r2
			sd = d;
1a001698:	46ab      	mov	fp, r5
			sm = m;
1a00169a:	46a2      	mov	sl, r4
			sdiv = div;
1a00169c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00169e:	3401      	adds	r4, #1
1a0016a0:	b11f      	cbz	r7, 1a0016aa <Chip_UART_SetBaudFDR+0x8a>
1a0016a2:	2c0f      	cmp	r4, #15
1a0016a4:	d801      	bhi.n	1a0016aa <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0016a6:	2500      	movs	r5, #0
1a0016a8:	e7d8      	b.n	1a00165c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0016aa:	f1b9 0f00 	cmp.w	r9, #0
1a0016ae:	d01e      	beq.n	1a0016ee <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0016b0:	9a01      	ldr	r2, [sp, #4]
1a0016b2:	4611      	mov	r1, r2
1a0016b4:	68d3      	ldr	r3, [r2, #12]
1a0016b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0016ba:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a0016bc:	fa5f f389 	uxtb.w	r3, r9
1a0016c0:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a0016c2:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0016c6:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0016c8:	68d3      	ldr	r3, [r2, #12]
1a0016ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0016ce:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0016d0:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0016d4:	b2db      	uxtb	r3, r3
1a0016d6:	f00b 020f 	and.w	r2, fp, #15
1a0016da:	4313      	orrs	r3, r2
1a0016dc:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0016de:	0933      	lsrs	r3, r6, #4
1a0016e0:	fb0a f303 	mul.w	r3, sl, r3
1a0016e4:	44da      	add	sl, fp
1a0016e6:	fb09 f90a 	mul.w	r9, r9, sl
1a0016ea:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0016ee:	4648      	mov	r0, r9
1a0016f0:	b003      	add	sp, #12
1a0016f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0016f6:	bf00      	nop
1a0016f8:	1a002ed4 	.word	0x1a002ed4

1a0016fc <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0016fc:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0016fe:	4a0b      	ldr	r2, [pc, #44]	; (1a00172c <SystemInit+0x30>)
1a001700:	4b0b      	ldr	r3, [pc, #44]	; (1a001730 <SystemInit+0x34>)
1a001702:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a001704:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001708:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00170a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00170e:	2b20      	cmp	r3, #32
1a001710:	d004      	beq.n	1a00171c <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a001712:	f7ff f97f 	bl	1a000a14 <Board_SystemInit>
   Board_Init();
1a001716:	f7ff fa3d 	bl	1a000b94 <Board_Init>
}
1a00171a:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a00171c:	4a04      	ldr	r2, [pc, #16]	; (1a001730 <SystemInit+0x34>)
1a00171e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a001722:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001726:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00172a:	e7f2      	b.n	1a001712 <SystemInit+0x16>
1a00172c:	1a000000 	.word	0x1a000000
1a001730:	e000ed00 	.word	0xe000ed00

1a001734 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001734:	4b04      	ldr	r3, [pc, #16]	; (1a001748 <cyclesCounterInit+0x14>)
1a001736:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a001738:	4a04      	ldr	r2, [pc, #16]	; (1a00174c <cyclesCounterInit+0x18>)
1a00173a:	6813      	ldr	r3, [r2, #0]
1a00173c:	f043 0301 	orr.w	r3, r3, #1
1a001740:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a001742:	2001      	movs	r0, #1
1a001744:	4770      	bx	lr
1a001746:	bf00      	nop
1a001748:	10000038 	.word	0x10000038
1a00174c:	e0001000 	.word	0xe0001000

1a001750 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001750:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a001752:	4d0b      	ldr	r5, [pc, #44]	; (1a001780 <gpioObtainPinInit+0x30>)
1a001754:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001758:	182c      	adds	r4, r5, r0
1a00175a:	5628      	ldrsb	r0, [r5, r0]
1a00175c:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00175e:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a001762:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001764:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001768:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00176a:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00176e:	9b02      	ldr	r3, [sp, #8]
1a001770:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001772:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a001776:	9b03      	ldr	r3, [sp, #12]
1a001778:	701a      	strb	r2, [r3, #0]
}
1a00177a:	bc30      	pop	{r4, r5}
1a00177c:	4770      	bx	lr
1a00177e:	bf00      	nop
1a001780:	1a002ee4 	.word	0x1a002ee4

1a001784 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a001784:	f110 0f02 	cmn.w	r0, #2
1a001788:	f000 80c7 	beq.w	1a00191a <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a00178c:	f1b0 3fff 	cmp.w	r0, #4294967295
1a001790:	f000 80c5 	beq.w	1a00191e <gpioInit+0x19a>
{
1a001794:	b570      	push	{r4, r5, r6, lr}
1a001796:	b084      	sub	sp, #16
1a001798:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00179a:	2300      	movs	r3, #0
1a00179c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0017a0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0017a4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0017a8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0017ac:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0017b0:	f10d 030b 	add.w	r3, sp, #11
1a0017b4:	9301      	str	r3, [sp, #4]
1a0017b6:	ab03      	add	r3, sp, #12
1a0017b8:	9300      	str	r3, [sp, #0]
1a0017ba:	f10d 030d 	add.w	r3, sp, #13
1a0017be:	f10d 020e 	add.w	r2, sp, #14
1a0017c2:	f10d 010f 	add.w	r1, sp, #15
1a0017c6:	f7ff ffc3 	bl	1a001750 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0017ca:	2c05      	cmp	r4, #5
1a0017cc:	f200 80a9 	bhi.w	1a001922 <gpioInit+0x19e>
1a0017d0:	e8df f004 	tbb	[pc, r4]
1a0017d4:	45278109 	.word	0x45278109
1a0017d8:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0017da:	4853      	ldr	r0, [pc, #332]	; (1a001928 <gpioInit+0x1a4>)
1a0017dc:	f7ff fad6 	bl	1a000d8c <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0017e0:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0017e2:	b004      	add	sp, #16
1a0017e4:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0017e6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0017ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0017ee:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0017f2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0017f6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0017fa:	494c      	ldr	r1, [pc, #304]	; (1a00192c <gpioInit+0x1a8>)
1a0017fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001800:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001804:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001808:	2001      	movs	r0, #1
1a00180a:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a00180e:	4c46      	ldr	r4, [pc, #280]	; (1a001928 <gpioInit+0x1a4>)
1a001810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001814:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001818:	ea22 0201 	bic.w	r2, r2, r1
1a00181c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001820:	e7df      	b.n	1a0017e2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001822:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001826:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00182a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00182e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001832:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001836:	493d      	ldr	r1, [pc, #244]	; (1a00192c <gpioInit+0x1a8>)
1a001838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00183c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001840:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001844:	2001      	movs	r0, #1
1a001846:	fa00 f102 	lsl.w	r1, r0, r2
1a00184a:	4c37      	ldr	r4, [pc, #220]	; (1a001928 <gpioInit+0x1a4>)
1a00184c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001850:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001854:	ea22 0201 	bic.w	r2, r2, r1
1a001858:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00185c:	e7c1      	b.n	1a0017e2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00185e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001862:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001866:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00186a:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00186e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001872:	492e      	ldr	r1, [pc, #184]	; (1a00192c <gpioInit+0x1a8>)
1a001874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001878:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00187c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001880:	2001      	movs	r0, #1
1a001882:	fa00 f102 	lsl.w	r1, r0, r2
1a001886:	4c28      	ldr	r4, [pc, #160]	; (1a001928 <gpioInit+0x1a4>)
1a001888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00188c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001890:	ea22 0201 	bic.w	r2, r2, r1
1a001894:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001898:	e7a3      	b.n	1a0017e2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00189a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00189e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0018a2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0018a6:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0018aa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0018ae:	491f      	ldr	r1, [pc, #124]	; (1a00192c <gpioInit+0x1a8>)
1a0018b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0018b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0018b8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0018bc:	2001      	movs	r0, #1
1a0018be:	fa00 f102 	lsl.w	r1, r0, r2
1a0018c2:	4c19      	ldr	r4, [pc, #100]	; (1a001928 <gpioInit+0x1a4>)
1a0018c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0018c8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0018cc:	ea22 0201 	bic.w	r2, r2, r1
1a0018d0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0018d4:	e785      	b.n	1a0017e2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0018d6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0018da:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0018de:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0018e2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0018e6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0018ea:	4910      	ldr	r1, [pc, #64]	; (1a00192c <gpioInit+0x1a8>)
1a0018ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0018f0:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0018f4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0018f8:	2001      	movs	r0, #1
1a0018fa:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0018fe:	4b0a      	ldr	r3, [pc, #40]	; (1a001928 <gpioInit+0x1a4>)
1a001900:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001904:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a001908:	4331      	orrs	r1, r6
1a00190a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00190e:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001910:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001914:	2100      	movs	r1, #0
1a001916:	5499      	strb	r1, [r3, r2]
1a001918:	e763      	b.n	1a0017e2 <gpioInit+0x5e>
	  return FALSE;
1a00191a:	2000      	movs	r0, #0
1a00191c:	4770      	bx	lr
	  return FALSE;
1a00191e:	2000      	movs	r0, #0
}
1a001920:	4770      	bx	lr
      ret_val = 0;
1a001922:	2000      	movs	r0, #0
1a001924:	e75d      	b.n	1a0017e2 <gpioInit+0x5e>
1a001926:	bf00      	nop
1a001928:	400f4000 	.word	0x400f4000
1a00192c:	40086000 	.word	0x40086000

1a001930 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a001930:	f110 0f02 	cmn.w	r0, #2
1a001934:	d02d      	beq.n	1a001992 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a001936:	f1b0 3fff 	cmp.w	r0, #4294967295
1a00193a:	d02c      	beq.n	1a001996 <gpioWrite+0x66>
{
1a00193c:	b510      	push	{r4, lr}
1a00193e:	b084      	sub	sp, #16
1a001940:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001942:	2300      	movs	r3, #0
1a001944:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001948:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00194c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001950:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001954:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001958:	f10d 030b 	add.w	r3, sp, #11
1a00195c:	9301      	str	r3, [sp, #4]
1a00195e:	ab03      	add	r3, sp, #12
1a001960:	9300      	str	r3, [sp, #0]
1a001962:	f10d 030d 	add.w	r3, sp, #13
1a001966:	f10d 020e 	add.w	r2, sp, #14
1a00196a:	f10d 010f 	add.w	r1, sp, #15
1a00196e:	f7ff feef 	bl	1a001750 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001972:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001976:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00197a:	1c21      	adds	r1, r4, #0
1a00197c:	bf18      	it	ne
1a00197e:	2101      	movne	r1, #1
1a001980:	015b      	lsls	r3, r3, #5
1a001982:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001986:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00198a:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a00198c:	2001      	movs	r0, #1
}
1a00198e:	b004      	add	sp, #16
1a001990:	bd10      	pop	{r4, pc}
	  return FALSE;
1a001992:	2000      	movs	r0, #0
1a001994:	4770      	bx	lr
	  return FALSE;
1a001996:	2000      	movs	r0, #0
}
1a001998:	4770      	bx	lr

1a00199a <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a00199a:	e7fe      	b.n	1a00199a <errorOcurred>

1a00199c <doNothing>:
}

static void doNothing( void* ptr )
{
}
1a00199c:	4770      	bx	lr
1a00199e:	Address 0x1a00199e is out of bounds.


1a0019a0 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a0019a0:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0019a2:	2400      	movs	r4, #0
1a0019a4:	e001      	b.n	1a0019aa <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0019a6:	3401      	adds	r4, #1
1a0019a8:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0019aa:	2c03      	cmp	r4, #3
1a0019ac:	d812      	bhi.n	1a0019d4 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a0019ae:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0019b0:	4b09      	ldr	r3, [pc, #36]	; (1a0019d8 <TIMER0_IRQHandler+0x38>)
1a0019b2:	681a      	ldr	r2, [r3, #0]
1a0019b4:	f004 010f 	and.w	r1, r4, #15
1a0019b8:	2301      	movs	r3, #1
1a0019ba:	408b      	lsls	r3, r1
1a0019bc:	421a      	tst	r2, r3
1a0019be:	d0f2      	beq.n	1a0019a6 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0019c0:	4b06      	ldr	r3, [pc, #24]	; (1a0019dc <TIMER0_IRQHandler+0x3c>)
1a0019c2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a0019c6:	2000      	movs	r0, #0
1a0019c8:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0019ca:	2301      	movs	r3, #1
1a0019cc:	40ab      	lsls	r3, r5
1a0019ce:	4a02      	ldr	r2, [pc, #8]	; (1a0019d8 <TIMER0_IRQHandler+0x38>)
1a0019d0:	6013      	str	r3, [r2, #0]
1a0019d2:	e7e8      	b.n	1a0019a6 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a0019d4:	bd38      	pop	{r3, r4, r5, pc}
1a0019d6:	bf00      	nop
1a0019d8:	40084000 	.word	0x40084000
1a0019dc:	1000003c 	.word	0x1000003c

1a0019e0 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a0019e0:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0019e2:	2400      	movs	r4, #0
1a0019e4:	e001      	b.n	1a0019ea <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0019e6:	3401      	adds	r4, #1
1a0019e8:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0019ea:	2c03      	cmp	r4, #3
1a0019ec:	d813      	bhi.n	1a001a16 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a0019ee:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0019f0:	4b09      	ldr	r3, [pc, #36]	; (1a001a18 <TIMER1_IRQHandler+0x38>)
1a0019f2:	681a      	ldr	r2, [r3, #0]
1a0019f4:	f004 010f 	and.w	r1, r4, #15
1a0019f8:	2301      	movs	r3, #1
1a0019fa:	408b      	lsls	r3, r1
1a0019fc:	421a      	tst	r2, r3
1a0019fe:	d0f2      	beq.n	1a0019e6 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001a00:	1d23      	adds	r3, r4, #4
1a001a02:	4a06      	ldr	r2, [pc, #24]	; (1a001a1c <TIMER1_IRQHandler+0x3c>)
1a001a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001a08:	2000      	movs	r0, #0
1a001a0a:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001a0c:	2301      	movs	r3, #1
1a001a0e:	40ab      	lsls	r3, r5
1a001a10:	4a01      	ldr	r2, [pc, #4]	; (1a001a18 <TIMER1_IRQHandler+0x38>)
1a001a12:	6013      	str	r3, [r2, #0]
1a001a14:	e7e7      	b.n	1a0019e6 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a001a16:	bd38      	pop	{r3, r4, r5, pc}
1a001a18:	40085000 	.word	0x40085000
1a001a1c:	1000003c 	.word	0x1000003c

1a001a20 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a001a20:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001a22:	2400      	movs	r4, #0
1a001a24:	e001      	b.n	1a001a2a <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001a26:	3401      	adds	r4, #1
1a001a28:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001a2a:	2c03      	cmp	r4, #3
1a001a2c:	d814      	bhi.n	1a001a58 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a001a2e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001a30:	4b0a      	ldr	r3, [pc, #40]	; (1a001a5c <TIMER2_IRQHandler+0x3c>)
1a001a32:	681a      	ldr	r2, [r3, #0]
1a001a34:	f004 010f 	and.w	r1, r4, #15
1a001a38:	2301      	movs	r3, #1
1a001a3a:	408b      	lsls	r3, r1
1a001a3c:	421a      	tst	r2, r3
1a001a3e:	d0f2      	beq.n	1a001a26 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001a40:	f104 0308 	add.w	r3, r4, #8
1a001a44:	4a06      	ldr	r2, [pc, #24]	; (1a001a60 <TIMER2_IRQHandler+0x40>)
1a001a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001a4a:	2000      	movs	r0, #0
1a001a4c:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001a4e:	2301      	movs	r3, #1
1a001a50:	40ab      	lsls	r3, r5
1a001a52:	4a02      	ldr	r2, [pc, #8]	; (1a001a5c <TIMER2_IRQHandler+0x3c>)
1a001a54:	6013      	str	r3, [r2, #0]
1a001a56:	e7e6      	b.n	1a001a26 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a001a58:	bd38      	pop	{r3, r4, r5, pc}
1a001a5a:	bf00      	nop
1a001a5c:	400c3000 	.word	0x400c3000
1a001a60:	1000003c 	.word	0x1000003c

1a001a64 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a001a64:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001a66:	2400      	movs	r4, #0
1a001a68:	e001      	b.n	1a001a6e <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001a6a:	3401      	adds	r4, #1
1a001a6c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001a6e:	2c03      	cmp	r4, #3
1a001a70:	d814      	bhi.n	1a001a9c <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a001a72:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001a74:	4b0a      	ldr	r3, [pc, #40]	; (1a001aa0 <TIMER3_IRQHandler+0x3c>)
1a001a76:	681a      	ldr	r2, [r3, #0]
1a001a78:	f004 010f 	and.w	r1, r4, #15
1a001a7c:	2301      	movs	r3, #1
1a001a7e:	408b      	lsls	r3, r1
1a001a80:	421a      	tst	r2, r3
1a001a82:	d0f2      	beq.n	1a001a6a <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001a84:	f104 030c 	add.w	r3, r4, #12
1a001a88:	4a06      	ldr	r2, [pc, #24]	; (1a001aa4 <TIMER3_IRQHandler+0x40>)
1a001a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001a8e:	2000      	movs	r0, #0
1a001a90:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001a92:	2301      	movs	r3, #1
1a001a94:	40ab      	lsls	r3, r5
1a001a96:	4a02      	ldr	r2, [pc, #8]	; (1a001aa0 <TIMER3_IRQHandler+0x3c>)
1a001a98:	6013      	str	r3, [r2, #0]
1a001a9a:	e7e6      	b.n	1a001a6a <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a001a9c:	bd38      	pop	{r3, r4, r5, pc}
1a001a9e:	bf00      	nop
1a001aa0:	400c4000 	.word	0x400c4000
1a001aa4:	1000003c 	.word	0x1000003c

1a001aa8 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a001aa8:	4b01      	ldr	r3, [pc, #4]	; (1a001ab0 <tickRead+0x8>)
1a001aaa:	e9d3 0100 	ldrd	r0, r1, [r3]
1a001aae:	4770      	bx	lr
1a001ab0:	10000128 	.word	0x10000128

1a001ab4 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a001ab4:	b118      	cbz	r0, 1a001abe <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001ab6:	4b04      	ldr	r3, [pc, #16]	; (1a001ac8 <tickPowerSet+0x14>)
1a001ab8:	2207      	movs	r2, #7
1a001aba:	601a      	str	r2, [r3, #0]
1a001abc:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a001abe:	4b02      	ldr	r3, [pc, #8]	; (1a001ac8 <tickPowerSet+0x14>)
1a001ac0:	2200      	movs	r2, #0
1a001ac2:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a001ac4:	4770      	bx	lr
1a001ac6:	bf00      	nop
1a001ac8:	e000e010 	.word	0xe000e010

1a001acc <tickInit>:
{
1a001acc:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a001ace:	ea50 0401 	orrs.w	r4, r0, r1
1a001ad2:	d02a      	beq.n	1a001b2a <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001ad4:	f110 32ff 	adds.w	r2, r0, #4294967295
1a001ad8:	f141 33ff 	adc.w	r3, r1, #4294967295
1a001adc:	2b00      	cmp	r3, #0
1a001ade:	bf08      	it	eq
1a001ae0:	2a32      	cmpeq	r2, #50	; 0x32
1a001ae2:	d227      	bcs.n	1a001b34 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001ae4:	4b14      	ldr	r3, [pc, #80]	; (1a001b38 <tickInit+0x6c>)
1a001ae6:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a001aea:	4b14      	ldr	r3, [pc, #80]	; (1a001b3c <tickInit+0x70>)
1a001aec:	681b      	ldr	r3, [r3, #0]
1a001aee:	fba3 4500 	umull	r4, r5, r3, r0
1a001af2:	fb03 5501 	mla	r5, r3, r1, r5
1a001af6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001afa:	2300      	movs	r3, #0
1a001afc:	4620      	mov	r0, r4
1a001afe:	4629      	mov	r1, r5
1a001b00:	f000 fed2 	bl	1a0028a8 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001b04:	3801      	subs	r0, #1
1a001b06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001b0a:	d209      	bcs.n	1a001b20 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001b0c:	4b0c      	ldr	r3, [pc, #48]	; (1a001b40 <tickInit+0x74>)
1a001b0e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001b10:	4a0c      	ldr	r2, [pc, #48]	; (1a001b44 <tickInit+0x78>)
1a001b12:	21e0      	movs	r1, #224	; 0xe0
1a001b14:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a001b18:	2200      	movs	r2, #0
1a001b1a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001b1c:	2207      	movs	r2, #7
1a001b1e:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001b20:	2001      	movs	r0, #1
1a001b22:	f7ff ffc7 	bl	1a001ab4 <tickPowerSet>
      bool_t ret_val = 1;
1a001b26:	2001      	movs	r0, #1
}
1a001b28:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a001b2a:	2000      	movs	r0, #0
1a001b2c:	f7ff ffc2 	bl	1a001ab4 <tickPowerSet>
         ret_val = 0;
1a001b30:	2000      	movs	r0, #0
1a001b32:	e7f9      	b.n	1a001b28 <tickInit+0x5c>
            ret_val = 0;
1a001b34:	2000      	movs	r0, #0
1a001b36:	e7f7      	b.n	1a001b28 <tickInit+0x5c>
1a001b38:	10000080 	.word	0x10000080
1a001b3c:	10000154 	.word	0x10000154
1a001b40:	e000e010 	.word	0xe000e010
1a001b44:	e000ed00 	.word	0xe000ed00

1a001b48 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001b48:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a001b4a:	4a07      	ldr	r2, [pc, #28]	; (1a001b68 <SysTick_Handler+0x20>)
1a001b4c:	6813      	ldr	r3, [r2, #0]
1a001b4e:	6851      	ldr	r1, [r2, #4]
1a001b50:	3301      	adds	r3, #1
1a001b52:	f141 0100 	adc.w	r1, r1, #0
1a001b56:	6013      	str	r3, [r2, #0]
1a001b58:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001b5a:	4b04      	ldr	r3, [pc, #16]	; (1a001b6c <SysTick_Handler+0x24>)
1a001b5c:	681b      	ldr	r3, [r3, #0]
1a001b5e:	b113      	cbz	r3, 1a001b66 <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a001b60:	4a03      	ldr	r2, [pc, #12]	; (1a001b70 <SysTick_Handler+0x28>)
1a001b62:	6810      	ldr	r0, [r2, #0]
1a001b64:	4798      	blx	r3
   }
}
1a001b66:	bd08      	pop	{r3, pc}
1a001b68:	10000128 	.word	0x10000128
1a001b6c:	10000130 	.word	0x10000130
1a001b70:	10000124 	.word	0x10000124

1a001b74 <pwmInitTimers>:
 * @Brief:   Initializes the pwm timers.
 * @param   none
 * @return   nothing
 */
static void pwmInitTimers(void)
{
1a001b74:	b508      	push	{r3, lr}
   Sct_Init(PWM_FREC);
1a001b76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a001b7a:	f000 f94e 	bl	1a001e1a <Sct_Init>
}
1a001b7e:	bd08      	pop	{r3, pc}

1a001b80 <pwmIsAttached>:
 * @param:   pwmNumber:   ID of the pwm, from 0 to 10
 * @return:   position (1 ~ PWM_TOTALNUMBER), 0 if the element was not found.
 */
uint8_t pwmIsAttached( pwmMap_t pwmNumber )
{
   uint8_t position = 0, positionInList = 0;
1a001b80:	2300      	movs	r3, #0
   while ( (position < PWM_TOTALNUMBER) &&
1a001b82:	2b0a      	cmp	r3, #10
1a001b84:	d806      	bhi.n	1a001b94 <pwmIsAttached+0x14>
           (pwmNumber != AttachedPWMList[position]) ) {
1a001b86:	4a07      	ldr	r2, [pc, #28]	; (1a001ba4 <pwmIsAttached+0x24>)
1a001b88:	5cd2      	ldrb	r2, [r2, r3]
   while ( (position < PWM_TOTALNUMBER) &&
1a001b8a:	4282      	cmp	r2, r0
1a001b8c:	d002      	beq.n	1a001b94 <pwmIsAttached+0x14>
      position++;
1a001b8e:	3301      	adds	r3, #1
1a001b90:	b2db      	uxtb	r3, r3
1a001b92:	e7f6      	b.n	1a001b82 <pwmIsAttached+0x2>
   }

   if (position < PWM_TOTALNUMBER) {
1a001b94:	2b0a      	cmp	r3, #10
1a001b96:	d802      	bhi.n	1a001b9e <pwmIsAttached+0x1e>
      positionInList = position + 1;
1a001b98:	1c58      	adds	r0, r3, #1
1a001b9a:	b2c0      	uxtb	r0, r0
1a001b9c:	4770      	bx	lr
   } else {
      positionInList = 0;
1a001b9e:	2000      	movs	r0, #0
   }

   return positionInList;
}
1a001ba0:	4770      	bx	lr
1a001ba2:	bf00      	nop
1a001ba4:	10000088 	.word	0x10000088

1a001ba8 <pwmWrite>:
{
1a001ba8:	b538      	push	{r3, r4, r5, lr}
1a001baa:	4604      	mov	r4, r0
1a001bac:	460d      	mov	r5, r1
   position = pwmIsAttached(pwmNumber);
1a001bae:	f7ff ffe7 	bl	1a001b80 <pwmIsAttached>
   if(position) {
1a001bb2:	b908      	cbnz	r0, 1a001bb8 <pwmWrite+0x10>
   bool_t success = FALSE;
1a001bb4:	2000      	movs	r0, #0
}
1a001bb6:	bd38      	pop	{r3, r4, r5, pc}
      Sct_SetDutyCycle(pwmMap[pwmNumber], value);
1a001bb8:	4629      	mov	r1, r5
1a001bba:	4b03      	ldr	r3, [pc, #12]	; (1a001bc8 <pwmWrite+0x20>)
1a001bbc:	5d18      	ldrb	r0, [r3, r4]
1a001bbe:	f000 f94d 	bl	1a001e5c <Sct_SetDutyCycle>
      success = TRUE;
1a001bc2:	2001      	movs	r0, #1
1a001bc4:	e7f7      	b.n	1a001bb6 <pwmWrite+0xe>
1a001bc6:	bf00      	nop
1a001bc8:	1a002fcc 	.word	0x1a002fcc

1a001bcc <pwmAttach>:
{
1a001bcc:	b510      	push	{r4, lr}
1a001bce:	4604      	mov	r4, r0
   position = pwmIsAttached(pwmNumber);
1a001bd0:	f7ff ffd6 	bl	1a001b80 <pwmIsAttached>
   if(position==0) {
1a001bd4:	b970      	cbnz	r0, 1a001bf4 <pwmAttach+0x28>
      position = pwmIsAttached(EMPTY_POSITION); /* Searches for the first empty position */
1a001bd6:	20ff      	movs	r0, #255	; 0xff
1a001bd8:	f7ff ffd2 	bl	1a001b80 <pwmIsAttached>
      if(position) { /* if position==0 => there is no room in the list for another pwm */
1a001bdc:	b908      	cbnz	r0, 1a001be2 <pwmAttach+0x16>
   bool_t success = FALSE;
1a001bde:	2000      	movs	r0, #0
1a001be0:	e009      	b.n	1a001bf6 <pwmAttach+0x2a>
         AttachedPWMList[position-1] = pwmNumber;
1a001be2:	1e43      	subs	r3, r0, #1
1a001be4:	4a04      	ldr	r2, [pc, #16]	; (1a001bf8 <pwmAttach+0x2c>)
1a001be6:	54d4      	strb	r4, [r2, r3]
         Sct_EnablePwmFor(pwmMap[pwmNumber]);
1a001be8:	4b04      	ldr	r3, [pc, #16]	; (1a001bfc <pwmAttach+0x30>)
1a001bea:	5d18      	ldrb	r0, [r3, r4]
1a001bec:	f000 f942 	bl	1a001e74 <Sct_EnablePwmFor>
         success = TRUE;
1a001bf0:	2001      	movs	r0, #1
1a001bf2:	e000      	b.n	1a001bf6 <pwmAttach+0x2a>
   bool_t success = FALSE;
1a001bf4:	2000      	movs	r0, #0
}
1a001bf6:	bd10      	pop	{r4, pc}
1a001bf8:	10000088 	.word	0x10000088
1a001bfc:	1a002fcc 	.word	0x1a002fcc

1a001c00 <pwmDetach>:
{
1a001c00:	b508      	push	{r3, lr}
   position = pwmIsAttached(pwmNumber);
1a001c02:	f7ff ffbd 	bl	1a001b80 <pwmIsAttached>
   if(position) {
1a001c06:	b128      	cbz	r0, 1a001c14 <pwmDetach+0x14>
      AttachedPWMList[position-1] = EMPTY_POSITION;
1a001c08:	1e43      	subs	r3, r0, #1
1a001c0a:	4a03      	ldr	r2, [pc, #12]	; (1a001c18 <pwmDetach+0x18>)
1a001c0c:	21ff      	movs	r1, #255	; 0xff
1a001c0e:	54d1      	strb	r1, [r2, r3]
      success = TRUE;
1a001c10:	2001      	movs	r0, #1
1a001c12:	e000      	b.n	1a001c16 <pwmDetach+0x16>
   bool_t success = FALSE;
1a001c14:	2000      	movs	r0, #0
}
1a001c16:	bd08      	pop	{r3, pc}
1a001c18:	10000088 	.word	0x10000088

1a001c1c <pwmInit>:
{
1a001c1c:	b508      	push	{r3, lr}
   switch(config) {
1a001c1e:	2902      	cmp	r1, #2
1a001c20:	d008      	beq.n	1a001c34 <pwmInit+0x18>
1a001c22:	2903      	cmp	r1, #3
1a001c24:	d009      	beq.n	1a001c3a <pwmInit+0x1e>
1a001c26:	b109      	cbz	r1, 1a001c2c <pwmInit+0x10>
      ret_val = 0;
1a001c28:	2000      	movs	r0, #0
}
1a001c2a:	bd08      	pop	{r3, pc}
      pwmInitTimers();
1a001c2c:	f7ff ffa2 	bl	1a001b74 <pwmInitTimers>
   bool_t ret_val = 1;
1a001c30:	2001      	movs	r0, #1
      break;
1a001c32:	e7fa      	b.n	1a001c2a <pwmInit+0xe>
      ret_val = pwmAttach( pwmNumber );
1a001c34:	f7ff ffca 	bl	1a001bcc <pwmAttach>
      break;
1a001c38:	e7f7      	b.n	1a001c2a <pwmInit+0xe>
      ret_val = pwmDetach( pwmNumber );
1a001c3a:	f7ff ffe1 	bl	1a001c00 <pwmDetach>
      break;
1a001c3e:	e7f4      	b.n	1a001c2a <pwmInit+0xe>

1a001c40 <uartProcessIRQ>:
{
1a001c40:	b570      	push	{r4, r5, r6, lr}
1a001c42:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a001c44:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a001c48:	0093      	lsls	r3, r2, #2
1a001c4a:	4a1f      	ldr	r2, [pc, #124]	; (1a001cc8 <uartProcessIRQ+0x88>)
1a001c4c:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a001c4e:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a001c50:	b2ed      	uxtb	r5, r5
1a001c52:	f015 0f01 	tst.w	r5, #1
1a001c56:	d009      	beq.n	1a001c6c <uartProcessIRQ+0x2c>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a001c58:	b920      	cbnz	r0, 1a001c64 <uartProcessIRQ+0x24>
1a001c5a:	4b1c      	ldr	r3, [pc, #112]	; (1a001ccc <uartProcessIRQ+0x8c>)
1a001c5c:	681b      	ldr	r3, [r3, #0]
1a001c5e:	b10b      	cbz	r3, 1a001c64 <uartProcessIRQ+0x24>
         (*rxIsrCallbackUART0)(0);
1a001c60:	2000      	movs	r0, #0
1a001c62:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a001c64:	2c03      	cmp	r4, #3
1a001c66:	d013      	beq.n	1a001c90 <uartProcessIRQ+0x50>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a001c68:	2c05      	cmp	r4, #5
1a001c6a:	d018      	beq.n	1a001c9e <uartProcessIRQ+0x5e>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a001c6c:	f015 0f20 	tst.w	r5, #32
1a001c70:	d00d      	beq.n	1a001c8e <uartProcessIRQ+0x4e>
	return pUART->IER;
1a001c72:	6873      	ldr	r3, [r6, #4]
1a001c74:	f013 0f02 	tst.w	r3, #2
1a001c78:	d009      	beq.n	1a001c8e <uartProcessIRQ+0x4e>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a001c7a:	b924      	cbnz	r4, 1a001c86 <uartProcessIRQ+0x46>
1a001c7c:	4b14      	ldr	r3, [pc, #80]	; (1a001cd0 <uartProcessIRQ+0x90>)
1a001c7e:	681b      	ldr	r3, [r3, #0]
1a001c80:	b10b      	cbz	r3, 1a001c86 <uartProcessIRQ+0x46>
         (*txIsrCallbackUART0)(0);
1a001c82:	2000      	movs	r0, #0
1a001c84:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a001c86:	2c03      	cmp	r4, #3
1a001c88:	d010      	beq.n	1a001cac <uartProcessIRQ+0x6c>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a001c8a:	2c05      	cmp	r4, #5
1a001c8c:	d015      	beq.n	1a001cba <uartProcessIRQ+0x7a>
}
1a001c8e:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a001c90:	4b10      	ldr	r3, [pc, #64]	; (1a001cd4 <uartProcessIRQ+0x94>)
1a001c92:	681b      	ldr	r3, [r3, #0]
1a001c94:	2b00      	cmp	r3, #0
1a001c96:	d0e7      	beq.n	1a001c68 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART2)(0);
1a001c98:	2000      	movs	r0, #0
1a001c9a:	4798      	blx	r3
1a001c9c:	e7e4      	b.n	1a001c68 <uartProcessIRQ+0x28>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a001c9e:	4b0e      	ldr	r3, [pc, #56]	; (1a001cd8 <uartProcessIRQ+0x98>)
1a001ca0:	681b      	ldr	r3, [r3, #0]
1a001ca2:	2b00      	cmp	r3, #0
1a001ca4:	d0e2      	beq.n	1a001c6c <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART3)(0);
1a001ca6:	2000      	movs	r0, #0
1a001ca8:	4798      	blx	r3
1a001caa:	e7df      	b.n	1a001c6c <uartProcessIRQ+0x2c>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a001cac:	4b0b      	ldr	r3, [pc, #44]	; (1a001cdc <uartProcessIRQ+0x9c>)
1a001cae:	681b      	ldr	r3, [r3, #0]
1a001cb0:	2b00      	cmp	r3, #0
1a001cb2:	d0ea      	beq.n	1a001c8a <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART2)(0);
1a001cb4:	2000      	movs	r0, #0
1a001cb6:	4798      	blx	r3
1a001cb8:	e7e7      	b.n	1a001c8a <uartProcessIRQ+0x4a>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a001cba:	4b09      	ldr	r3, [pc, #36]	; (1a001ce0 <uartProcessIRQ+0xa0>)
1a001cbc:	681b      	ldr	r3, [r3, #0]
1a001cbe:	2b00      	cmp	r3, #0
1a001cc0:	d0e5      	beq.n	1a001c8e <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART3)(0);
1a001cc2:	2000      	movs	r0, #0
1a001cc4:	4798      	blx	r3
}
1a001cc6:	e7e2      	b.n	1a001c8e <uartProcessIRQ+0x4e>
1a001cc8:	1a002fd8 	.word	0x1a002fd8
1a001ccc:	10000134 	.word	0x10000134
1a001cd0:	10000140 	.word	0x10000140
1a001cd4:	10000138 	.word	0x10000138
1a001cd8:	1000013c 	.word	0x1000013c
1a001cdc:	10000144 	.word	0x10000144
1a001ce0:	10000148 	.word	0x10000148

1a001ce4 <uartRxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a001ce4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001ce8:	0083      	lsls	r3, r0, #2
1a001cea:	4a03      	ldr	r2, [pc, #12]	; (1a001cf8 <uartRxReady+0x14>)
1a001cec:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a001cee:	6958      	ldr	r0, [r3, #20]
}
1a001cf0:	f000 0001 	and.w	r0, r0, #1
1a001cf4:	4770      	bx	lr
1a001cf6:	bf00      	nop
1a001cf8:	1a002fd8 	.word	0x1a002fd8

1a001cfc <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a001cfc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001d00:	0083      	lsls	r3, r0, #2
1a001d02:	4a03      	ldr	r2, [pc, #12]	; (1a001d10 <uartTxReady+0x14>)
1a001d04:	58d3      	ldr	r3, [r2, r3]
1a001d06:	6958      	ldr	r0, [r3, #20]
}
1a001d08:	f000 0020 	and.w	r0, r0, #32
1a001d0c:	4770      	bx	lr
1a001d0e:	bf00      	nop
1a001d10:	1a002fd8 	.word	0x1a002fd8

1a001d14 <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a001d14:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001d18:	0083      	lsls	r3, r0, #2
1a001d1a:	4a02      	ldr	r2, [pc, #8]	; (1a001d24 <uartRxRead+0x10>)
1a001d1c:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001d1e:	6818      	ldr	r0, [r3, #0]
}
1a001d20:	b2c0      	uxtb	r0, r0
1a001d22:	4770      	bx	lr
1a001d24:	1a002fd8 	.word	0x1a002fd8

1a001d28 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a001d28:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001d2c:	0083      	lsls	r3, r0, #2
1a001d2e:	4a02      	ldr	r2, [pc, #8]	; (1a001d38 <uartTxWrite+0x10>)
1a001d30:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a001d32:	6019      	str	r1, [r3, #0]
}
1a001d34:	4770      	bx	lr
1a001d36:	bf00      	nop
1a001d38:	1a002fd8 	.word	0x1a002fd8

1a001d3c <uartInit>:
{
1a001d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001d40:	4680      	mov	r8, r0
1a001d42:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a001d44:	4c19      	ldr	r4, [pc, #100]	; (1a001dac <uartInit+0x70>)
1a001d46:	0045      	lsls	r5, r0, #1
1a001d48:	182a      	adds	r2, r5, r0
1a001d4a:	0093      	lsls	r3, r2, #2
1a001d4c:	18e6      	adds	r6, r4, r3
1a001d4e:	58e7      	ldr	r7, [r4, r3]
1a001d50:	4638      	mov	r0, r7
1a001d52:	f7ff fc1b 	bl	1a00158c <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a001d56:	4649      	mov	r1, r9
1a001d58:	4638      	mov	r0, r7
1a001d5a:	f7ff fc41 	bl	1a0015e0 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a001d5e:	2307      	movs	r3, #7
1a001d60:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001d62:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a001d64:	2301      	movs	r3, #1
1a001d66:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a001d68:	7930      	ldrb	r0, [r6, #4]
1a001d6a:	7973      	ldrb	r3, [r6, #5]
1a001d6c:	79b2      	ldrb	r2, [r6, #6]
1a001d6e:	f042 0218 	orr.w	r2, r2, #24
1a001d72:	490f      	ldr	r1, [pc, #60]	; (1a001db0 <uartInit+0x74>)
1a001d74:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a001d7c:	79f0      	ldrb	r0, [r6, #7]
1a001d7e:	7a33      	ldrb	r3, [r6, #8]
1a001d80:	7a72      	ldrb	r2, [r6, #9]
1a001d82:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001d86:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a001d8e:	f1b8 0f01 	cmp.w	r8, #1
1a001d92:	d001      	beq.n	1a001d98 <uartInit+0x5c>
}
1a001d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a001d98:	4a06      	ldr	r2, [pc, #24]	; (1a001db4 <uartInit+0x78>)
1a001d9a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a001d9c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a001da0:	64d3      	str	r3, [r2, #76]	; 0x4c
1a001da2:	221a      	movs	r2, #26
1a001da4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a001da8:	e7f4      	b.n	1a001d94 <uartInit+0x58>
1a001daa:	bf00      	nop
1a001dac:	1a002fd8 	.word	0x1a002fd8
1a001db0:	40086000 	.word	0x40086000
1a001db4:	40081000 	.word	0x40081000

1a001db8 <uartReadByte>:
{
1a001db8:	b538      	push	{r3, r4, r5, lr}
1a001dba:	4605      	mov	r5, r0
1a001dbc:	460c      	mov	r4, r1
   if ( uartRxReady(uart) ) {
1a001dbe:	f7ff ff91 	bl	1a001ce4 <uartRxReady>
1a001dc2:	4603      	mov	r3, r0
1a001dc4:	b908      	cbnz	r0, 1a001dca <uartReadByte+0x12>
}
1a001dc6:	4618      	mov	r0, r3
1a001dc8:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a001dca:	4628      	mov	r0, r5
1a001dcc:	f7ff ffa2 	bl	1a001d14 <uartRxRead>
1a001dd0:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a001dd2:	2301      	movs	r3, #1
1a001dd4:	e7f7      	b.n	1a001dc6 <uartReadByte+0xe>

1a001dd6 <uartWriteByte>:
{
1a001dd6:	b538      	push	{r3, r4, r5, lr}
1a001dd8:	4604      	mov	r4, r0
1a001dda:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a001ddc:	4620      	mov	r0, r4
1a001dde:	f7ff ff8d 	bl	1a001cfc <uartTxReady>
1a001de2:	2800      	cmp	r0, #0
1a001de4:	d0fa      	beq.n	1a001ddc <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a001de6:	4629      	mov	r1, r5
1a001de8:	4620      	mov	r0, r4
1a001dea:	f7ff ff9d 	bl	1a001d28 <uartTxWrite>
}
1a001dee:	bd38      	pop	{r3, r4, r5, pc}

1a001df0 <uartWriteString>:
{
1a001df0:	b538      	push	{r3, r4, r5, lr}
1a001df2:	4605      	mov	r5, r0
1a001df4:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a001df6:	7821      	ldrb	r1, [r4, #0]
1a001df8:	b121      	cbz	r1, 1a001e04 <uartWriteString+0x14>
      uartWriteByte( uart, (uint8_t)*str );
1a001dfa:	4628      	mov	r0, r5
1a001dfc:	f7ff ffeb 	bl	1a001dd6 <uartWriteByte>
      str++;
1a001e00:	3401      	adds	r4, #1
1a001e02:	e7f8      	b.n	1a001df6 <uartWriteString+0x6>
}
1a001e04:	bd38      	pop	{r3, r4, r5, pc}

1a001e06 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a001e06:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a001e08:	2003      	movs	r0, #3
1a001e0a:	f7ff ff19 	bl	1a001c40 <uartProcessIRQ>
}
1a001e0e:	bd08      	pop	{r3, pc}

1a001e10 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a001e10:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a001e12:	2005      	movs	r0, #5
1a001e14:	f7ff ff14 	bl	1a001c40 <uartProcessIRQ>
}
1a001e18:	bd08      	pop	{r3, pc}

1a001e1a <Sct_Init>:
 * @brief:   Initialize the SCT peripheral with the given frequency
 * @param:   frequency:   value in Hz
 * @note:   there can only be 1 frequency in all the SCT peripheral.
 */
void Sct_Init(uint32_t frequency)
{
1a001e1a:	b510      	push	{r4, lr}
1a001e1c:	4604      	mov	r4, r0
 * @param	pSCT	: The base of SCT peripheral on the chip
 * @return	None
 */
STATIC INLINE void Chip_SCTPWM_Init(LPC_SCT_T *pSCT)
{
	Chip_SCT_Init(pSCT);
1a001e1e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a001e22:	f7fe ffb4 	bl	1a000d8e <Chip_SCT_Init>
   /* Source: https://www.lpcware.com/content/faq/how-use-sct-standard-pwm-using-lpcopen */
   /* Initialize the SCT as PWM and set frequency */
   Chip_SCTPWM_Init(LPC_SCT);
   Chip_SCTPWM_SetRate(LPC_SCT, frequency);
1a001e26:	4621      	mov	r1, r4
1a001e28:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a001e2c:	f7fe ff4a 	bl	1a000cc4 <Chip_SCTPWM_SetRate>
	pSCT->CTRL_U &= ~(value);
1a001e30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a001e34:	6853      	ldr	r3, [r2, #4]
1a001e36:	f023 1304 	bic.w	r3, r3, #262148	; 0x40004
1a001e3a:	6053      	str	r3, [r2, #4]

   Chip_SCTPWM_Start(LPC_SCT);
}
1a001e3c:	bd10      	pop	{r4, pc}
1a001e3e:	Address 0x1a001e3e is out of bounds.


1a001e40 <Sct_Uint8ToTicks>:
	return pSCT->MATCHREL[0].U;
1a001e40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a001e44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 * @param   value:   8bit value, from 0 to 255
 * @return   Equivalent in Ticks for the LPC4337
 */
uint32_t Sct_Uint8ToTicks(uint8_t value)
{
   return ( (Chip_SCTPWM_GetTicksPerCycle(LPC_SCT) * value)/ 255 );
1a001e48:	fb03 f000 	mul.w	r0, r3, r0
1a001e4c:	4b02      	ldr	r3, [pc, #8]	; (1a001e58 <Sct_Uint8ToTicks+0x18>)
1a001e4e:	fba3 3000 	umull	r3, r0, r3, r0
}
1a001e52:	09c0      	lsrs	r0, r0, #7
1a001e54:	4770      	bx	lr
1a001e56:	bf00      	nop
1a001e58:	80808081 	.word	0x80808081

1a001e5c <Sct_SetDutyCycle>:
 * @param:	sctNumber:   pin where the pwm signal is generated
 * @param	value:   8bit value, from 0 to 255
 * @note   For the 'ticks' parameter, see function Sct_Uint8ToTicks
 */
void Sct_SetDutyCycle(uint8_t sctNumber, uint8_t value)
{
1a001e5c:	b510      	push	{r4, lr}
   Chip_SCTPWM_SetDutyCycle(LPC_SCT, sctNumber+1, Sct_Uint8ToTicks(value));
1a001e5e:	3001      	adds	r0, #1
1a001e60:	b2c4      	uxtb	r4, r0
1a001e62:	4608      	mov	r0, r1
1a001e64:	f7ff ffec 	bl	1a001e40 <Sct_Uint8ToTicks>
	pSCT->MATCHREL[n].U = value;
1a001e68:	3480      	adds	r4, #128	; 0x80
1a001e6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a001e6e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
}
1a001e72:	bd10      	pop	{r4, pc}

1a001e74 <Sct_EnablePwmFor>:
{
1a001e74:	b510      	push	{r4, lr}
1a001e76:	4604      	mov	r4, r0
   Chip_SCU_PinMux(SCTdataList[sctNumber].port , SCTdataList[sctNumber].pin , SCU_MODE_INACT , CTOUT_FUNC);
1a001e78:	4a0f      	ldr	r2, [pc, #60]	; (1a001eb8 <Sct_EnablePwmFor+0x44>)
1a001e7a:	f912 3010 	ldrsb.w	r3, [r2, r0, lsl #1]
1a001e7e:	b2db      	uxtb	r3, r3
1a001e80:	eb02 0240 	add.w	r2, r2, r0, lsl #1
1a001e84:	f992 2001 	ldrsb.w	r2, [r2, #1]
1a001e88:	015b      	lsls	r3, r3, #5
1a001e8a:	fa53 f382 	uxtab	r3, r3, r2
1a001e8e:	4a0b      	ldr	r2, [pc, #44]	; (1a001ebc <Sct_EnablePwmFor+0x48>)
1a001e90:	2111      	movs	r1, #17
1a001e92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   Chip_SCTPWM_SetOutPin(LPC_SCT, sctNumber+1, sctNumber);
1a001e96:	1c41      	adds	r1, r0, #1
1a001e98:	4602      	mov	r2, r0
1a001e9a:	b2c9      	uxtb	r1, r1
1a001e9c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a001ea0:	f7fe feee 	bl	1a000c80 <Chip_SCTPWM_SetOutPin>
1a001ea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a001ea8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   Sct_SetDutyCycle(sctNumber, Chip_SCTPWM_PercentageToTicks(LPC_SCT,0));
1a001eac:	2100      	movs	r1, #0
1a001eae:	4620      	mov	r0, r4
1a001eb0:	f7ff ffd4 	bl	1a001e5c <Sct_SetDutyCycle>
}
1a001eb4:	bd10      	pop	{r4, pc}
1a001eb6:	bf00      	nop
1a001eb8:	1a003020 	.word	0x1a003020
1a001ebc:	40086000 	.word	0x40086000

1a001ec0 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001ec0:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001ec2:	4b04      	ldr	r3, [pc, #16]	; (1a001ed4 <USB0_IRQHandler+0x14>)
1a001ec4:	681b      	ldr	r3, [r3, #0]
1a001ec6:	681b      	ldr	r3, [r3, #0]
1a001ec8:	68db      	ldr	r3, [r3, #12]
1a001eca:	4a03      	ldr	r2, [pc, #12]	; (1a001ed8 <USB0_IRQHandler+0x18>)
1a001ecc:	6810      	ldr	r0, [r2, #0]
1a001ece:	4798      	blx	r3
}
1a001ed0:	bd08      	pop	{r3, pc}
1a001ed2:	bf00      	nop
1a001ed4:	10000158 	.word	0x10000158
1a001ed8:	1000014c 	.word	0x1000014c

1a001edc <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001edc:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001ede:	f7ff f86f 	bl	1a000fc0 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001ee2:	4b1a      	ldr	r3, [pc, #104]	; (1a001f4c <boardInit+0x70>)
1a001ee4:	6818      	ldr	r0, [r3, #0]
1a001ee6:	f7ff fc25 	bl	1a001734 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a001eea:	2001      	movs	r0, #1
1a001eec:	2100      	movs	r1, #0
1a001eee:	f7ff fded 	bl	1a001acc <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a001ef2:	2105      	movs	r1, #5
1a001ef4:	2000      	movs	r0, #0
1a001ef6:	f7ff fc45 	bl	1a001784 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a001efa:	2100      	movs	r1, #0
1a001efc:	2024      	movs	r0, #36	; 0x24
1a001efe:	f7ff fc41 	bl	1a001784 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001f02:	2100      	movs	r1, #0
1a001f04:	2025      	movs	r0, #37	; 0x25
1a001f06:	f7ff fc3d 	bl	1a001784 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a001f0a:	2100      	movs	r1, #0
1a001f0c:	2026      	movs	r0, #38	; 0x26
1a001f0e:	f7ff fc39 	bl	1a001784 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001f12:	2100      	movs	r1, #0
1a001f14:	2027      	movs	r0, #39	; 0x27
1a001f16:	f7ff fc35 	bl	1a001784 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a001f1a:	2101      	movs	r1, #1
1a001f1c:	2028      	movs	r0, #40	; 0x28
1a001f1e:	f7ff fc31 	bl	1a001784 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001f22:	2101      	movs	r1, #1
1a001f24:	2029      	movs	r0, #41	; 0x29
1a001f26:	f7ff fc2d 	bl	1a001784 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a001f2a:	2101      	movs	r1, #1
1a001f2c:	202a      	movs	r0, #42	; 0x2a
1a001f2e:	f7ff fc29 	bl	1a001784 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001f32:	2101      	movs	r1, #1
1a001f34:	202b      	movs	r0, #43	; 0x2b
1a001f36:	f7ff fc25 	bl	1a001784 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a001f3a:	2101      	movs	r1, #1
1a001f3c:	202c      	movs	r0, #44	; 0x2c
1a001f3e:	f7ff fc21 	bl	1a001784 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001f42:	2101      	movs	r1, #1
1a001f44:	202d      	movs	r0, #45	; 0x2d
1a001f46:	f7ff fc1d 	bl	1a001784 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a001f4a:	bd08      	pop	{r3, pc}
1a001f4c:	10000154 	.word	0x10000154

1a001f50 <delayInaccurateMs>:
/*==================[external functions definition]==========================*/

/* ---- Inaccurate Blocking Delay ---- */

void delayInaccurateMs(tick_t delay_ms)
{
1a001f50:	b4f0      	push	{r4, r5, r6, r7}
1a001f52:	b084      	sub	sp, #16
   volatile tick_t i;
   volatile tick_t delay;
   delay = INACCURATE_TO_MS * delay_ms;
1a001f54:	ea4f 0c81 	mov.w	ip, r1, lsl #2
1a001f58:	0083      	lsls	r3, r0, #2
1a001f5a:	ea4c 7290 	orr.w	r2, ip, r0, lsr #30
1a001f5e:	181b      	adds	r3, r3, r0
1a001f60:	eb41 0202 	adc.w	r2, r1, r2
1a001f64:	0211      	lsls	r1, r2, #8
1a001f66:	ea41 6113 	orr.w	r1, r1, r3, lsr #24
1a001f6a:	0218      	lsls	r0, r3, #8
1a001f6c:	1ac6      	subs	r6, r0, r3
1a001f6e:	eb61 0702 	sbc.w	r7, r1, r2
1a001f72:	013b      	lsls	r3, r7, #4
1a001f74:	ea43 7316 	orr.w	r3, r3, r6, lsr #28
1a001f78:	0132      	lsls	r2, r6, #4
1a001f7a:	4616      	mov	r6, r2
1a001f7c:	461f      	mov	r7, r3
1a001f7e:	e9cd 6700 	strd	r6, r7, [sp]
   for( i=delay; i>0; i-- );
1a001f82:	e9dd 2300 	ldrd	r2, r3, [sp]
1a001f86:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a001f8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001f8e:	4313      	orrs	r3, r2
1a001f90:	d008      	beq.n	1a001fa4 <delayInaccurateMs+0x54>
1a001f92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001f96:	f112 34ff 	adds.w	r4, r2, #4294967295
1a001f9a:	f143 35ff 	adc.w	r5, r3, #4294967295
1a001f9e:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a001fa2:	e7f2      	b.n	1a001f8a <delayInaccurateMs+0x3a>
}
1a001fa4:	b004      	add	sp, #16
1a001fa6:	bcf0      	pop	{r4, r5, r6, r7}
1a001fa8:	4770      	bx	lr

1a001faa <delayInaccurateUs>:

void delayInaccurateUs( tick_t delay_us )
{
1a001faa:	b530      	push	{r4, r5, lr}
1a001fac:	b085      	sub	sp, #20
   volatile tick_t i;
   volatile tick_t delay;
   delay = (INACCURATE_TO_US_x10 * delay_us) / 10;
1a001fae:	1803      	adds	r3, r0, r0
1a001fb0:	eb41 0201 	adc.w	r2, r1, r1
1a001fb4:	1818      	adds	r0, r3, r0
1a001fb6:	eb42 0101 	adc.w	r1, r2, r1
1a001fba:	010b      	lsls	r3, r1, #4
1a001fbc:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
1a001fc0:	0102      	lsls	r2, r0, #4
1a001fc2:	1880      	adds	r0, r0, r2
1a001fc4:	eb43 0101 	adc.w	r1, r3, r1
1a001fc8:	008b      	lsls	r3, r1, #2
1a001fca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
1a001fce:	0082      	lsls	r2, r0, #2
1a001fd0:	4610      	mov	r0, r2
1a001fd2:	4619      	mov	r1, r3
1a001fd4:	220a      	movs	r2, #10
1a001fd6:	2300      	movs	r3, #0
1a001fd8:	f000 fc66 	bl	1a0028a8 <__aeabi_uldivmod>
1a001fdc:	e9cd 0100 	strd	r0, r1, [sp]
   for( i=delay; i>0; i-- );
1a001fe0:	e9dd 2300 	ldrd	r2, r3, [sp]
1a001fe4:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a001fe8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001fec:	4313      	orrs	r3, r2
1a001fee:	d008      	beq.n	1a002002 <delayInaccurateUs+0x58>
1a001ff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001ff4:	f112 34ff 	adds.w	r4, r2, #4294967295
1a001ff8:	f143 35ff 	adc.w	r5, r3, #4294967295
1a001ffc:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a002000:	e7f2      	b.n	1a001fe8 <delayInaccurateUs+0x3e>
}
1a002002:	b005      	add	sp, #20
1a002004:	bd30      	pop	{r4, r5, pc}
1a002006:	Address 0x1a002006 is out of bounds.


1a002008 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a002008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00200c:	4680      	mov	r8, r0
1a00200e:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a002010:	f7ff fd4a 	bl	1a001aa8 <tickRead>
1a002014:	4606      	mov	r6, r0
1a002016:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a002018:	f7ff fd46 	bl	1a001aa8 <tickRead>
1a00201c:	1b84      	subs	r4, r0, r6
1a00201e:	eb61 0507 	sbc.w	r5, r1, r7
1a002022:	4b06      	ldr	r3, [pc, #24]	; (1a00203c <delay+0x34>)
1a002024:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002028:	4640      	mov	r0, r8
1a00202a:	4649      	mov	r1, r9
1a00202c:	f000 fc3c 	bl	1a0028a8 <__aeabi_uldivmod>
1a002030:	428d      	cmp	r5, r1
1a002032:	bf08      	it	eq
1a002034:	4284      	cmpeq	r4, r0
1a002036:	d3ef      	bcc.n	1a002018 <delay+0x10>
}
1a002038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00203c:	10000080 	.word	0x10000080

1a002040 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a002040:	2301      	movs	r3, #1
1a002042:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a002046:	4b01      	ldr	r3, [pc, #4]	; (1a00204c <clearInterrupt+0xc>)
1a002048:	6258      	str	r0, [r3, #36]	; 0x24
}
1a00204a:	4770      	bx	lr
1a00204c:	40087000 	.word	0x40087000

1a002050 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a002050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a002052:	4b12      	ldr	r3, [pc, #72]	; (1a00209c <serveInterrupt+0x4c>)
1a002054:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a002056:	4b12      	ldr	r3, [pc, #72]	; (1a0020a0 <serveInterrupt+0x50>)
1a002058:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a00205a:	2301      	movs	r3, #1
1a00205c:	4083      	lsls	r3, r0
1a00205e:	420b      	tst	r3, r1
1a002060:	d00c      	beq.n	1a00207c <serveInterrupt+0x2c>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a002062:	4910      	ldr	r1, [pc, #64]	; (1a0020a4 <serveInterrupt+0x54>)
1a002064:	688c      	ldr	r4, [r1, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a002066:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a00206a:	00d1      	lsls	r1, r2, #3
1a00206c:	4a0e      	ldr	r2, [pc, #56]	; (1a0020a8 <serveInterrupt+0x58>)
1a00206e:	440a      	add	r2, r1
1a002070:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a002072:	4a0b      	ldr	r2, [pc, #44]	; (1a0020a0 <serveInterrupt+0x50>)
1a002074:	61d3      	str	r3, [r2, #28]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a002076:	f7ff ffe3 	bl	1a002040 <clearInterrupt>
}
1a00207a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00207c:	4909      	ldr	r1, [pc, #36]	; (1a0020a4 <serveInterrupt+0x54>)
1a00207e:	688e      	ldr	r6, [r1, #8]
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a002080:	4d09      	ldr	r5, [pc, #36]	; (1a0020a8 <serveInterrupt+0x58>)
1a002082:	0051      	lsls	r1, r2, #1
1a002084:	188f      	adds	r7, r1, r2
1a002086:	00fc      	lsls	r4, r7, #3
1a002088:	4627      	mov	r7, r4
1a00208a:	442c      	add	r4, r5
1a00208c:	60a6      	str	r6, [r4, #8]
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a00208e:	6864      	ldr	r4, [r4, #4]
1a002090:	1b36      	subs	r6, r6, r4
1a002092:	443d      	add	r5, r7
1a002094:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a002096:	4a02      	ldr	r2, [pc, #8]	; (1a0020a0 <serveInterrupt+0x50>)
1a002098:	6213      	str	r3, [r2, #32]
1a00209a:	e7ec      	b.n	1a002076 <serveInterrupt+0x26>
1a00209c:	1a00303c 	.word	0x1a00303c
1a0020a0:	40087000 	.word	0x40087000
1a0020a4:	40084000 	.word	0x40084000
1a0020a8:	10000094 	.word	0x10000094

1a0020ac <GPIO0_IRQHandler>:
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifdef SAPI_USE_INTERRUPTS
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a0020ac:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0020ae:	2000      	movs	r0, #0
1a0020b0:	f7ff ffce 	bl	1a002050 <serveInterrupt>
}
1a0020b4:	bd08      	pop	{r3, pc}

1a0020b6 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a0020b6:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a0020b8:	2001      	movs	r0, #1
1a0020ba:	f7ff ffc9 	bl	1a002050 <serveInterrupt>
}
1a0020be:	bd08      	pop	{r3, pc}

1a0020c0 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a0020c0:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a0020c2:	2002      	movs	r0, #2
1a0020c4:	f7ff ffc4 	bl	1a002050 <serveInterrupt>
}
1a0020c8:	bd08      	pop	{r3, pc}
1a0020ca:	Address 0x1a0020ca is out of bounds.


1a0020cc <__aeabi_drsub>:
1a0020cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a0020d0:	e002      	b.n	1a0020d8 <__adddf3>
1a0020d2:	bf00      	nop

1a0020d4 <__aeabi_dsub>:
1a0020d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a0020d8 <__adddf3>:
1a0020d8:	b530      	push	{r4, r5, lr}
1a0020da:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a0020de:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a0020e2:	ea94 0f05 	teq	r4, r5
1a0020e6:	bf08      	it	eq
1a0020e8:	ea90 0f02 	teqeq	r0, r2
1a0020ec:	bf1f      	itttt	ne
1a0020ee:	ea54 0c00 	orrsne.w	ip, r4, r0
1a0020f2:	ea55 0c02 	orrsne.w	ip, r5, r2
1a0020f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a0020fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a0020fe:	f000 80e2 	beq.w	1a0022c6 <__adddf3+0x1ee>
1a002102:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a002106:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a00210a:	bfb8      	it	lt
1a00210c:	426d      	neglt	r5, r5
1a00210e:	dd0c      	ble.n	1a00212a <__adddf3+0x52>
1a002110:	442c      	add	r4, r5
1a002112:	ea80 0202 	eor.w	r2, r0, r2
1a002116:	ea81 0303 	eor.w	r3, r1, r3
1a00211a:	ea82 0000 	eor.w	r0, r2, r0
1a00211e:	ea83 0101 	eor.w	r1, r3, r1
1a002122:	ea80 0202 	eor.w	r2, r0, r2
1a002126:	ea81 0303 	eor.w	r3, r1, r3
1a00212a:	2d36      	cmp	r5, #54	; 0x36
1a00212c:	bf88      	it	hi
1a00212e:	bd30      	pophi	{r4, r5, pc}
1a002130:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a002134:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002138:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a00213c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a002140:	d002      	beq.n	1a002148 <__adddf3+0x70>
1a002142:	4240      	negs	r0, r0
1a002144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002148:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a00214c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a002150:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a002154:	d002      	beq.n	1a00215c <__adddf3+0x84>
1a002156:	4252      	negs	r2, r2
1a002158:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00215c:	ea94 0f05 	teq	r4, r5
1a002160:	f000 80a7 	beq.w	1a0022b2 <__adddf3+0x1da>
1a002164:	f1a4 0401 	sub.w	r4, r4, #1
1a002168:	f1d5 0e20 	rsbs	lr, r5, #32
1a00216c:	db0d      	blt.n	1a00218a <__adddf3+0xb2>
1a00216e:	fa02 fc0e 	lsl.w	ip, r2, lr
1a002172:	fa22 f205 	lsr.w	r2, r2, r5
1a002176:	1880      	adds	r0, r0, r2
1a002178:	f141 0100 	adc.w	r1, r1, #0
1a00217c:	fa03 f20e 	lsl.w	r2, r3, lr
1a002180:	1880      	adds	r0, r0, r2
1a002182:	fa43 f305 	asr.w	r3, r3, r5
1a002186:	4159      	adcs	r1, r3
1a002188:	e00e      	b.n	1a0021a8 <__adddf3+0xd0>
1a00218a:	f1a5 0520 	sub.w	r5, r5, #32
1a00218e:	f10e 0e20 	add.w	lr, lr, #32
1a002192:	2a01      	cmp	r2, #1
1a002194:	fa03 fc0e 	lsl.w	ip, r3, lr
1a002198:	bf28      	it	cs
1a00219a:	f04c 0c02 	orrcs.w	ip, ip, #2
1a00219e:	fa43 f305 	asr.w	r3, r3, r5
1a0021a2:	18c0      	adds	r0, r0, r3
1a0021a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a0021a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0021ac:	d507      	bpl.n	1a0021be <__adddf3+0xe6>
1a0021ae:	f04f 0e00 	mov.w	lr, #0
1a0021b2:	f1dc 0c00 	rsbs	ip, ip, #0
1a0021b6:	eb7e 0000 	sbcs.w	r0, lr, r0
1a0021ba:	eb6e 0101 	sbc.w	r1, lr, r1
1a0021be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a0021c2:	d31b      	bcc.n	1a0021fc <__adddf3+0x124>
1a0021c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a0021c8:	d30c      	bcc.n	1a0021e4 <__adddf3+0x10c>
1a0021ca:	0849      	lsrs	r1, r1, #1
1a0021cc:	ea5f 0030 	movs.w	r0, r0, rrx
1a0021d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a0021d4:	f104 0401 	add.w	r4, r4, #1
1a0021d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a0021dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a0021e0:	f080 809a 	bcs.w	1a002318 <__adddf3+0x240>
1a0021e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a0021e8:	bf08      	it	eq
1a0021ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a0021ee:	f150 0000 	adcs.w	r0, r0, #0
1a0021f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0021f6:	ea41 0105 	orr.w	r1, r1, r5
1a0021fa:	bd30      	pop	{r4, r5, pc}
1a0021fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a002200:	4140      	adcs	r0, r0
1a002202:	eb41 0101 	adc.w	r1, r1, r1
1a002206:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00220a:	f1a4 0401 	sub.w	r4, r4, #1
1a00220e:	d1e9      	bne.n	1a0021e4 <__adddf3+0x10c>
1a002210:	f091 0f00 	teq	r1, #0
1a002214:	bf04      	itt	eq
1a002216:	4601      	moveq	r1, r0
1a002218:	2000      	moveq	r0, #0
1a00221a:	fab1 f381 	clz	r3, r1
1a00221e:	bf08      	it	eq
1a002220:	3320      	addeq	r3, #32
1a002222:	f1a3 030b 	sub.w	r3, r3, #11
1a002226:	f1b3 0220 	subs.w	r2, r3, #32
1a00222a:	da0c      	bge.n	1a002246 <__adddf3+0x16e>
1a00222c:	320c      	adds	r2, #12
1a00222e:	dd08      	ble.n	1a002242 <__adddf3+0x16a>
1a002230:	f102 0c14 	add.w	ip, r2, #20
1a002234:	f1c2 020c 	rsb	r2, r2, #12
1a002238:	fa01 f00c 	lsl.w	r0, r1, ip
1a00223c:	fa21 f102 	lsr.w	r1, r1, r2
1a002240:	e00c      	b.n	1a00225c <__adddf3+0x184>
1a002242:	f102 0214 	add.w	r2, r2, #20
1a002246:	bfd8      	it	le
1a002248:	f1c2 0c20 	rsble	ip, r2, #32
1a00224c:	fa01 f102 	lsl.w	r1, r1, r2
1a002250:	fa20 fc0c 	lsr.w	ip, r0, ip
1a002254:	bfdc      	itt	le
1a002256:	ea41 010c 	orrle.w	r1, r1, ip
1a00225a:	4090      	lslle	r0, r2
1a00225c:	1ae4      	subs	r4, r4, r3
1a00225e:	bfa2      	ittt	ge
1a002260:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a002264:	4329      	orrge	r1, r5
1a002266:	bd30      	popge	{r4, r5, pc}
1a002268:	ea6f 0404 	mvn.w	r4, r4
1a00226c:	3c1f      	subs	r4, #31
1a00226e:	da1c      	bge.n	1a0022aa <__adddf3+0x1d2>
1a002270:	340c      	adds	r4, #12
1a002272:	dc0e      	bgt.n	1a002292 <__adddf3+0x1ba>
1a002274:	f104 0414 	add.w	r4, r4, #20
1a002278:	f1c4 0220 	rsb	r2, r4, #32
1a00227c:	fa20 f004 	lsr.w	r0, r0, r4
1a002280:	fa01 f302 	lsl.w	r3, r1, r2
1a002284:	ea40 0003 	orr.w	r0, r0, r3
1a002288:	fa21 f304 	lsr.w	r3, r1, r4
1a00228c:	ea45 0103 	orr.w	r1, r5, r3
1a002290:	bd30      	pop	{r4, r5, pc}
1a002292:	f1c4 040c 	rsb	r4, r4, #12
1a002296:	f1c4 0220 	rsb	r2, r4, #32
1a00229a:	fa20 f002 	lsr.w	r0, r0, r2
1a00229e:	fa01 f304 	lsl.w	r3, r1, r4
1a0022a2:	ea40 0003 	orr.w	r0, r0, r3
1a0022a6:	4629      	mov	r1, r5
1a0022a8:	bd30      	pop	{r4, r5, pc}
1a0022aa:	fa21 f004 	lsr.w	r0, r1, r4
1a0022ae:	4629      	mov	r1, r5
1a0022b0:	bd30      	pop	{r4, r5, pc}
1a0022b2:	f094 0f00 	teq	r4, #0
1a0022b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a0022ba:	bf06      	itte	eq
1a0022bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a0022c0:	3401      	addeq	r4, #1
1a0022c2:	3d01      	subne	r5, #1
1a0022c4:	e74e      	b.n	1a002164 <__adddf3+0x8c>
1a0022c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0022ca:	bf18      	it	ne
1a0022cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a0022d0:	d029      	beq.n	1a002326 <__adddf3+0x24e>
1a0022d2:	ea94 0f05 	teq	r4, r5
1a0022d6:	bf08      	it	eq
1a0022d8:	ea90 0f02 	teqeq	r0, r2
1a0022dc:	d005      	beq.n	1a0022ea <__adddf3+0x212>
1a0022de:	ea54 0c00 	orrs.w	ip, r4, r0
1a0022e2:	bf04      	itt	eq
1a0022e4:	4619      	moveq	r1, r3
1a0022e6:	4610      	moveq	r0, r2
1a0022e8:	bd30      	pop	{r4, r5, pc}
1a0022ea:	ea91 0f03 	teq	r1, r3
1a0022ee:	bf1e      	ittt	ne
1a0022f0:	2100      	movne	r1, #0
1a0022f2:	2000      	movne	r0, #0
1a0022f4:	bd30      	popne	{r4, r5, pc}
1a0022f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a0022fa:	d105      	bne.n	1a002308 <__adddf3+0x230>
1a0022fc:	0040      	lsls	r0, r0, #1
1a0022fe:	4149      	adcs	r1, r1
1a002300:	bf28      	it	cs
1a002302:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a002306:	bd30      	pop	{r4, r5, pc}
1a002308:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a00230c:	bf3c      	itt	cc
1a00230e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a002312:	bd30      	popcc	{r4, r5, pc}
1a002314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002318:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a00231c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002320:	f04f 0000 	mov.w	r0, #0
1a002324:	bd30      	pop	{r4, r5, pc}
1a002326:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a00232a:	bf1a      	itte	ne
1a00232c:	4619      	movne	r1, r3
1a00232e:	4610      	movne	r0, r2
1a002330:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a002334:	bf1c      	itt	ne
1a002336:	460b      	movne	r3, r1
1a002338:	4602      	movne	r2, r0
1a00233a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a00233e:	bf06      	itte	eq
1a002340:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a002344:	ea91 0f03 	teqeq	r1, r3
1a002348:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a00234c:	bd30      	pop	{r4, r5, pc}
1a00234e:	bf00      	nop

1a002350 <__aeabi_ui2d>:
1a002350:	f090 0f00 	teq	r0, #0
1a002354:	bf04      	itt	eq
1a002356:	2100      	moveq	r1, #0
1a002358:	4770      	bxeq	lr
1a00235a:	b530      	push	{r4, r5, lr}
1a00235c:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002360:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002364:	f04f 0500 	mov.w	r5, #0
1a002368:	f04f 0100 	mov.w	r1, #0
1a00236c:	e750      	b.n	1a002210 <__adddf3+0x138>
1a00236e:	bf00      	nop

1a002370 <__aeabi_i2d>:
1a002370:	f090 0f00 	teq	r0, #0
1a002374:	bf04      	itt	eq
1a002376:	2100      	moveq	r1, #0
1a002378:	4770      	bxeq	lr
1a00237a:	b530      	push	{r4, r5, lr}
1a00237c:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002380:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002384:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a002388:	bf48      	it	mi
1a00238a:	4240      	negmi	r0, r0
1a00238c:	f04f 0100 	mov.w	r1, #0
1a002390:	e73e      	b.n	1a002210 <__adddf3+0x138>
1a002392:	bf00      	nop

1a002394 <__aeabi_f2d>:
1a002394:	0042      	lsls	r2, r0, #1
1a002396:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a00239a:	ea4f 0131 	mov.w	r1, r1, rrx
1a00239e:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a0023a2:	bf1f      	itttt	ne
1a0023a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a0023a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a0023ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a0023b0:	4770      	bxne	lr
1a0023b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a0023b6:	bf08      	it	eq
1a0023b8:	4770      	bxeq	lr
1a0023ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a0023be:	bf04      	itt	eq
1a0023c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a0023c4:	4770      	bxeq	lr
1a0023c6:	b530      	push	{r4, r5, lr}
1a0023c8:	f44f 7460 	mov.w	r4, #896	; 0x380
1a0023cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0023d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0023d4:	e71c      	b.n	1a002210 <__adddf3+0x138>
1a0023d6:	bf00      	nop

1a0023d8 <__aeabi_ul2d>:
1a0023d8:	ea50 0201 	orrs.w	r2, r0, r1
1a0023dc:	bf08      	it	eq
1a0023de:	4770      	bxeq	lr
1a0023e0:	b530      	push	{r4, r5, lr}
1a0023e2:	f04f 0500 	mov.w	r5, #0
1a0023e6:	e00a      	b.n	1a0023fe <__aeabi_l2d+0x16>

1a0023e8 <__aeabi_l2d>:
1a0023e8:	ea50 0201 	orrs.w	r2, r0, r1
1a0023ec:	bf08      	it	eq
1a0023ee:	4770      	bxeq	lr
1a0023f0:	b530      	push	{r4, r5, lr}
1a0023f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a0023f6:	d502      	bpl.n	1a0023fe <__aeabi_l2d+0x16>
1a0023f8:	4240      	negs	r0, r0
1a0023fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0023fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002402:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002406:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a00240a:	f43f aed8 	beq.w	1a0021be <__adddf3+0xe6>
1a00240e:	f04f 0203 	mov.w	r2, #3
1a002412:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002416:	bf18      	it	ne
1a002418:	3203      	addne	r2, #3
1a00241a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a00241e:	bf18      	it	ne
1a002420:	3203      	addne	r2, #3
1a002422:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a002426:	f1c2 0320 	rsb	r3, r2, #32
1a00242a:	fa00 fc03 	lsl.w	ip, r0, r3
1a00242e:	fa20 f002 	lsr.w	r0, r0, r2
1a002432:	fa01 fe03 	lsl.w	lr, r1, r3
1a002436:	ea40 000e 	orr.w	r0, r0, lr
1a00243a:	fa21 f102 	lsr.w	r1, r1, r2
1a00243e:	4414      	add	r4, r2
1a002440:	e6bd      	b.n	1a0021be <__adddf3+0xe6>
1a002442:	bf00      	nop

1a002444 <__aeabi_dmul>:
1a002444:	b570      	push	{r4, r5, r6, lr}
1a002446:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00244a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a00244e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002452:	bf1d      	ittte	ne
1a002454:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002458:	ea94 0f0c 	teqne	r4, ip
1a00245c:	ea95 0f0c 	teqne	r5, ip
1a002460:	f000 f8de 	bleq	1a002620 <__aeabi_dmul+0x1dc>
1a002464:	442c      	add	r4, r5
1a002466:	ea81 0603 	eor.w	r6, r1, r3
1a00246a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a00246e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a002472:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a002476:	bf18      	it	ne
1a002478:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a00247c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002480:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a002484:	d038      	beq.n	1a0024f8 <__aeabi_dmul+0xb4>
1a002486:	fba0 ce02 	umull	ip, lr, r0, r2
1a00248a:	f04f 0500 	mov.w	r5, #0
1a00248e:	fbe1 e502 	umlal	lr, r5, r1, r2
1a002492:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a002496:	fbe0 e503 	umlal	lr, r5, r0, r3
1a00249a:	f04f 0600 	mov.w	r6, #0
1a00249e:	fbe1 5603 	umlal	r5, r6, r1, r3
1a0024a2:	f09c 0f00 	teq	ip, #0
1a0024a6:	bf18      	it	ne
1a0024a8:	f04e 0e01 	orrne.w	lr, lr, #1
1a0024ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a0024b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a0024b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a0024b8:	d204      	bcs.n	1a0024c4 <__aeabi_dmul+0x80>
1a0024ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a0024be:	416d      	adcs	r5, r5
1a0024c0:	eb46 0606 	adc.w	r6, r6, r6
1a0024c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a0024c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a0024cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a0024d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a0024d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a0024d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a0024dc:	bf88      	it	hi
1a0024de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a0024e2:	d81e      	bhi.n	1a002522 <__aeabi_dmul+0xde>
1a0024e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a0024e8:	bf08      	it	eq
1a0024ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a0024ee:	f150 0000 	adcs.w	r0, r0, #0
1a0024f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0024f6:	bd70      	pop	{r4, r5, r6, pc}
1a0024f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a0024fc:	ea46 0101 	orr.w	r1, r6, r1
1a002500:	ea40 0002 	orr.w	r0, r0, r2
1a002504:	ea81 0103 	eor.w	r1, r1, r3
1a002508:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a00250c:	bfc2      	ittt	gt
1a00250e:	ebd4 050c 	rsbsgt	r5, r4, ip
1a002512:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002516:	bd70      	popgt	{r4, r5, r6, pc}
1a002518:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a00251c:	f04f 0e00 	mov.w	lr, #0
1a002520:	3c01      	subs	r4, #1
1a002522:	f300 80ab 	bgt.w	1a00267c <__aeabi_dmul+0x238>
1a002526:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a00252a:	bfde      	ittt	le
1a00252c:	2000      	movle	r0, #0
1a00252e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a002532:	bd70      	pople	{r4, r5, r6, pc}
1a002534:	f1c4 0400 	rsb	r4, r4, #0
1a002538:	3c20      	subs	r4, #32
1a00253a:	da35      	bge.n	1a0025a8 <__aeabi_dmul+0x164>
1a00253c:	340c      	adds	r4, #12
1a00253e:	dc1b      	bgt.n	1a002578 <__aeabi_dmul+0x134>
1a002540:	f104 0414 	add.w	r4, r4, #20
1a002544:	f1c4 0520 	rsb	r5, r4, #32
1a002548:	fa00 f305 	lsl.w	r3, r0, r5
1a00254c:	fa20 f004 	lsr.w	r0, r0, r4
1a002550:	fa01 f205 	lsl.w	r2, r1, r5
1a002554:	ea40 0002 	orr.w	r0, r0, r2
1a002558:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a00255c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002560:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002564:	fa21 f604 	lsr.w	r6, r1, r4
1a002568:	eb42 0106 	adc.w	r1, r2, r6
1a00256c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002570:	bf08      	it	eq
1a002572:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002576:	bd70      	pop	{r4, r5, r6, pc}
1a002578:	f1c4 040c 	rsb	r4, r4, #12
1a00257c:	f1c4 0520 	rsb	r5, r4, #32
1a002580:	fa00 f304 	lsl.w	r3, r0, r4
1a002584:	fa20 f005 	lsr.w	r0, r0, r5
1a002588:	fa01 f204 	lsl.w	r2, r1, r4
1a00258c:	ea40 0002 	orr.w	r0, r0, r2
1a002590:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002598:	f141 0100 	adc.w	r1, r1, #0
1a00259c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0025a0:	bf08      	it	eq
1a0025a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0025a6:	bd70      	pop	{r4, r5, r6, pc}
1a0025a8:	f1c4 0520 	rsb	r5, r4, #32
1a0025ac:	fa00 f205 	lsl.w	r2, r0, r5
1a0025b0:	ea4e 0e02 	orr.w	lr, lr, r2
1a0025b4:	fa20 f304 	lsr.w	r3, r0, r4
1a0025b8:	fa01 f205 	lsl.w	r2, r1, r5
1a0025bc:	ea43 0302 	orr.w	r3, r3, r2
1a0025c0:	fa21 f004 	lsr.w	r0, r1, r4
1a0025c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0025c8:	fa21 f204 	lsr.w	r2, r1, r4
1a0025cc:	ea20 0002 	bic.w	r0, r0, r2
1a0025d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a0025d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0025d8:	bf08      	it	eq
1a0025da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0025de:	bd70      	pop	{r4, r5, r6, pc}
1a0025e0:	f094 0f00 	teq	r4, #0
1a0025e4:	d10f      	bne.n	1a002606 <__aeabi_dmul+0x1c2>
1a0025e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a0025ea:	0040      	lsls	r0, r0, #1
1a0025ec:	eb41 0101 	adc.w	r1, r1, r1
1a0025f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0025f4:	bf08      	it	eq
1a0025f6:	3c01      	subeq	r4, #1
1a0025f8:	d0f7      	beq.n	1a0025ea <__aeabi_dmul+0x1a6>
1a0025fa:	ea41 0106 	orr.w	r1, r1, r6
1a0025fe:	f095 0f00 	teq	r5, #0
1a002602:	bf18      	it	ne
1a002604:	4770      	bxne	lr
1a002606:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a00260a:	0052      	lsls	r2, r2, #1
1a00260c:	eb43 0303 	adc.w	r3, r3, r3
1a002610:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a002614:	bf08      	it	eq
1a002616:	3d01      	subeq	r5, #1
1a002618:	d0f7      	beq.n	1a00260a <__aeabi_dmul+0x1c6>
1a00261a:	ea43 0306 	orr.w	r3, r3, r6
1a00261e:	4770      	bx	lr
1a002620:	ea94 0f0c 	teq	r4, ip
1a002624:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a002628:	bf18      	it	ne
1a00262a:	ea95 0f0c 	teqne	r5, ip
1a00262e:	d00c      	beq.n	1a00264a <__aeabi_dmul+0x206>
1a002630:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002634:	bf18      	it	ne
1a002636:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a00263a:	d1d1      	bne.n	1a0025e0 <__aeabi_dmul+0x19c>
1a00263c:	ea81 0103 	eor.w	r1, r1, r3
1a002640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002644:	f04f 0000 	mov.w	r0, #0
1a002648:	bd70      	pop	{r4, r5, r6, pc}
1a00264a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a00264e:	bf06      	itte	eq
1a002650:	4610      	moveq	r0, r2
1a002652:	4619      	moveq	r1, r3
1a002654:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002658:	d019      	beq.n	1a00268e <__aeabi_dmul+0x24a>
1a00265a:	ea94 0f0c 	teq	r4, ip
1a00265e:	d102      	bne.n	1a002666 <__aeabi_dmul+0x222>
1a002660:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a002664:	d113      	bne.n	1a00268e <__aeabi_dmul+0x24a>
1a002666:	ea95 0f0c 	teq	r5, ip
1a00266a:	d105      	bne.n	1a002678 <__aeabi_dmul+0x234>
1a00266c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a002670:	bf1c      	itt	ne
1a002672:	4610      	movne	r0, r2
1a002674:	4619      	movne	r1, r3
1a002676:	d10a      	bne.n	1a00268e <__aeabi_dmul+0x24a>
1a002678:	ea81 0103 	eor.w	r1, r1, r3
1a00267c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002680:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002684:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002688:	f04f 0000 	mov.w	r0, #0
1a00268c:	bd70      	pop	{r4, r5, r6, pc}
1a00268e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002692:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a002696:	bd70      	pop	{r4, r5, r6, pc}

1a002698 <__aeabi_ddiv>:
1a002698:	b570      	push	{r4, r5, r6, lr}
1a00269a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00269e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a0026a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a0026a6:	bf1d      	ittte	ne
1a0026a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a0026ac:	ea94 0f0c 	teqne	r4, ip
1a0026b0:	ea95 0f0c 	teqne	r5, ip
1a0026b4:	f000 f8a7 	bleq	1a002806 <__aeabi_ddiv+0x16e>
1a0026b8:	eba4 0405 	sub.w	r4, r4, r5
1a0026bc:	ea81 0e03 	eor.w	lr, r1, r3
1a0026c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a0026c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0026c8:	f000 8088 	beq.w	1a0027dc <__aeabi_ddiv+0x144>
1a0026cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a0026d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a0026d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a0026d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a0026dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a0026e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a0026e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a0026e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a0026ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a0026f0:	429d      	cmp	r5, r3
1a0026f2:	bf08      	it	eq
1a0026f4:	4296      	cmpeq	r6, r2
1a0026f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a0026fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a0026fe:	d202      	bcs.n	1a002706 <__aeabi_ddiv+0x6e>
1a002700:	085b      	lsrs	r3, r3, #1
1a002702:	ea4f 0232 	mov.w	r2, r2, rrx
1a002706:	1ab6      	subs	r6, r6, r2
1a002708:	eb65 0503 	sbc.w	r5, r5, r3
1a00270c:	085b      	lsrs	r3, r3, #1
1a00270e:	ea4f 0232 	mov.w	r2, r2, rrx
1a002712:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a002716:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a00271a:	ebb6 0e02 	subs.w	lr, r6, r2
1a00271e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002722:	bf22      	ittt	cs
1a002724:	1ab6      	subcs	r6, r6, r2
1a002726:	4675      	movcs	r5, lr
1a002728:	ea40 000c 	orrcs.w	r0, r0, ip
1a00272c:	085b      	lsrs	r3, r3, #1
1a00272e:	ea4f 0232 	mov.w	r2, r2, rrx
1a002732:	ebb6 0e02 	subs.w	lr, r6, r2
1a002736:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00273a:	bf22      	ittt	cs
1a00273c:	1ab6      	subcs	r6, r6, r2
1a00273e:	4675      	movcs	r5, lr
1a002740:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a002744:	085b      	lsrs	r3, r3, #1
1a002746:	ea4f 0232 	mov.w	r2, r2, rrx
1a00274a:	ebb6 0e02 	subs.w	lr, r6, r2
1a00274e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002752:	bf22      	ittt	cs
1a002754:	1ab6      	subcs	r6, r6, r2
1a002756:	4675      	movcs	r5, lr
1a002758:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a00275c:	085b      	lsrs	r3, r3, #1
1a00275e:	ea4f 0232 	mov.w	r2, r2, rrx
1a002762:	ebb6 0e02 	subs.w	lr, r6, r2
1a002766:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00276a:	bf22      	ittt	cs
1a00276c:	1ab6      	subcs	r6, r6, r2
1a00276e:	4675      	movcs	r5, lr
1a002770:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a002774:	ea55 0e06 	orrs.w	lr, r5, r6
1a002778:	d018      	beq.n	1a0027ac <__aeabi_ddiv+0x114>
1a00277a:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a00277e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a002782:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a002786:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a00278a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a00278e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a002792:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a002796:	d1c0      	bne.n	1a00271a <__aeabi_ddiv+0x82>
1a002798:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00279c:	d10b      	bne.n	1a0027b6 <__aeabi_ddiv+0x11e>
1a00279e:	ea41 0100 	orr.w	r1, r1, r0
1a0027a2:	f04f 0000 	mov.w	r0, #0
1a0027a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a0027aa:	e7b6      	b.n	1a00271a <__aeabi_ddiv+0x82>
1a0027ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0027b0:	bf04      	itt	eq
1a0027b2:	4301      	orreq	r1, r0
1a0027b4:	2000      	moveq	r0, #0
1a0027b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a0027ba:	bf88      	it	hi
1a0027bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a0027c0:	f63f aeaf 	bhi.w	1a002522 <__aeabi_dmul+0xde>
1a0027c4:	ebb5 0c03 	subs.w	ip, r5, r3
1a0027c8:	bf04      	itt	eq
1a0027ca:	ebb6 0c02 	subseq.w	ip, r6, r2
1a0027ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a0027d2:	f150 0000 	adcs.w	r0, r0, #0
1a0027d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0027da:	bd70      	pop	{r4, r5, r6, pc}
1a0027dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a0027e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a0027e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a0027e8:	bfc2      	ittt	gt
1a0027ea:	ebd4 050c 	rsbsgt	r5, r4, ip
1a0027ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a0027f2:	bd70      	popgt	{r4, r5, r6, pc}
1a0027f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0027f8:	f04f 0e00 	mov.w	lr, #0
1a0027fc:	3c01      	subs	r4, #1
1a0027fe:	e690      	b.n	1a002522 <__aeabi_dmul+0xde>
1a002800:	ea45 0e06 	orr.w	lr, r5, r6
1a002804:	e68d      	b.n	1a002522 <__aeabi_dmul+0xde>
1a002806:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a00280a:	ea94 0f0c 	teq	r4, ip
1a00280e:	bf08      	it	eq
1a002810:	ea95 0f0c 	teqeq	r5, ip
1a002814:	f43f af3b 	beq.w	1a00268e <__aeabi_dmul+0x24a>
1a002818:	ea94 0f0c 	teq	r4, ip
1a00281c:	d10a      	bne.n	1a002834 <__aeabi_ddiv+0x19c>
1a00281e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a002822:	f47f af34 	bne.w	1a00268e <__aeabi_dmul+0x24a>
1a002826:	ea95 0f0c 	teq	r5, ip
1a00282a:	f47f af25 	bne.w	1a002678 <__aeabi_dmul+0x234>
1a00282e:	4610      	mov	r0, r2
1a002830:	4619      	mov	r1, r3
1a002832:	e72c      	b.n	1a00268e <__aeabi_dmul+0x24a>
1a002834:	ea95 0f0c 	teq	r5, ip
1a002838:	d106      	bne.n	1a002848 <__aeabi_ddiv+0x1b0>
1a00283a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a00283e:	f43f aefd 	beq.w	1a00263c <__aeabi_dmul+0x1f8>
1a002842:	4610      	mov	r0, r2
1a002844:	4619      	mov	r1, r3
1a002846:	e722      	b.n	1a00268e <__aeabi_dmul+0x24a>
1a002848:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a00284c:	bf18      	it	ne
1a00284e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002852:	f47f aec5 	bne.w	1a0025e0 <__aeabi_dmul+0x19c>
1a002856:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a00285a:	f47f af0d 	bne.w	1a002678 <__aeabi_dmul+0x234>
1a00285e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a002862:	f47f aeeb 	bne.w	1a00263c <__aeabi_dmul+0x1f8>
1a002866:	e712      	b.n	1a00268e <__aeabi_dmul+0x24a>

1a002868 <__aeabi_d2uiz>:
1a002868:	004a      	lsls	r2, r1, #1
1a00286a:	d211      	bcs.n	1a002890 <__aeabi_d2uiz+0x28>
1a00286c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a002870:	d211      	bcs.n	1a002896 <__aeabi_d2uiz+0x2e>
1a002872:	d50d      	bpl.n	1a002890 <__aeabi_d2uiz+0x28>
1a002874:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a002878:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a00287c:	d40e      	bmi.n	1a00289c <__aeabi_d2uiz+0x34>
1a00287e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a002882:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a002886:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a00288a:	fa23 f002 	lsr.w	r0, r3, r2
1a00288e:	4770      	bx	lr
1a002890:	f04f 0000 	mov.w	r0, #0
1a002894:	4770      	bx	lr
1a002896:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a00289a:	d102      	bne.n	1a0028a2 <__aeabi_d2uiz+0x3a>
1a00289c:	f04f 30ff 	mov.w	r0, #4294967295
1a0028a0:	4770      	bx	lr
1a0028a2:	f04f 0000 	mov.w	r0, #0
1a0028a6:	4770      	bx	lr

1a0028a8 <__aeabi_uldivmod>:
1a0028a8:	b953      	cbnz	r3, 1a0028c0 <__aeabi_uldivmod+0x18>
1a0028aa:	b94a      	cbnz	r2, 1a0028c0 <__aeabi_uldivmod+0x18>
1a0028ac:	2900      	cmp	r1, #0
1a0028ae:	bf08      	it	eq
1a0028b0:	2800      	cmpeq	r0, #0
1a0028b2:	bf1c      	itt	ne
1a0028b4:	f04f 31ff 	movne.w	r1, #4294967295
1a0028b8:	f04f 30ff 	movne.w	r0, #4294967295
1a0028bc:	f000 b974 	b.w	1a002ba8 <__aeabi_idiv0>
1a0028c0:	f1ad 0c08 	sub.w	ip, sp, #8
1a0028c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0028c8:	f000 f806 	bl	1a0028d8 <__udivmoddi4>
1a0028cc:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0028d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0028d4:	b004      	add	sp, #16
1a0028d6:	4770      	bx	lr

1a0028d8 <__udivmoddi4>:
1a0028d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0028dc:	9e08      	ldr	r6, [sp, #32]
1a0028de:	4604      	mov	r4, r0
1a0028e0:	4688      	mov	r8, r1
1a0028e2:	2b00      	cmp	r3, #0
1a0028e4:	f040 8085 	bne.w	1a0029f2 <__udivmoddi4+0x11a>
1a0028e8:	428a      	cmp	r2, r1
1a0028ea:	4615      	mov	r5, r2
1a0028ec:	d948      	bls.n	1a002980 <__udivmoddi4+0xa8>
1a0028ee:	fab2 f282 	clz	r2, r2
1a0028f2:	b14a      	cbz	r2, 1a002908 <__udivmoddi4+0x30>
1a0028f4:	f1c2 0720 	rsb	r7, r2, #32
1a0028f8:	fa01 f302 	lsl.w	r3, r1, r2
1a0028fc:	fa20 f707 	lsr.w	r7, r0, r7
1a002900:	4095      	lsls	r5, r2
1a002902:	ea47 0803 	orr.w	r8, r7, r3
1a002906:	4094      	lsls	r4, r2
1a002908:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00290c:	0c23      	lsrs	r3, r4, #16
1a00290e:	fbb8 f7fe 	udiv	r7, r8, lr
1a002912:	fa1f fc85 	uxth.w	ip, r5
1a002916:	fb0e 8817 	mls	r8, lr, r7, r8
1a00291a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a00291e:	fb07 f10c 	mul.w	r1, r7, ip
1a002922:	4299      	cmp	r1, r3
1a002924:	d909      	bls.n	1a00293a <__udivmoddi4+0x62>
1a002926:	18eb      	adds	r3, r5, r3
1a002928:	f107 30ff 	add.w	r0, r7, #4294967295
1a00292c:	f080 80e3 	bcs.w	1a002af6 <__udivmoddi4+0x21e>
1a002930:	4299      	cmp	r1, r3
1a002932:	f240 80e0 	bls.w	1a002af6 <__udivmoddi4+0x21e>
1a002936:	3f02      	subs	r7, #2
1a002938:	442b      	add	r3, r5
1a00293a:	1a5b      	subs	r3, r3, r1
1a00293c:	b2a4      	uxth	r4, r4
1a00293e:	fbb3 f0fe 	udiv	r0, r3, lr
1a002942:	fb0e 3310 	mls	r3, lr, r0, r3
1a002946:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00294a:	fb00 fc0c 	mul.w	ip, r0, ip
1a00294e:	45a4      	cmp	ip, r4
1a002950:	d909      	bls.n	1a002966 <__udivmoddi4+0x8e>
1a002952:	192c      	adds	r4, r5, r4
1a002954:	f100 33ff 	add.w	r3, r0, #4294967295
1a002958:	f080 80cb 	bcs.w	1a002af2 <__udivmoddi4+0x21a>
1a00295c:	45a4      	cmp	ip, r4
1a00295e:	f240 80c8 	bls.w	1a002af2 <__udivmoddi4+0x21a>
1a002962:	3802      	subs	r0, #2
1a002964:	442c      	add	r4, r5
1a002966:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a00296a:	eba4 040c 	sub.w	r4, r4, ip
1a00296e:	2700      	movs	r7, #0
1a002970:	b11e      	cbz	r6, 1a00297a <__udivmoddi4+0xa2>
1a002972:	40d4      	lsrs	r4, r2
1a002974:	2300      	movs	r3, #0
1a002976:	e9c6 4300 	strd	r4, r3, [r6]
1a00297a:	4639      	mov	r1, r7
1a00297c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002980:	2a00      	cmp	r2, #0
1a002982:	d053      	beq.n	1a002a2c <__udivmoddi4+0x154>
1a002984:	fab2 f282 	clz	r2, r2
1a002988:	2a00      	cmp	r2, #0
1a00298a:	f040 80b6 	bne.w	1a002afa <__udivmoddi4+0x222>
1a00298e:	1b49      	subs	r1, r1, r5
1a002990:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002994:	fa1f f885 	uxth.w	r8, r5
1a002998:	2701      	movs	r7, #1
1a00299a:	fbb1 fcfe 	udiv	ip, r1, lr
1a00299e:	0c23      	lsrs	r3, r4, #16
1a0029a0:	fb0e 111c 	mls	r1, lr, ip, r1
1a0029a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0029a8:	fb08 f10c 	mul.w	r1, r8, ip
1a0029ac:	4299      	cmp	r1, r3
1a0029ae:	d907      	bls.n	1a0029c0 <__udivmoddi4+0xe8>
1a0029b0:	18eb      	adds	r3, r5, r3
1a0029b2:	f10c 30ff 	add.w	r0, ip, #4294967295
1a0029b6:	d202      	bcs.n	1a0029be <__udivmoddi4+0xe6>
1a0029b8:	4299      	cmp	r1, r3
1a0029ba:	f200 80ec 	bhi.w	1a002b96 <__udivmoddi4+0x2be>
1a0029be:	4684      	mov	ip, r0
1a0029c0:	1a59      	subs	r1, r3, r1
1a0029c2:	b2a3      	uxth	r3, r4
1a0029c4:	fbb1 f0fe 	udiv	r0, r1, lr
1a0029c8:	fb0e 1410 	mls	r4, lr, r0, r1
1a0029cc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0029d0:	fb08 f800 	mul.w	r8, r8, r0
1a0029d4:	45a0      	cmp	r8, r4
1a0029d6:	d907      	bls.n	1a0029e8 <__udivmoddi4+0x110>
1a0029d8:	192c      	adds	r4, r5, r4
1a0029da:	f100 33ff 	add.w	r3, r0, #4294967295
1a0029de:	d202      	bcs.n	1a0029e6 <__udivmoddi4+0x10e>
1a0029e0:	45a0      	cmp	r8, r4
1a0029e2:	f200 80dc 	bhi.w	1a002b9e <__udivmoddi4+0x2c6>
1a0029e6:	4618      	mov	r0, r3
1a0029e8:	eba4 0408 	sub.w	r4, r4, r8
1a0029ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0029f0:	e7be      	b.n	1a002970 <__udivmoddi4+0x98>
1a0029f2:	428b      	cmp	r3, r1
1a0029f4:	d908      	bls.n	1a002a08 <__udivmoddi4+0x130>
1a0029f6:	2e00      	cmp	r6, #0
1a0029f8:	d078      	beq.n	1a002aec <__udivmoddi4+0x214>
1a0029fa:	2700      	movs	r7, #0
1a0029fc:	e9c6 0100 	strd	r0, r1, [r6]
1a002a00:	4638      	mov	r0, r7
1a002a02:	4639      	mov	r1, r7
1a002a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002a08:	fab3 f783 	clz	r7, r3
1a002a0c:	b97f      	cbnz	r7, 1a002a2e <__udivmoddi4+0x156>
1a002a0e:	428b      	cmp	r3, r1
1a002a10:	d302      	bcc.n	1a002a18 <__udivmoddi4+0x140>
1a002a12:	4282      	cmp	r2, r0
1a002a14:	f200 80bd 	bhi.w	1a002b92 <__udivmoddi4+0x2ba>
1a002a18:	1a84      	subs	r4, r0, r2
1a002a1a:	eb61 0303 	sbc.w	r3, r1, r3
1a002a1e:	2001      	movs	r0, #1
1a002a20:	4698      	mov	r8, r3
1a002a22:	2e00      	cmp	r6, #0
1a002a24:	d0a9      	beq.n	1a00297a <__udivmoddi4+0xa2>
1a002a26:	e9c6 4800 	strd	r4, r8, [r6]
1a002a2a:	e7a6      	b.n	1a00297a <__udivmoddi4+0xa2>
1a002a2c:	deff      	udf	#255	; 0xff
1a002a2e:	f1c7 0520 	rsb	r5, r7, #32
1a002a32:	40bb      	lsls	r3, r7
1a002a34:	fa22 fc05 	lsr.w	ip, r2, r5
1a002a38:	ea4c 0c03 	orr.w	ip, ip, r3
1a002a3c:	fa01 f407 	lsl.w	r4, r1, r7
1a002a40:	fa20 f805 	lsr.w	r8, r0, r5
1a002a44:	fa21 f305 	lsr.w	r3, r1, r5
1a002a48:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a002a4c:	ea48 0404 	orr.w	r4, r8, r4
1a002a50:	fbb3 f9fe 	udiv	r9, r3, lr
1a002a54:	0c21      	lsrs	r1, r4, #16
1a002a56:	fb0e 3319 	mls	r3, lr, r9, r3
1a002a5a:	fa1f f88c 	uxth.w	r8, ip
1a002a5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a002a62:	fb09 fa08 	mul.w	sl, r9, r8
1a002a66:	459a      	cmp	sl, r3
1a002a68:	fa02 f207 	lsl.w	r2, r2, r7
1a002a6c:	fa00 f107 	lsl.w	r1, r0, r7
1a002a70:	d90b      	bls.n	1a002a8a <__udivmoddi4+0x1b2>
1a002a72:	eb1c 0303 	adds.w	r3, ip, r3
1a002a76:	f109 30ff 	add.w	r0, r9, #4294967295
1a002a7a:	f080 8088 	bcs.w	1a002b8e <__udivmoddi4+0x2b6>
1a002a7e:	459a      	cmp	sl, r3
1a002a80:	f240 8085 	bls.w	1a002b8e <__udivmoddi4+0x2b6>
1a002a84:	f1a9 0902 	sub.w	r9, r9, #2
1a002a88:	4463      	add	r3, ip
1a002a8a:	eba3 030a 	sub.w	r3, r3, sl
1a002a8e:	b2a4      	uxth	r4, r4
1a002a90:	fbb3 f0fe 	udiv	r0, r3, lr
1a002a94:	fb0e 3310 	mls	r3, lr, r0, r3
1a002a98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002a9c:	fb00 f808 	mul.w	r8, r0, r8
1a002aa0:	45a0      	cmp	r8, r4
1a002aa2:	d908      	bls.n	1a002ab6 <__udivmoddi4+0x1de>
1a002aa4:	eb1c 0404 	adds.w	r4, ip, r4
1a002aa8:	f100 33ff 	add.w	r3, r0, #4294967295
1a002aac:	d26b      	bcs.n	1a002b86 <__udivmoddi4+0x2ae>
1a002aae:	45a0      	cmp	r8, r4
1a002ab0:	d969      	bls.n	1a002b86 <__udivmoddi4+0x2ae>
1a002ab2:	3802      	subs	r0, #2
1a002ab4:	4464      	add	r4, ip
1a002ab6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a002aba:	eba4 0408 	sub.w	r4, r4, r8
1a002abe:	fba0 8902 	umull	r8, r9, r0, r2
1a002ac2:	454c      	cmp	r4, r9
1a002ac4:	46c6      	mov	lr, r8
1a002ac6:	464b      	mov	r3, r9
1a002ac8:	d354      	bcc.n	1a002b74 <__udivmoddi4+0x29c>
1a002aca:	d051      	beq.n	1a002b70 <__udivmoddi4+0x298>
1a002acc:	2e00      	cmp	r6, #0
1a002ace:	d069      	beq.n	1a002ba4 <__udivmoddi4+0x2cc>
1a002ad0:	ebb1 020e 	subs.w	r2, r1, lr
1a002ad4:	eb64 0403 	sbc.w	r4, r4, r3
1a002ad8:	fa04 f505 	lsl.w	r5, r4, r5
1a002adc:	fa22 f307 	lsr.w	r3, r2, r7
1a002ae0:	40fc      	lsrs	r4, r7
1a002ae2:	431d      	orrs	r5, r3
1a002ae4:	e9c6 5400 	strd	r5, r4, [r6]
1a002ae8:	2700      	movs	r7, #0
1a002aea:	e746      	b.n	1a00297a <__udivmoddi4+0xa2>
1a002aec:	4637      	mov	r7, r6
1a002aee:	4630      	mov	r0, r6
1a002af0:	e743      	b.n	1a00297a <__udivmoddi4+0xa2>
1a002af2:	4618      	mov	r0, r3
1a002af4:	e737      	b.n	1a002966 <__udivmoddi4+0x8e>
1a002af6:	4607      	mov	r7, r0
1a002af8:	e71f      	b.n	1a00293a <__udivmoddi4+0x62>
1a002afa:	f1c2 0320 	rsb	r3, r2, #32
1a002afe:	fa20 f703 	lsr.w	r7, r0, r3
1a002b02:	4095      	lsls	r5, r2
1a002b04:	fa01 f002 	lsl.w	r0, r1, r2
1a002b08:	fa21 f303 	lsr.w	r3, r1, r3
1a002b0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002b10:	4338      	orrs	r0, r7
1a002b12:	0c01      	lsrs	r1, r0, #16
1a002b14:	fbb3 f7fe 	udiv	r7, r3, lr
1a002b18:	fa1f f885 	uxth.w	r8, r5
1a002b1c:	fb0e 3317 	mls	r3, lr, r7, r3
1a002b20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002b24:	fb07 f308 	mul.w	r3, r7, r8
1a002b28:	428b      	cmp	r3, r1
1a002b2a:	fa04 f402 	lsl.w	r4, r4, r2
1a002b2e:	d907      	bls.n	1a002b40 <__udivmoddi4+0x268>
1a002b30:	1869      	adds	r1, r5, r1
1a002b32:	f107 3cff 	add.w	ip, r7, #4294967295
1a002b36:	d228      	bcs.n	1a002b8a <__udivmoddi4+0x2b2>
1a002b38:	428b      	cmp	r3, r1
1a002b3a:	d926      	bls.n	1a002b8a <__udivmoddi4+0x2b2>
1a002b3c:	3f02      	subs	r7, #2
1a002b3e:	4429      	add	r1, r5
1a002b40:	1acb      	subs	r3, r1, r3
1a002b42:	b281      	uxth	r1, r0
1a002b44:	fbb3 f0fe 	udiv	r0, r3, lr
1a002b48:	fb0e 3310 	mls	r3, lr, r0, r3
1a002b4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002b50:	fb00 f308 	mul.w	r3, r0, r8
1a002b54:	428b      	cmp	r3, r1
1a002b56:	d907      	bls.n	1a002b68 <__udivmoddi4+0x290>
1a002b58:	1869      	adds	r1, r5, r1
1a002b5a:	f100 3cff 	add.w	ip, r0, #4294967295
1a002b5e:	d210      	bcs.n	1a002b82 <__udivmoddi4+0x2aa>
1a002b60:	428b      	cmp	r3, r1
1a002b62:	d90e      	bls.n	1a002b82 <__udivmoddi4+0x2aa>
1a002b64:	3802      	subs	r0, #2
1a002b66:	4429      	add	r1, r5
1a002b68:	1ac9      	subs	r1, r1, r3
1a002b6a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a002b6e:	e714      	b.n	1a00299a <__udivmoddi4+0xc2>
1a002b70:	4541      	cmp	r1, r8
1a002b72:	d2ab      	bcs.n	1a002acc <__udivmoddi4+0x1f4>
1a002b74:	ebb8 0e02 	subs.w	lr, r8, r2
1a002b78:	eb69 020c 	sbc.w	r2, r9, ip
1a002b7c:	3801      	subs	r0, #1
1a002b7e:	4613      	mov	r3, r2
1a002b80:	e7a4      	b.n	1a002acc <__udivmoddi4+0x1f4>
1a002b82:	4660      	mov	r0, ip
1a002b84:	e7f0      	b.n	1a002b68 <__udivmoddi4+0x290>
1a002b86:	4618      	mov	r0, r3
1a002b88:	e795      	b.n	1a002ab6 <__udivmoddi4+0x1de>
1a002b8a:	4667      	mov	r7, ip
1a002b8c:	e7d8      	b.n	1a002b40 <__udivmoddi4+0x268>
1a002b8e:	4681      	mov	r9, r0
1a002b90:	e77b      	b.n	1a002a8a <__udivmoddi4+0x1b2>
1a002b92:	4638      	mov	r0, r7
1a002b94:	e745      	b.n	1a002a22 <__udivmoddi4+0x14a>
1a002b96:	f1ac 0c02 	sub.w	ip, ip, #2
1a002b9a:	442b      	add	r3, r5
1a002b9c:	e710      	b.n	1a0029c0 <__udivmoddi4+0xe8>
1a002b9e:	3802      	subs	r0, #2
1a002ba0:	442c      	add	r4, r5
1a002ba2:	e721      	b.n	1a0029e8 <__udivmoddi4+0x110>
1a002ba4:	4637      	mov	r7, r6
1a002ba6:	e6e8      	b.n	1a00297a <__udivmoddi4+0xa2>

1a002ba8 <__aeabi_idiv0>:
1a002ba8:	4770      	bx	lr
1a002baa:	bf00      	nop

1a002bac <__libc_init_array>:
1a002bac:	b570      	push	{r4, r5, r6, lr}
1a002bae:	4d0d      	ldr	r5, [pc, #52]	; (1a002be4 <__libc_init_array+0x38>)
1a002bb0:	4c0d      	ldr	r4, [pc, #52]	; (1a002be8 <__libc_init_array+0x3c>)
1a002bb2:	1b64      	subs	r4, r4, r5
1a002bb4:	10a4      	asrs	r4, r4, #2
1a002bb6:	2600      	movs	r6, #0
1a002bb8:	42a6      	cmp	r6, r4
1a002bba:	d109      	bne.n	1a002bd0 <__libc_init_array+0x24>
1a002bbc:	4d0b      	ldr	r5, [pc, #44]	; (1a002bec <__libc_init_array+0x40>)
1a002bbe:	4c0c      	ldr	r4, [pc, #48]	; (1a002bf0 <__libc_init_array+0x44>)
1a002bc0:	f7fd fed5 	bl	1a00096e <_init>
1a002bc4:	1b64      	subs	r4, r4, r5
1a002bc6:	10a4      	asrs	r4, r4, #2
1a002bc8:	2600      	movs	r6, #0
1a002bca:	42a6      	cmp	r6, r4
1a002bcc:	d105      	bne.n	1a002bda <__libc_init_array+0x2e>
1a002bce:	bd70      	pop	{r4, r5, r6, pc}
1a002bd0:	f855 3b04 	ldr.w	r3, [r5], #4
1a002bd4:	4798      	blx	r3
1a002bd6:	3601      	adds	r6, #1
1a002bd8:	e7ee      	b.n	1a002bb8 <__libc_init_array+0xc>
1a002bda:	f855 3b04 	ldr.w	r3, [r5], #4
1a002bde:	4798      	blx	r3
1a002be0:	3601      	adds	r6, #1
1a002be2:	e7f2      	b.n	1a002bca <__libc_init_array+0x1e>
1a002be4:	1a003040 	.word	0x1a003040
1a002be8:	1a003040 	.word	0x1a003040
1a002bec:	1a003040 	.word	0x1a003040
1a002bf0:	1a003044 	.word	0x1a003044

1a002bf4 <memset>:
1a002bf4:	4402      	add	r2, r0
1a002bf6:	4603      	mov	r3, r0
1a002bf8:	4293      	cmp	r3, r2
1a002bfa:	d100      	bne.n	1a002bfe <memset+0xa>
1a002bfc:	4770      	bx	lr
1a002bfe:	f803 1b01 	strb.w	r1, [r3], #1
1a002c02:	e7f9      	b.n	1a002bf8 <memset+0x4>

1a002c04 <strstr>:
1a002c04:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002c06:	780c      	ldrb	r4, [r1, #0]
1a002c08:	b164      	cbz	r4, 1a002c24 <strstr+0x20>
1a002c0a:	4603      	mov	r3, r0
1a002c0c:	781a      	ldrb	r2, [r3, #0]
1a002c0e:	4618      	mov	r0, r3
1a002c10:	1c5e      	adds	r6, r3, #1
1a002c12:	b90a      	cbnz	r2, 1a002c18 <strstr+0x14>
1a002c14:	4610      	mov	r0, r2
1a002c16:	e005      	b.n	1a002c24 <strstr+0x20>
1a002c18:	4294      	cmp	r4, r2
1a002c1a:	d108      	bne.n	1a002c2e <strstr+0x2a>
1a002c1c:	460d      	mov	r5, r1
1a002c1e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
1a002c22:	b902      	cbnz	r2, 1a002c26 <strstr+0x22>
1a002c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a002c26:	f813 7f01 	ldrb.w	r7, [r3, #1]!
1a002c2a:	4297      	cmp	r7, r2
1a002c2c:	d0f7      	beq.n	1a002c1e <strstr+0x1a>
1a002c2e:	4633      	mov	r3, r6
1a002c30:	e7ec      	b.n	1a002c0c <strstr+0x8>
1a002c32:	ffff 5441 	vmls.i<illegal width 64>	<illegal reg q10.5>, <illegal reg q7.5>, d1[0]
1a002c36:	432b      	.short	0x432b
1a002c38:	4c435049 	.word	0x4c435049
1a002c3c:	3d45534f 	.word	0x3d45534f
1a002c40:	000a0d30 	.word	0x000a0d30
1a002c44:	432b5441 	.word	0x432b5441
1a002c48:	4c435049 	.word	0x4c435049
1a002c4c:	3d45534f 	.word	0x3d45534f
1a002c50:	000a0d31 	.word	0x000a0d31
1a002c54:	6f43203e 	.word	0x6f43203e
1a002c58:	6769666e 	.word	0x6769666e
1a002c5c:	6e617275 	.word	0x6e617275
1a002c60:	45206f64 	.word	0x45206f64
1a002c64:	32385053 	.word	0x32385053
1a002c68:	302d3636 	.word	0x302d3636
1a002c6c:	000a0d31 	.word	0x000a0d31
1a002c70:	432b5441 	.word	0x432b5441
1a002c74:	444f4d57 	.word	0x444f4d57
1a002c78:	0d333d45 	.word	0x0d333d45
1a002c7c:	0000000a 	.word	0x0000000a
1a002c80:	432b5441 	.word	0x432b5441
1a002c84:	50415357 	.word	0x50415357
1a002c88:	6f52223d 	.word	0x6f52223d
1a002c8c:	65426461 	.word	0x65426461
1a002c90:	22747361 	.word	0x22747361
1a002c94:	3231222c 	.word	0x3231222c
1a002c98:	36353433 	.word	0x36353433
1a002c9c:	2c223837 	.word	0x2c223837
1a002ca0:	332c3131 	.word	0x332c3131
1a002ca4:	0a0d332c 	.word	0x0a0d332c
1a002ca8:	00000000 	.word	0x00000000
1a002cac:	432b5441 	.word	0x432b5441
1a002cb0:	554d5049 	.word	0x554d5049
1a002cb4:	0d313d58 	.word	0x0d313d58
1a002cb8:	0000000a 	.word	0x0000000a
1a002cbc:	432b5441 	.word	0x432b5441
1a002cc0:	45535049 	.word	0x45535049
1a002cc4:	52455652 	.word	0x52455652
1a002cc8:	382c313d 	.word	0x382c313d
1a002ccc:	000a0d30 	.word	0x000a0d30
1a002cd0:	5345203e 	.word	0x5345203e
1a002cd4:	36323850 	.word	0x36323850
1a002cd8:	31302d36 	.word	0x31302d36
1a002cdc:	6e6f6320 	.word	0x6e6f6320
1a002ce0:	75676966 	.word	0x75676966
1a002ce4:	6f646172 	.word	0x6f646172
1a002ce8:	726f6320 	.word	0x726f6320
1a002cec:	74636572 	.word	0x74636572
1a002cf0:	6e656d61 	.word	0x6e656d61
1a002cf4:	0a0d6574 	.word	0x0a0d6574
1a002cf8:	00000000 	.word	0x00000000
1a002cfc:	7245203e 	.word	0x7245203e
1a002d00:	20726f72 	.word	0x20726f72
1a002d04:	6c206e65 	.word	0x6c206e65
1a002d08:	6f632061 	.word	0x6f632061
1a002d0c:	6769666e 	.word	0x6769666e
1a002d10:	63617275 	.word	0x63617275
1a002d14:	206e6f69 	.word	0x206e6f69
1a002d18:	206c6564 	.word	0x206c6564
1a002d1c:	50534520 	.word	0x50534520
1a002d20:	36363238 	.word	0x36363238
1a002d24:	0d31302d 	.word	0x0d31302d
1a002d28:	ffff000a 	.word	0xffff000a
1a002d2c:	6c656461 	.word	0x6c656461
1a002d30:	65746e61 	.word	0x65746e61
1a002d34:	00000000 	.word	0x00000000
1a002d38:	61727461 	.word	0x61727461
1a002d3c:	00000073 	.word	0x00000073
1a002d40:	6f726967 	.word	0x6f726967
1a002d44:	00000000 	.word	0x00000000
1a002d48:	706f7473 	.word	0x706f7473
1a002d4c:	00000000 	.word	0x00000000
1a002d50:	39207365 	.word	0x39207365
1a002d54:	000a0d30 	.word	0x000a0d30
1a002d58:	37207365 	.word	0x37207365
1a002d5c:	000a0d35 	.word	0x000a0d35
1a002d60:	ff000a0d 	.word	0xff000a0d
1a002d64:	72746e65 	.word	0x72746e65
1a002d68:	000a0d6f 	.word	0x000a0d6f

1a002d6c <InitClkStates>:
1a002d6c:	01010f01                                ....

1a002d70 <pinmuxing>:
1a002d70:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a002d80:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a002d90:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a002da0:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a002db0:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a002dc0:	00d50301 00d50401 00160107 00560207     ..............V.
1a002dd0:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a002de0:	00570206                                ..W.

1a002de4 <ExtRateIn>:
1a002de4:	00000000                                ....

1a002de8 <GpioButtons>:
1a002de8:	08000400 09010900                       ........

1a002df0 <GpioLeds>:
1a002df0:	01050005 0e000205 0c010b01              ............

1a002dfc <GpioPorts>:
1a002dfc:	03030003 0f050403 05031005 07030603     ................
1a002e0c:	ffff0802                                ....

1a002e10 <OscRateIn>:
1a002e10:	00b71b00                                ....

1a002e14 <InitClkStates>:
1a002e14:	00010100 00010909 0001090a 01010701     ................
1a002e24:	00010902 00010906 0101090c 0001090d     ................
1a002e34:	0001090e 0001090f 00010910 00010911     ................
1a002e44:	00010912 00010913 00011114 00011119     ................
1a002e54:	0001111a 0001111b 08040201 0f0f0f03     ................
1a002e64:	000000ff                                ....

1a002e68 <periph_to_base>:
1a002e68:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a002e78:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a002e88:	000100e0 01000100 01200003 00060120     .......... . ...
1a002e98:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a002ea8:	01820013 00120182 01a201a2 01c20011     ................
1a002eb8:	001001c2 01e201e2 0202000f 000e0202     ................
1a002ec8:	02220222 0223000d 001c0223              "."...#.#...

1a002ed4 <UART_BClock>:
1a002ed4:	01a201c2 01620182                       ......b.

1a002edc <UART_PClock>:
1a002edc:	00820081 00a200a1                       ........

1a002ee4 <gpioPinsInit>:
1a002ee4:	02000104 00050701 05010d03 04080100     ................
1a002ef4:	02020002 02000304 00000403 04070002     ................
1a002f04:	030c0300 09050402 05040103 04030208     ................
1a002f14:	04020305 06040504 0802000c 03000b06     ................
1a002f24:	00090607 07060503 060f0504 03030004     ................
1a002f34:	02000404 00050404 06040502 04060200     ................
1a002f44:	0c050408 05040a04 0003010e 14010a00     ................
1a002f54:	010f0000 0d000012 00001101 0010010c     ................
1a002f64:	07070300 000f0300 01000001 00000000     ................
1a002f74:	000a0600 08060603 06100504 04030005     ................
1a002f84:	03000106 04090400 04010d05 010b0000     ................
1a002f94:	0200000f 00000001 00010104 02010800     ................
1a002fa4:	01090000 09010006 05040002 04010200     ................
1a002fb4:	02020105 02020504 0e00000a 01000b02     ................
1a002fc4:	000c020b ffff0c01                       ........

1a002fcc <pwmMap>:
1a002fcc:	000a0c01 02070d03 ff060405              ............

1a002fd8 <lpcUarts>:
1a002fd8:	40081000 06020406 00180205 40081000     ...@...........@
1a002fe8:	09070509 00180706 40082000 00000000     ......... .@....
1a002ff8:	00190000 400c1000 07060107 001a0602     .......@........
1a003008:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a003018:	02020302 001b0204                       ........

1a003020 <SCTdataList>:
1a003020:	01040204 03040a02 0b020c02 0c060506     ................
1a003030:	04010301 00000501 04070507              ............

1a00303c <ultrasonicSensorsIrqMap>:
1a00303c:	ff020100                                ....
